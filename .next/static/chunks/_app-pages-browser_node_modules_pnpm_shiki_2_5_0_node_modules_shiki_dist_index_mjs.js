"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_shiki_2_5_0_node_modules_shiki_dist_index_mjs"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/index.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/index.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontStyle: () => (/* reexport safe */ _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle),\n/* harmony export */   ShikiError: () => (/* reexport safe */ _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError),\n/* harmony export */   StackElementMetadata: () => (/* reexport safe */ _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.EncodedTokenMetadata),\n/* harmony export */   addClassToHast: () => (/* binding */ addClassToHast),\n/* harmony export */   applyColorReplacements: () => (/* binding */ applyColorReplacements),\n/* harmony export */   codeToHast: () => (/* binding */ codeToHast),\n/* harmony export */   codeToHtml: () => (/* binding */ codeToHtml),\n/* harmony export */   codeToTokens: () => (/* binding */ codeToTokens),\n/* harmony export */   codeToTokensBase: () => (/* binding */ codeToTokensBase),\n/* harmony export */   codeToTokensWithThemes: () => (/* binding */ codeToTokensWithThemes),\n/* harmony export */   createCssVariablesTheme: () => (/* binding */ createCssVariablesTheme),\n/* harmony export */   createHighlighterCore: () => (/* binding */ createHighlighterCore),\n/* harmony export */   createHighlighterCoreSync: () => (/* binding */ createHighlighterCoreSync),\n/* harmony export */   createJavaScriptRegexEngine: () => (/* binding */ createJavaScriptRegexEngine),\n/* harmony export */   createOnigurumaEngine: () => (/* binding */ createOnigurumaEngine),\n/* harmony export */   createPositionConverter: () => (/* binding */ createPositionConverter),\n/* harmony export */   createShikiInternal: () => (/* binding */ createShikiInternal),\n/* harmony export */   createShikiInternalSync: () => (/* binding */ createShikiInternalSync),\n/* harmony export */   createSingletonShorthands: () => (/* binding */ createSingletonShorthands),\n/* harmony export */   createWasmOnigEngine: () => (/* binding */ createWasmOnigEngine),\n/* harmony export */   createdBundledHighlighter: () => (/* binding */ createdBundledHighlighter),\n/* harmony export */   defaultJavaScriptRegexConstructor: () => (/* binding */ defaultJavaScriptRegexConstructor),\n/* harmony export */   enableDeprecationWarnings: () => (/* reexport safe */ _shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.e),\n/* harmony export */   flatTokenVariants: () => (/* binding */ flatTokenVariants),\n/* harmony export */   getHighlighterCore: () => (/* binding */ getHighlighterCore),\n/* harmony export */   getShikiInternal: () => (/* binding */ getShikiInternal),\n/* harmony export */   getSingletonHighlighterCore: () => (/* binding */ getSingletonHighlighterCore),\n/* harmony export */   getTokenStyleObject: () => (/* binding */ getTokenStyleObject),\n/* harmony export */   guessEmbeddedLanguages: () => (/* binding */ guessEmbeddedLanguages),\n/* harmony export */   hastToHtml: () => (/* reexport safe */ hast_util_to_html__WEBPACK_IMPORTED_MODULE_3__.toHtml),\n/* harmony export */   isNoneTheme: () => (/* binding */ isNoneTheme),\n/* harmony export */   isPlainLang: () => (/* binding */ isPlainLang),\n/* harmony export */   isSpecialLang: () => (/* binding */ isSpecialLang),\n/* harmony export */   isSpecialTheme: () => (/* binding */ isSpecialTheme),\n/* harmony export */   loadWasm: () => (/* binding */ loadWasm),\n/* harmony export */   makeSingletonHighlighter: () => (/* binding */ makeSingletonHighlighter),\n/* harmony export */   makeSingletonHighlighterCore: () => (/* binding */ makeSingletonHighlighterCore),\n/* harmony export */   normalizeGetter: () => (/* binding */ normalizeGetter),\n/* harmony export */   normalizeTheme: () => (/* binding */ normalizeTheme),\n/* harmony export */   resolveColorReplacements: () => (/* binding */ resolveColorReplacements),\n/* harmony export */   splitLines: () => (/* binding */ splitLines),\n/* harmony export */   splitToken: () => (/* binding */ splitToken),\n/* harmony export */   splitTokens: () => (/* binding */ splitTokens),\n/* harmony export */   stringifyTokenStyle: () => (/* binding */ stringifyTokenStyle),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   tokenizeAnsiWithTheme: () => (/* binding */ tokenizeAnsiWithTheme),\n/* harmony export */   tokenizeWithTheme: () => (/* binding */ tokenizeWithTheme),\n/* harmony export */   tokensToHast: () => (/* binding */ tokensToHast),\n/* harmony export */   transformerDecorations: () => (/* binding */ transformerDecorations),\n/* harmony export */   warnDeprecated: () => (/* reexport safe */ _shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)\n/* harmony export */ });\n/* harmony import */ var _shikijs_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shikijs/types */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+types@2.5.0/node_modules/@shikijs/types/dist/index.mjs\");\n/* harmony import */ var _shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shikijs/engine-oniguruma */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-oniguruma@2.5.0/node_modules/@shikijs/engine-oniguruma/dist/index.mjs\");\n/* harmony import */ var _shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/core.5hv0Law9.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs\");\n/* harmony import */ var _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shikijs/vscode-textmate */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+vscode-textmate@10.0.2/node_modules/@shikijs/vscode-textmate/dist/index.js\");\n/* harmony import */ var hast_util_to_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hast-util-to-html */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.js\");\n/* harmony import */ var _shikijs_engine_javascript__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shikijs/engine-javascript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/engine-compile.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nfunction createOnigurumaEngine(options) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"import `createOnigurumaEngine` from `@shikijs/engine-oniguruma` or `shiki/engine/oniguruma` instead\");\n  return (0,_shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__.createOnigurumaEngine)(options);\n}\nfunction createWasmOnigEngine(options) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"import `createOnigurumaEngine` from `@shikijs/engine-oniguruma` or `shiki/engine/oniguruma` instead\");\n  return (0,_shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__.createOnigurumaEngine)(options);\n}\nfunction loadWasm(options) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"import `loadWasm` from `@shikijs/engine-oniguruma` or `shiki/engine/oniguruma` instead\");\n  return (0,_shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__.loadWasm)(options);\n}\n\nfunction resolveColorReplacements(theme, options) {\n  const replacements = typeof theme === \"string\" ? {} : { ...theme.colorReplacements };\n  const themeName = typeof theme === \"string\" ? theme : theme.name;\n  for (const [key, value] of Object.entries(options?.colorReplacements || {})) {\n    if (typeof value === \"string\")\n      replacements[key] = value;\n    else if (key === themeName)\n      Object.assign(replacements, value);\n  }\n  return replacements;\n}\nfunction applyColorReplacements(color, replacements) {\n  if (!color)\n    return color;\n  return replacements?.[color?.toLowerCase()] || color;\n}\n\nfunction toArray(x) {\n  return Array.isArray(x) ? x : [x];\n}\nasync function normalizeGetter(p) {\n  return Promise.resolve(typeof p === \"function\" ? p() : p).then((r) => r.default || r);\n}\nfunction isPlainLang(lang) {\n  return !lang || [\"plaintext\", \"txt\", \"text\", \"plain\"].includes(lang);\n}\nfunction isSpecialLang(lang) {\n  return lang === \"ansi\" || isPlainLang(lang);\n}\nfunction isNoneTheme(theme) {\n  return theme === \"none\";\n}\nfunction isSpecialTheme(theme) {\n  return isNoneTheme(theme);\n}\n\nfunction addClassToHast(node, className) {\n  if (!className)\n    return node;\n  node.properties ||= {};\n  node.properties.class ||= [];\n  if (typeof node.properties.class === \"string\")\n    node.properties.class = node.properties.class.split(/\\s+/g);\n  if (!Array.isArray(node.properties.class))\n    node.properties.class = [];\n  const targets = Array.isArray(className) ? className : className.split(/\\s+/g);\n  for (const c of targets) {\n    if (c && !node.properties.class.includes(c))\n      node.properties.class.push(c);\n  }\n  return node;\n}\n\nfunction splitLines(code, preserveEnding = false) {\n  const parts = code.split(/(\\r?\\n)/g);\n  let index = 0;\n  const lines = [];\n  for (let i = 0; i < parts.length; i += 2) {\n    const line = preserveEnding ? parts[i] + (parts[i + 1] || \"\") : parts[i];\n    lines.push([line, index]);\n    index += parts[i].length;\n    index += parts[i + 1]?.length || 0;\n  }\n  return lines;\n}\nfunction createPositionConverter(code) {\n  const lines = splitLines(code, true).map(([line]) => line);\n  function indexToPos(index) {\n    if (index === code.length) {\n      return {\n        line: lines.length - 1,\n        character: lines[lines.length - 1].length\n      };\n    }\n    let character = index;\n    let line = 0;\n    for (const lineText of lines) {\n      if (character < lineText.length)\n        break;\n      character -= lineText.length;\n      line++;\n    }\n    return { line, character };\n  }\n  function posToIndex(line, character) {\n    let index = 0;\n    for (let i = 0; i < line; i++)\n      index += lines[i].length;\n    index += character;\n    return index;\n  }\n  return {\n    lines,\n    indexToPos,\n    posToIndex\n  };\n}\nfunction guessEmbeddedLanguages(code, _lang, highlighter) {\n  const langs = /* @__PURE__ */ new Set();\n  for (const match of code.matchAll(/lang=[\"']([\\w-]+)[\"']/g)) {\n    langs.add(match[1]);\n  }\n  for (const match of code.matchAll(/(?:```|~~~)([\\w-]+)/g)) {\n    langs.add(match[1]);\n  }\n  for (const match of code.matchAll(/\\\\begin\\{([\\w-]+)\\}/g)) {\n    langs.add(match[1]);\n  }\n  if (!highlighter)\n    return Array.from(langs);\n  const bundle = highlighter.getBundledLanguages();\n  return Array.from(langs).filter((l) => l && bundle[l]);\n}\n\nfunction splitToken(token, offsets) {\n  let lastOffset = 0;\n  const tokens = [];\n  for (const offset of offsets) {\n    if (offset > lastOffset) {\n      tokens.push({\n        ...token,\n        content: token.content.slice(lastOffset, offset),\n        offset: token.offset + lastOffset\n      });\n    }\n    lastOffset = offset;\n  }\n  if (lastOffset < token.content.length) {\n    tokens.push({\n      ...token,\n      content: token.content.slice(lastOffset),\n      offset: token.offset + lastOffset\n    });\n  }\n  return tokens;\n}\nfunction splitTokens(tokens, breakpoints) {\n  const sorted = Array.from(breakpoints instanceof Set ? breakpoints : new Set(breakpoints)).sort((a, b) => a - b);\n  if (!sorted.length)\n    return tokens;\n  return tokens.map((line) => {\n    return line.flatMap((token) => {\n      const breakpointsInToken = sorted.filter((i) => token.offset < i && i < token.offset + token.content.length).map((i) => i - token.offset).sort((a, b) => a - b);\n      if (!breakpointsInToken.length)\n        return token;\n      return splitToken(token, breakpointsInToken);\n    });\n  });\n}\nfunction flatTokenVariants(merged, variantsOrder, cssVariablePrefix, defaultColor) {\n  const token = {\n    content: merged.content,\n    explanation: merged.explanation,\n    offset: merged.offset\n  };\n  const styles = variantsOrder.map((t) => getTokenStyleObject(merged.variants[t]));\n  const styleKeys = new Set(styles.flatMap((t) => Object.keys(t)));\n  const mergedStyles = {};\n  styles.forEach((cur, idx) => {\n    for (const key of styleKeys) {\n      const value = cur[key] || \"inherit\";\n      if (idx === 0 && defaultColor) {\n        mergedStyles[key] = value;\n      } else {\n        const keyName = key === \"color\" ? \"\" : key === \"background-color\" ? \"-bg\" : `-${key}`;\n        const varKey = cssVariablePrefix + variantsOrder[idx] + (key === \"color\" ? \"\" : keyName);\n        mergedStyles[varKey] = value;\n      }\n    }\n  });\n  token.htmlStyle = mergedStyles;\n  return token;\n}\nfunction getTokenStyleObject(token) {\n  const styles = {};\n  if (token.color)\n    styles.color = token.color;\n  if (token.bgColor)\n    styles[\"background-color\"] = token.bgColor;\n  if (token.fontStyle) {\n    if (token.fontStyle & _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Italic)\n      styles[\"font-style\"] = \"italic\";\n    if (token.fontStyle & _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Bold)\n      styles[\"font-weight\"] = \"bold\";\n    if (token.fontStyle & _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Underline)\n      styles[\"text-decoration\"] = \"underline\";\n  }\n  return styles;\n}\nfunction stringifyTokenStyle(token) {\n  if (typeof token === \"string\")\n    return token;\n  return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(\";\");\n}\n\nconst _grammarStateMap = /* @__PURE__ */ new WeakMap();\nfunction setLastGrammarStateToMap(keys, state) {\n  _grammarStateMap.set(keys, state);\n}\nfunction getLastGrammarStateFromMap(keys) {\n  return _grammarStateMap.get(keys);\n}\nclass GrammarState {\n  /**\n   * Theme to Stack mapping\n   */\n  _stacks = {};\n  lang;\n  get themes() {\n    return Object.keys(this._stacks);\n  }\n  get theme() {\n    return this.themes[0];\n  }\n  get _stack() {\n    return this._stacks[this.theme];\n  }\n  /**\n   * Static method to create a initial grammar state.\n   */\n  static initial(lang, themes) {\n    return new GrammarState(\n      Object.fromEntries(toArray(themes).map((theme) => [theme, _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.INITIAL])),\n      lang\n    );\n  }\n  constructor(...args) {\n    if (args.length === 2) {\n      const [stacksMap, lang] = args;\n      this.lang = lang;\n      this._stacks = stacksMap;\n    } else {\n      const [stack, lang, theme] = args;\n      this.lang = lang;\n      this._stacks = { [theme]: stack };\n    }\n  }\n  /**\n   * Get the internal stack object.\n   * @internal\n   */\n  getInternalStack(theme = this.theme) {\n    return this._stacks[theme];\n  }\n  /**\n   * @deprecated use `getScopes` instead\n   */\n  get scopes() {\n    (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"GrammarState.scopes is deprecated, use GrammarState.getScopes() instead\");\n    return getScopes(this._stacks[this.theme]);\n  }\n  getScopes(theme = this.theme) {\n    return getScopes(this._stacks[theme]);\n  }\n  toJSON() {\n    return {\n      lang: this.lang,\n      theme: this.theme,\n      themes: this.themes,\n      scopes: this.getScopes()\n    };\n  }\n}\nfunction getScopes(stack) {\n  const scopes = [];\n  const visited = /* @__PURE__ */ new Set();\n  function pushScope(stack2) {\n    if (visited.has(stack2))\n      return;\n    visited.add(stack2);\n    const name = stack2?.nameScopesList?.scopeName;\n    if (name)\n      scopes.push(name);\n    if (stack2.parent)\n      pushScope(stack2.parent);\n  }\n  pushScope(stack);\n  return scopes;\n}\nfunction getGrammarStack(state, theme) {\n  if (!(state instanceof GrammarState))\n    throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(\"Invalid grammar state\");\n  return state.getInternalStack(theme);\n}\n\nfunction transformerDecorations() {\n  const map = /* @__PURE__ */ new WeakMap();\n  function getContext(shiki) {\n    if (!map.has(shiki.meta)) {\n      let normalizePosition = function(p) {\n        if (typeof p === \"number\") {\n          if (p < 0 || p > shiki.source.length)\n            throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Invalid decoration offset: ${p}. Code length: ${shiki.source.length}`);\n          return {\n            ...converter.indexToPos(p),\n            offset: p\n          };\n        } else {\n          const line = converter.lines[p.line];\n          if (line === void 0)\n            throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Invalid decoration position ${JSON.stringify(p)}. Lines length: ${converter.lines.length}`);\n          if (p.character < 0 || p.character > line.length)\n            throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Invalid decoration position ${JSON.stringify(p)}. Line ${p.line} length: ${line.length}`);\n          return {\n            ...p,\n            offset: converter.posToIndex(p.line, p.character)\n          };\n        }\n      };\n      const converter = createPositionConverter(shiki.source);\n      const decorations = (shiki.options.decorations || []).map((d) => ({\n        ...d,\n        start: normalizePosition(d.start),\n        end: normalizePosition(d.end)\n      }));\n      verifyIntersections(decorations);\n      map.set(shiki.meta, {\n        decorations,\n        converter,\n        source: shiki.source\n      });\n    }\n    return map.get(shiki.meta);\n  }\n  return {\n    name: \"shiki:decorations\",\n    tokens(tokens) {\n      if (!this.options.decorations?.length)\n        return;\n      const ctx = getContext(this);\n      const breakpoints = ctx.decorations.flatMap((d) => [d.start.offset, d.end.offset]);\n      const splitted = splitTokens(tokens, breakpoints);\n      return splitted;\n    },\n    code(codeEl) {\n      if (!this.options.decorations?.length)\n        return;\n      const ctx = getContext(this);\n      const lines = Array.from(codeEl.children).filter((i) => i.type === \"element\" && i.tagName === \"span\");\n      if (lines.length !== ctx.converter.lines.length)\n        throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Number of lines in code element (${lines.length}) does not match the number of lines in the source (${ctx.converter.lines.length}). Failed to apply decorations.`);\n      function applyLineSection(line, start, end, decoration) {\n        const lineEl = lines[line];\n        let text = \"\";\n        let startIndex = -1;\n        let endIndex = -1;\n        if (start === 0)\n          startIndex = 0;\n        if (end === 0)\n          endIndex = 0;\n        if (end === Number.POSITIVE_INFINITY)\n          endIndex = lineEl.children.length;\n        if (startIndex === -1 || endIndex === -1) {\n          for (let i = 0; i < lineEl.children.length; i++) {\n            text += stringify(lineEl.children[i]);\n            if (startIndex === -1 && text.length === start)\n              startIndex = i + 1;\n            if (endIndex === -1 && text.length === end)\n              endIndex = i + 1;\n          }\n        }\n        if (startIndex === -1)\n          throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Failed to find start index for decoration ${JSON.stringify(decoration.start)}`);\n        if (endIndex === -1)\n          throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Failed to find end index for decoration ${JSON.stringify(decoration.end)}`);\n        const children = lineEl.children.slice(startIndex, endIndex);\n        if (!decoration.alwaysWrap && children.length === lineEl.children.length) {\n          applyDecoration(lineEl, decoration, \"line\");\n        } else if (!decoration.alwaysWrap && children.length === 1 && children[0].type === \"element\") {\n          applyDecoration(children[0], decoration, \"token\");\n        } else {\n          const wrapper = {\n            type: \"element\",\n            tagName: \"span\",\n            properties: {},\n            children\n          };\n          applyDecoration(wrapper, decoration, \"wrapper\");\n          lineEl.children.splice(startIndex, children.length, wrapper);\n        }\n      }\n      function applyLine(line, decoration) {\n        lines[line] = applyDecoration(lines[line], decoration, \"line\");\n      }\n      function applyDecoration(el, decoration, type) {\n        const properties = decoration.properties || {};\n        const transform = decoration.transform || ((i) => i);\n        el.tagName = decoration.tagName || \"span\";\n        el.properties = {\n          ...el.properties,\n          ...properties,\n          class: el.properties.class\n        };\n        if (decoration.properties?.class)\n          addClassToHast(el, decoration.properties.class);\n        el = transform(el, type) || el;\n        return el;\n      }\n      const lineApplies = [];\n      const sorted = ctx.decorations.sort((a, b) => b.start.offset - a.start.offset || a.end.offset - b.end.offset);\n      for (const decoration of sorted) {\n        const { start, end } = decoration;\n        if (start.line === end.line) {\n          applyLineSection(start.line, start.character, end.character, decoration);\n        } else if (start.line < end.line) {\n          applyLineSection(start.line, start.character, Number.POSITIVE_INFINITY, decoration);\n          for (let i = start.line + 1; i < end.line; i++)\n            lineApplies.unshift(() => applyLine(i, decoration));\n          applyLineSection(end.line, 0, end.character, decoration);\n        }\n      }\n      lineApplies.forEach((i) => i());\n    }\n  };\n}\nfunction verifyIntersections(items) {\n  for (let i = 0; i < items.length; i++) {\n    const foo = items[i];\n    if (foo.start.offset > foo.end.offset)\n      throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Invalid decoration range: ${JSON.stringify(foo.start)} - ${JSON.stringify(foo.end)}`);\n    for (let j = i + 1; j < items.length; j++) {\n      const bar = items[j];\n      const isFooHasBarStart = foo.start.offset <= bar.start.offset && bar.start.offset < foo.end.offset;\n      const isFooHasBarEnd = foo.start.offset < bar.end.offset && bar.end.offset <= foo.end.offset;\n      const isBarHasFooStart = bar.start.offset <= foo.start.offset && foo.start.offset < bar.end.offset;\n      const isBarHasFooEnd = bar.start.offset < foo.end.offset && foo.end.offset <= bar.end.offset;\n      if (isFooHasBarStart || isFooHasBarEnd || isBarHasFooStart || isBarHasFooEnd) {\n        if (isFooHasBarStart && isFooHasBarEnd)\n          continue;\n        if (isBarHasFooStart && isBarHasFooEnd)\n          continue;\n        throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Decorations ${JSON.stringify(foo.start)} and ${JSON.stringify(bar.start)} intersect.`);\n      }\n    }\n  }\n}\nfunction stringify(el) {\n  if (el.type === \"text\")\n    return el.value;\n  if (el.type === \"element\")\n    return el.children.map(stringify).join(\"\");\n  return \"\";\n}\n\nconst builtInTransformers = [\n  /* @__PURE__ */ transformerDecorations()\n];\nfunction getTransformers(options) {\n  return [\n    ...options.transformers || [],\n    ...builtInTransformers\n  ];\n}\n\n// src/colors.ts\nvar namedColors = [\n  \"black\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\",\n  \"magenta\",\n  \"cyan\",\n  \"white\",\n  \"brightBlack\",\n  \"brightRed\",\n  \"brightGreen\",\n  \"brightYellow\",\n  \"brightBlue\",\n  \"brightMagenta\",\n  \"brightCyan\",\n  \"brightWhite\"\n];\n\n// src/decorations.ts\nvar decorations = {\n  1: \"bold\",\n  2: \"dim\",\n  3: \"italic\",\n  4: \"underline\",\n  7: \"reverse\",\n  8: \"hidden\",\n  9: \"strikethrough\"\n};\n\n// src/parser.ts\nfunction findSequence(value, position) {\n  const nextEscape = value.indexOf(\"\\x1B\", position);\n  if (nextEscape !== -1) {\n    if (value[nextEscape + 1] === \"[\") {\n      const nextClose = value.indexOf(\"m\", nextEscape);\n      if (nextClose !== -1) {\n        return {\n          sequence: value.substring(nextEscape + 2, nextClose).split(\";\"),\n          startPosition: nextEscape,\n          position: nextClose + 1\n        };\n      }\n    }\n  }\n  return {\n    position: value.length\n  };\n}\nfunction parseColor(sequence) {\n  const colorMode = sequence.shift();\n  if (colorMode === \"2\") {\n    const rgb = sequence.splice(0, 3).map((x) => Number.parseInt(x));\n    if (rgb.length !== 3 || rgb.some((x) => Number.isNaN(x)))\n      return;\n    return {\n      type: \"rgb\",\n      rgb\n    };\n  } else if (colorMode === \"5\") {\n    const index = sequence.shift();\n    if (index) {\n      return { type: \"table\", index: Number(index) };\n    }\n  }\n}\nfunction parseSequence(sequence) {\n  const commands = [];\n  while (sequence.length > 0) {\n    const code = sequence.shift();\n    if (!code)\n      continue;\n    const codeInt = Number.parseInt(code);\n    if (Number.isNaN(codeInt))\n      continue;\n    if (codeInt === 0) {\n      commands.push({ type: \"resetAll\" });\n    } else if (codeInt <= 9) {\n      const decoration = decorations[codeInt];\n      if (decoration) {\n        commands.push({\n          type: \"setDecoration\",\n          value: decorations[codeInt]\n        });\n      }\n    } else if (codeInt <= 29) {\n      const decoration = decorations[codeInt - 20];\n      if (decoration) {\n        commands.push({\n          type: \"resetDecoration\",\n          value: decoration\n        });\n        if (decoration === \"dim\") {\n          commands.push({\n            type: \"resetDecoration\",\n            value: \"bold\"\n          });\n        }\n      }\n    } else if (codeInt <= 37) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 30] }\n      });\n    } else if (codeInt === 38) {\n      const color = parseColor(sequence);\n      if (color) {\n        commands.push({\n          type: \"setForegroundColor\",\n          value: color\n        });\n      }\n    } else if (codeInt === 39) {\n      commands.push({\n        type: \"resetForegroundColor\"\n      });\n    } else if (codeInt <= 47) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 40] }\n      });\n    } else if (codeInt === 48) {\n      const color = parseColor(sequence);\n      if (color) {\n        commands.push({\n          type: \"setBackgroundColor\",\n          value: color\n        });\n      }\n    } else if (codeInt === 49) {\n      commands.push({\n        type: \"resetBackgroundColor\"\n      });\n    } else if (codeInt === 53) {\n      commands.push({\n        type: \"setDecoration\",\n        value: \"overline\"\n      });\n    } else if (codeInt === 55) {\n      commands.push({\n        type: \"resetDecoration\",\n        value: \"overline\"\n      });\n    } else if (codeInt >= 90 && codeInt <= 97) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 90 + 8] }\n      });\n    } else if (codeInt >= 100 && codeInt <= 107) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 100 + 8] }\n      });\n    }\n  }\n  return commands;\n}\nfunction createAnsiSequenceParser() {\n  let foreground = null;\n  let background = null;\n  let decorations2 = /* @__PURE__ */ new Set();\n  return {\n    parse(value) {\n      const tokens = [];\n      let position = 0;\n      do {\n        const findResult = findSequence(value, position);\n        const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);\n        if (text.length > 0) {\n          tokens.push({\n            value: text,\n            foreground,\n            background,\n            decorations: new Set(decorations2)\n          });\n        }\n        if (findResult.sequence) {\n          const commands = parseSequence(findResult.sequence);\n          for (const styleToken of commands) {\n            if (styleToken.type === \"resetAll\") {\n              foreground = null;\n              background = null;\n              decorations2.clear();\n            } else if (styleToken.type === \"resetForegroundColor\") {\n              foreground = null;\n            } else if (styleToken.type === \"resetBackgroundColor\") {\n              background = null;\n            } else if (styleToken.type === \"resetDecoration\") {\n              decorations2.delete(styleToken.value);\n            }\n          }\n          for (const styleToken of commands) {\n            if (styleToken.type === \"setForegroundColor\") {\n              foreground = styleToken.value;\n            } else if (styleToken.type === \"setBackgroundColor\") {\n              background = styleToken.value;\n            } else if (styleToken.type === \"setDecoration\") {\n              decorations2.add(styleToken.value);\n            }\n          }\n        }\n        position = findResult.position;\n      } while (position < value.length);\n      return tokens;\n    }\n  };\n}\n\n// src/palette.ts\nvar defaultNamedColorsMap = {\n  black: \"#000000\",\n  red: \"#bb0000\",\n  green: \"#00bb00\",\n  yellow: \"#bbbb00\",\n  blue: \"#0000bb\",\n  magenta: \"#ff00ff\",\n  cyan: \"#00bbbb\",\n  white: \"#eeeeee\",\n  brightBlack: \"#555555\",\n  brightRed: \"#ff5555\",\n  brightGreen: \"#00ff00\",\n  brightYellow: \"#ffff55\",\n  brightBlue: \"#5555ff\",\n  brightMagenta: \"#ff55ff\",\n  brightCyan: \"#55ffff\",\n  brightWhite: \"#ffffff\"\n};\nfunction createColorPalette(namedColorsMap = defaultNamedColorsMap) {\n  function namedColor(name) {\n    return namedColorsMap[name];\n  }\n  function rgbColor(rgb) {\n    return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, \"0\")).join(\"\")}`;\n  }\n  let colorTable;\n  function getColorTable() {\n    if (colorTable) {\n      return colorTable;\n    }\n    colorTable = [];\n    for (let i = 0; i < namedColors.length; i++) {\n      colorTable.push(namedColor(namedColors[i]));\n    }\n    let levels = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; r++) {\n      for (let g = 0; g < 6; g++) {\n        for (let b = 0; b < 6; b++) {\n          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));\n        }\n      }\n    }\n    let level = 8;\n    for (let i = 0; i < 24; i++, level += 10) {\n      colorTable.push(rgbColor([level, level, level]));\n    }\n    return colorTable;\n  }\n  function tableColor(index) {\n    return getColorTable()[index];\n  }\n  function value(color) {\n    switch (color.type) {\n      case \"named\":\n        return namedColor(color.name);\n      case \"rgb\":\n        return rgbColor(color.rgb);\n      case \"table\":\n        return tableColor(color.index);\n    }\n  }\n  return {\n    value\n  };\n}\n\nfunction tokenizeAnsiWithTheme(theme, fileContents, options) {\n  const colorReplacements = resolveColorReplacements(theme, options);\n  const lines = splitLines(fileContents);\n  const colorPalette = createColorPalette(\n    Object.fromEntries(\n      namedColors.map((name) => [\n        name,\n        theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`]\n      ])\n    )\n  );\n  const parser = createAnsiSequenceParser();\n  return lines.map(\n    (line) => parser.parse(line[0]).map((token) => {\n      let color;\n      let bgColor;\n      if (token.decorations.has(\"reverse\")) {\n        color = token.background ? colorPalette.value(token.background) : theme.bg;\n        bgColor = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n      } else {\n        color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n        bgColor = token.background ? colorPalette.value(token.background) : void 0;\n      }\n      color = applyColorReplacements(color, colorReplacements);\n      bgColor = applyColorReplacements(bgColor, colorReplacements);\n      if (token.decorations.has(\"dim\"))\n        color = dimColor(color);\n      let fontStyle = _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.None;\n      if (token.decorations.has(\"bold\"))\n        fontStyle |= _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Bold;\n      if (token.decorations.has(\"italic\"))\n        fontStyle |= _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Italic;\n      if (token.decorations.has(\"underline\"))\n        fontStyle |= _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Underline;\n      return {\n        content: token.value,\n        offset: line[1],\n        // TODO: more accurate offset? might need to fork ansi-sequence-parser\n        color,\n        bgColor,\n        fontStyle\n      };\n    })\n  );\n}\nfunction dimColor(color) {\n  const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);\n  if (hexMatch) {\n    if (hexMatch[3]) {\n      const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2).toString(16).padStart(2, \"0\");\n      return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;\n    } else if (hexMatch[2]) {\n      return `#${hexMatch[1]}${hexMatch[2]}80`;\n    } else {\n      return `#${Array.from(hexMatch[1]).map((x) => `${x}${x}`).join(\"\")}80`;\n    }\n  }\n  const cssVarMatch = color.match(/var\\((--[\\w-]+-ansi-[\\w-]+)\\)/);\n  if (cssVarMatch)\n    return `var(${cssVarMatch[1]}-dim)`;\n  return color;\n}\n\nfunction codeToTokensBase(internal, code, options = {}) {\n  const {\n    lang = \"text\",\n    theme: themeName = internal.getLoadedThemes()[0]\n  } = options;\n  if (isPlainLang(lang) || isNoneTheme(themeName))\n    return splitLines(code).map((line) => [{ content: line[0], offset: line[1] }]);\n  const { theme, colorMap } = internal.setTheme(themeName);\n  if (lang === \"ansi\")\n    return tokenizeAnsiWithTheme(theme, code, options);\n  const _grammar = internal.getLanguage(lang);\n  if (options.grammarState) {\n    if (options.grammarState.lang !== _grammar.name) {\n      throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Grammar state language \"${options.grammarState.lang}\" does not match highlight language \"${_grammar.name}\"`);\n    }\n    if (!options.grammarState.themes.includes(theme.name)) {\n      throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Grammar state themes \"${options.grammarState.themes}\" do not contain highlight theme \"${theme.name}\"`);\n    }\n  }\n  return tokenizeWithTheme(code, _grammar, theme, colorMap, options);\n}\nfunction getLastGrammarState(...args) {\n  if (args.length === 2) {\n    return getLastGrammarStateFromMap(args[1]);\n  }\n  const [internal, code, options = {}] = args;\n  const {\n    lang = \"text\",\n    theme: themeName = internal.getLoadedThemes()[0]\n  } = options;\n  if (isPlainLang(lang) || isNoneTheme(themeName))\n    throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(\"Plain language does not have grammar state\");\n  if (lang === \"ansi\")\n    throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(\"ANSI language does not have grammar state\");\n  const { theme, colorMap } = internal.setTheme(themeName);\n  const _grammar = internal.getLanguage(lang);\n  return new GrammarState(\n    _tokenizeWithTheme(code, _grammar, theme, colorMap, options).stateStack,\n    _grammar.name,\n    theme.name\n  );\n}\nfunction tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n  const result = _tokenizeWithTheme(code, grammar, theme, colorMap, options);\n  const grammarState = new GrammarState(\n    _tokenizeWithTheme(code, grammar, theme, colorMap, options).stateStack,\n    grammar.name,\n    theme.name\n  );\n  setLastGrammarStateToMap(result.tokens, grammarState);\n  return result.tokens;\n}\nfunction _tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n  const colorReplacements = resolveColorReplacements(theme, options);\n  const {\n    tokenizeMaxLineLength = 0,\n    tokenizeTimeLimit = 500\n  } = options;\n  const lines = splitLines(code);\n  let stateStack = options.grammarState ? getGrammarStack(options.grammarState, theme.name) ?? _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.INITIAL : options.grammarContextCode != null ? _tokenizeWithTheme(\n    options.grammarContextCode,\n    grammar,\n    theme,\n    colorMap,\n    {\n      ...options,\n      grammarState: void 0,\n      grammarContextCode: void 0\n    }\n  ).stateStack : _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.INITIAL;\n  let actual = [];\n  const final = [];\n  for (let i = 0, len = lines.length; i < len; i++) {\n    const [line, lineOffset] = lines[i];\n    if (line === \"\") {\n      actual = [];\n      final.push([]);\n      continue;\n    }\n    if (tokenizeMaxLineLength > 0 && line.length >= tokenizeMaxLineLength) {\n      actual = [];\n      final.push([{\n        content: line,\n        offset: lineOffset,\n        color: \"\",\n        fontStyle: 0\n      }]);\n      continue;\n    }\n    let resultWithScopes;\n    let tokensWithScopes;\n    let tokensWithScopesIndex;\n    if (options.includeExplanation) {\n      resultWithScopes = grammar.tokenizeLine(line, stateStack, tokenizeTimeLimit);\n      tokensWithScopes = resultWithScopes.tokens;\n      tokensWithScopesIndex = 0;\n    }\n    const result = grammar.tokenizeLine2(line, stateStack, tokenizeTimeLimit);\n    const tokensLength = result.tokens.length / 2;\n    for (let j = 0; j < tokensLength; j++) {\n      const startIndex = result.tokens[2 * j];\n      const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n      if (startIndex === nextStartIndex)\n        continue;\n      const metadata = result.tokens[2 * j + 1];\n      const color = applyColorReplacements(\n        colorMap[_shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.EncodedTokenMetadata.getForeground(metadata)],\n        colorReplacements\n      );\n      const fontStyle = _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.EncodedTokenMetadata.getFontStyle(metadata);\n      const token = {\n        content: line.substring(startIndex, nextStartIndex),\n        offset: lineOffset + startIndex,\n        color,\n        fontStyle\n      };\n      if (options.includeExplanation) {\n        const themeSettingsSelectors = [];\n        if (options.includeExplanation !== \"scopeName\") {\n          for (const setting of theme.settings) {\n            let selectors;\n            switch (typeof setting.scope) {\n              case \"string\":\n                selectors = setting.scope.split(/,/).map((scope) => scope.trim());\n                break;\n              case \"object\":\n                selectors = setting.scope;\n                break;\n              default:\n                continue;\n            }\n            themeSettingsSelectors.push({\n              settings: setting,\n              selectors: selectors.map((selector) => selector.split(/ /))\n            });\n          }\n        }\n        token.explanation = [];\n        let offset = 0;\n        while (startIndex + offset < nextStartIndex) {\n          const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n          const tokenWithScopesText = line.substring(\n            tokenWithScopes.startIndex,\n            tokenWithScopes.endIndex\n          );\n          offset += tokenWithScopesText.length;\n          token.explanation.push({\n            content: tokenWithScopesText,\n            scopes: options.includeExplanation === \"scopeName\" ? explainThemeScopesNameOnly(\n              tokenWithScopes.scopes\n            ) : explainThemeScopesFull(\n              themeSettingsSelectors,\n              tokenWithScopes.scopes\n            )\n          });\n          tokensWithScopesIndex += 1;\n        }\n      }\n      actual.push(token);\n    }\n    final.push(actual);\n    actual = [];\n    stateStack = result.ruleStack;\n  }\n  return {\n    tokens: final,\n    stateStack\n  };\n}\nfunction explainThemeScopesNameOnly(scopes) {\n  return scopes.map((scope) => ({ scopeName: scope }));\n}\nfunction explainThemeScopesFull(themeSelectors, scopes) {\n  const result = [];\n  for (let i = 0, len = scopes.length; i < len; i++) {\n    const scope = scopes[i];\n    result[i] = {\n      scopeName: scope,\n      themeMatches: explainThemeScope(themeSelectors, scope, scopes.slice(0, i))\n    };\n  }\n  return result;\n}\nfunction matchesOne(selector, scope) {\n  return selector === scope || scope.substring(0, selector.length) === selector && scope[selector.length] === \".\";\n}\nfunction matches(selectors, scope, parentScopes) {\n  if (!matchesOne(selectors[selectors.length - 1], scope))\n    return false;\n  let selectorParentIndex = selectors.length - 2;\n  let parentIndex = parentScopes.length - 1;\n  while (selectorParentIndex >= 0 && parentIndex >= 0) {\n    if (matchesOne(selectors[selectorParentIndex], parentScopes[parentIndex]))\n      selectorParentIndex -= 1;\n    parentIndex -= 1;\n  }\n  if (selectorParentIndex === -1)\n    return true;\n  return false;\n}\nfunction explainThemeScope(themeSettingsSelectors, scope, parentScopes) {\n  const result = [];\n  for (const { selectors, settings } of themeSettingsSelectors) {\n    for (const selectorPieces of selectors) {\n      if (matches(selectorPieces, scope, parentScopes)) {\n        result.push(settings);\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nfunction codeToTokensWithThemes(internal, code, options) {\n  const themes = Object.entries(options.themes).filter((i) => i[1]).map((i) => ({ color: i[0], theme: i[1] }));\n  const themedTokens = themes.map((t) => {\n    const tokens2 = codeToTokensBase(internal, code, {\n      ...options,\n      theme: t.theme\n    });\n    const state = getLastGrammarStateFromMap(tokens2);\n    const theme = typeof t.theme === \"string\" ? t.theme : t.theme.name;\n    return {\n      tokens: tokens2,\n      state,\n      theme\n    };\n  });\n  const tokens = syncThemesTokenization(\n    ...themedTokens.map((i) => i.tokens)\n  );\n  const mergedTokens = tokens[0].map(\n    (line, lineIdx) => line.map((_token, tokenIdx) => {\n      const mergedToken = {\n        content: _token.content,\n        variants: {},\n        offset: _token.offset\n      };\n      if (\"includeExplanation\" in options && options.includeExplanation) {\n        mergedToken.explanation = _token.explanation;\n      }\n      tokens.forEach((t, themeIdx) => {\n        const {\n          content: _,\n          explanation: __,\n          offset: ___,\n          ...styles\n        } = t[lineIdx][tokenIdx];\n        mergedToken.variants[themes[themeIdx].color] = styles;\n      });\n      return mergedToken;\n    })\n  );\n  const mergedGrammarState = themedTokens[0].state ? new GrammarState(\n    Object.fromEntries(themedTokens.map((s) => [s.theme, s.state?.getInternalStack(s.theme)])),\n    themedTokens[0].state.lang\n  ) : void 0;\n  if (mergedGrammarState)\n    setLastGrammarStateToMap(mergedTokens, mergedGrammarState);\n  return mergedTokens;\n}\nfunction syncThemesTokenization(...themes) {\n  const outThemes = themes.map(() => []);\n  const count = themes.length;\n  for (let i = 0; i < themes[0].length; i++) {\n    const lines = themes.map((t) => t[i]);\n    const outLines = outThemes.map(() => []);\n    outThemes.forEach((t, i2) => t.push(outLines[i2]));\n    const indexes = lines.map(() => 0);\n    const current = lines.map((l) => l[0]);\n    while (current.every((t) => t)) {\n      const minLength = Math.min(...current.map((t) => t.content.length));\n      for (let n = 0; n < count; n++) {\n        const token = current[n];\n        if (token.content.length === minLength) {\n          outLines[n].push(token);\n          indexes[n] += 1;\n          current[n] = lines[n][indexes[n]];\n        } else {\n          outLines[n].push({\n            ...token,\n            content: token.content.slice(0, minLength)\n          });\n          current[n] = {\n            ...token,\n            content: token.content.slice(minLength),\n            offset: token.offset + minLength\n          };\n        }\n      }\n    }\n  }\n  return outThemes;\n}\n\nfunction codeToTokens(internal, code, options) {\n  let bg;\n  let fg;\n  let tokens;\n  let themeName;\n  let rootStyle;\n  let grammarState;\n  if (\"themes\" in options) {\n    const {\n      defaultColor = \"light\",\n      cssVariablePrefix = \"--shiki-\"\n    } = options;\n    const themes = Object.entries(options.themes).filter((i) => i[1]).map((i) => ({ color: i[0], theme: i[1] })).sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);\n    if (themes.length === 0)\n      throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(\"`themes` option must not be empty\");\n    const themeTokens = codeToTokensWithThemes(\n      internal,\n      code,\n      options\n    );\n    grammarState = getLastGrammarStateFromMap(themeTokens);\n    if (defaultColor && !themes.find((t) => t.color === defaultColor))\n      throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`\\`themes\\` option must contain the defaultColor key \\`${defaultColor}\\``);\n    const themeRegs = themes.map((t) => internal.getTheme(t.theme));\n    const themesOrder = themes.map((t) => t.color);\n    tokens = themeTokens.map((line) => line.map((token) => flatTokenVariants(token, themesOrder, cssVariablePrefix, defaultColor)));\n    if (grammarState)\n      setLastGrammarStateToMap(tokens, grammarState);\n    const themeColorReplacements = themes.map((t) => resolveColorReplacements(t.theme, options));\n    fg = themes.map((t, idx) => (idx === 0 && defaultColor ? \"\" : `${cssVariablePrefix + t.color}:`) + (applyColorReplacements(themeRegs[idx].fg, themeColorReplacements[idx]) || \"inherit\")).join(\";\");\n    bg = themes.map((t, idx) => (idx === 0 && defaultColor ? \"\" : `${cssVariablePrefix + t.color}-bg:`) + (applyColorReplacements(themeRegs[idx].bg, themeColorReplacements[idx]) || \"inherit\")).join(\";\");\n    themeName = `shiki-themes ${themeRegs.map((t) => t.name).join(\" \")}`;\n    rootStyle = defaultColor ? void 0 : [fg, bg].join(\";\");\n  } else if (\"theme\" in options) {\n    const colorReplacements = resolveColorReplacements(options.theme, options);\n    tokens = codeToTokensBase(\n      internal,\n      code,\n      options\n    );\n    const _theme = internal.getTheme(options.theme);\n    bg = applyColorReplacements(_theme.bg, colorReplacements);\n    fg = applyColorReplacements(_theme.fg, colorReplacements);\n    themeName = _theme.name;\n    grammarState = getLastGrammarStateFromMap(tokens);\n  } else {\n    throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(\"Invalid options, either `theme` or `themes` must be provided\");\n  }\n  return {\n    tokens,\n    fg,\n    bg,\n    themeName,\n    rootStyle,\n    grammarState\n  };\n}\n\nfunction codeToHast(internal, code, options, transformerContext = {\n  meta: {},\n  options,\n  codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n  codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options)\n}) {\n  let input = code;\n  for (const transformer of getTransformers(options))\n    input = transformer.preprocess?.call(transformerContext, input, options) || input;\n  let {\n    tokens,\n    fg,\n    bg,\n    themeName,\n    rootStyle,\n    grammarState\n  } = codeToTokens(internal, input, options);\n  const {\n    mergeWhitespaces = true\n  } = options;\n  if (mergeWhitespaces === true)\n    tokens = mergeWhitespaceTokens(tokens);\n  else if (mergeWhitespaces === \"never\")\n    tokens = splitWhitespaceTokens(tokens);\n  const contextSource = {\n    ...transformerContext,\n    get source() {\n      return input;\n    }\n  };\n  for (const transformer of getTransformers(options))\n    tokens = transformer.tokens?.call(contextSource, tokens) || tokens;\n  return tokensToHast(\n    tokens,\n    {\n      ...options,\n      fg,\n      bg,\n      themeName,\n      rootStyle\n    },\n    contextSource,\n    grammarState\n  );\n}\nfunction tokensToHast(tokens, options, transformerContext, grammarState = getLastGrammarStateFromMap(tokens)) {\n  const transformers = getTransformers(options);\n  const lines = [];\n  const root = {\n    type: \"root\",\n    children: []\n  };\n  const {\n    structure = \"classic\",\n    tabindex = \"0\"\n  } = options;\n  let preNode = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {\n      class: `shiki ${options.themeName || \"\"}`,\n      style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,\n      ...tabindex !== false && tabindex != null ? {\n        tabindex: tabindex.toString()\n      } : {},\n      ...Object.fromEntries(\n        Array.from(\n          Object.entries(options.meta || {})\n        ).filter(([key]) => !key.startsWith(\"_\"))\n      )\n    },\n    children: []\n  };\n  let codeNode = {\n    type: \"element\",\n    tagName: \"code\",\n    properties: {},\n    children: lines\n  };\n  const lineNodes = [];\n  const context = {\n    ...transformerContext,\n    structure,\n    addClassToHast,\n    get source() {\n      return transformerContext.source;\n    },\n    get tokens() {\n      return tokens;\n    },\n    get options() {\n      return options;\n    },\n    get root() {\n      return root;\n    },\n    get pre() {\n      return preNode;\n    },\n    get code() {\n      return codeNode;\n    },\n    get lines() {\n      return lineNodes;\n    }\n  };\n  tokens.forEach((line, idx) => {\n    if (idx) {\n      if (structure === \"inline\")\n        root.children.push({ type: \"element\", tagName: \"br\", properties: {}, children: [] });\n      else if (structure === \"classic\")\n        lines.push({ type: \"text\", value: \"\\n\" });\n    }\n    let lineNode = {\n      type: \"element\",\n      tagName: \"span\",\n      properties: { class: \"line\" },\n      children: []\n    };\n    let col = 0;\n    for (const token of line) {\n      let tokenNode = {\n        type: \"element\",\n        tagName: \"span\",\n        properties: {\n          ...token.htmlAttrs\n        },\n        children: [{ type: \"text\", value: token.content }]\n      };\n      if (typeof token.htmlStyle === \"string\")\n        (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"`htmlStyle` as a string is deprecated. Use an object instead.\");\n      const style = stringifyTokenStyle(token.htmlStyle || getTokenStyleObject(token));\n      if (style)\n        tokenNode.properties.style = style;\n      for (const transformer of transformers)\n        tokenNode = transformer?.span?.call(context, tokenNode, idx + 1, col, lineNode, token) || tokenNode;\n      if (structure === \"inline\")\n        root.children.push(tokenNode);\n      else if (structure === \"classic\")\n        lineNode.children.push(tokenNode);\n      col += token.content.length;\n    }\n    if (structure === \"classic\") {\n      for (const transformer of transformers)\n        lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;\n      lineNodes.push(lineNode);\n      lines.push(lineNode);\n    }\n  });\n  if (structure === \"classic\") {\n    for (const transformer of transformers)\n      codeNode = transformer?.code?.call(context, codeNode) || codeNode;\n    preNode.children.push(codeNode);\n    for (const transformer of transformers)\n      preNode = transformer?.pre?.call(context, preNode) || preNode;\n    root.children.push(preNode);\n  }\n  let result = root;\n  for (const transformer of transformers)\n    result = transformer?.root?.call(context, result) || result;\n  if (grammarState)\n    setLastGrammarStateToMap(result, grammarState);\n  return result;\n}\nfunction mergeWhitespaceTokens(tokens) {\n  return tokens.map((line) => {\n    const newLine = [];\n    let carryOnContent = \"\";\n    let firstOffset = 0;\n    line.forEach((token, idx) => {\n      const isUnderline = token.fontStyle && token.fontStyle & _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.FontStyle.Underline;\n      const couldMerge = !isUnderline;\n      if (couldMerge && token.content.match(/^\\s+$/) && line[idx + 1]) {\n        if (!firstOffset)\n          firstOffset = token.offset;\n        carryOnContent += token.content;\n      } else {\n        if (carryOnContent) {\n          if (couldMerge) {\n            newLine.push({\n              ...token,\n              offset: firstOffset,\n              content: carryOnContent + token.content\n            });\n          } else {\n            newLine.push(\n              {\n                content: carryOnContent,\n                offset: firstOffset\n              },\n              token\n            );\n          }\n          firstOffset = 0;\n          carryOnContent = \"\";\n        } else {\n          newLine.push(token);\n        }\n      }\n    });\n    return newLine;\n  });\n}\nfunction splitWhitespaceTokens(tokens) {\n  return tokens.map((line) => {\n    return line.flatMap((token) => {\n      if (token.content.match(/^\\s+$/))\n        return token;\n      const match = token.content.match(/^(\\s*)(.*?)(\\s*)$/);\n      if (!match)\n        return token;\n      const [, leading, content, trailing] = match;\n      if (!leading && !trailing)\n        return token;\n      const expanded = [{\n        ...token,\n        offset: token.offset + leading.length,\n        content\n      }];\n      if (leading) {\n        expanded.unshift({\n          content: leading,\n          offset: token.offset\n        });\n      }\n      if (trailing) {\n        expanded.push({\n          content: trailing,\n          offset: token.offset + leading.length + content.length\n        });\n      }\n      return expanded;\n    });\n  });\n}\n\nfunction codeToHtml(internal, code, options) {\n  const context = {\n    meta: {},\n    options,\n    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n    codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options)\n  };\n  let result = (0,hast_util_to_html__WEBPACK_IMPORTED_MODULE_3__.toHtml)(codeToHast(internal, code, options, context));\n  for (const transformer of getTransformers(options))\n    result = transformer.postprocess?.call(context, result, options) || result;\n  return result;\n}\n\nconst VSCODE_FALLBACK_EDITOR_FG = { light: \"#333333\", dark: \"#bbbbbb\" };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: \"#fffffe\", dark: \"#1e1e1e\" };\nconst RESOLVED_KEY = \"__shiki_resolved\";\nfunction normalizeTheme(rawTheme) {\n  if (rawTheme?.[RESOLVED_KEY])\n    return rawTheme;\n  const theme = {\n    ...rawTheme\n  };\n  if (theme.tokenColors && !theme.settings) {\n    theme.settings = theme.tokenColors;\n    delete theme.tokenColors;\n  }\n  theme.type ||= \"dark\";\n  theme.colorReplacements = { ...theme.colorReplacements };\n  theme.settings ||= [];\n  let { bg, fg } = theme;\n  if (!bg || !fg) {\n    const globalSetting = theme.settings ? theme.settings.find((s) => !s.name && !s.scope) : void 0;\n    if (globalSetting?.settings?.foreground)\n      fg = globalSetting.settings.foreground;\n    if (globalSetting?.settings?.background)\n      bg = globalSetting.settings.background;\n    if (!fg && theme?.colors?.[\"editor.foreground\"])\n      fg = theme.colors[\"editor.foreground\"];\n    if (!bg && theme?.colors?.[\"editor.background\"])\n      bg = theme.colors[\"editor.background\"];\n    if (!fg)\n      fg = theme.type === \"light\" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n    if (!bg)\n      bg = theme.type === \"light\" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n    theme.fg = fg;\n    theme.bg = bg;\n  }\n  if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {\n    theme.settings.unshift({\n      settings: {\n        foreground: theme.fg,\n        background: theme.bg\n      }\n    });\n  }\n  let replacementCount = 0;\n  const replacementMap = /* @__PURE__ */ new Map();\n  function getReplacementColor(value) {\n    if (replacementMap.has(value))\n      return replacementMap.get(value);\n    replacementCount += 1;\n    const hex = `#${replacementCount.toString(16).padStart(8, \"0\").toLowerCase()}`;\n    if (theme.colorReplacements?.[`#${hex}`])\n      return getReplacementColor(value);\n    replacementMap.set(value, hex);\n    return hex;\n  }\n  theme.settings = theme.settings.map((setting) => {\n    const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith(\"#\");\n    const replaceBg = setting.settings?.background && !setting.settings.background.startsWith(\"#\");\n    if (!replaceFg && !replaceBg)\n      return setting;\n    const clone = {\n      ...setting,\n      settings: {\n        ...setting.settings\n      }\n    };\n    if (replaceFg) {\n      const replacement = getReplacementColor(setting.settings.foreground);\n      theme.colorReplacements[replacement] = setting.settings.foreground;\n      clone.settings.foreground = replacement;\n    }\n    if (replaceBg) {\n      const replacement = getReplacementColor(setting.settings.background);\n      theme.colorReplacements[replacement] = setting.settings.background;\n      clone.settings.background = replacement;\n    }\n    return clone;\n  });\n  for (const key of Object.keys(theme.colors || {})) {\n    if (key === \"editor.foreground\" || key === \"editor.background\" || key.startsWith(\"terminal.ansi\")) {\n      if (!theme.colors[key]?.startsWith(\"#\")) {\n        const replacement = getReplacementColor(theme.colors[key]);\n        theme.colorReplacements[replacement] = theme.colors[key];\n        theme.colors[key] = replacement;\n      }\n    }\n  }\n  Object.defineProperty(theme, RESOLVED_KEY, {\n    enumerable: false,\n    writable: false,\n    value: true\n  });\n  return theme;\n}\n\nasync function resolveLangs(langs) {\n  return Array.from(new Set((await Promise.all(\n    langs.filter((l) => !isSpecialLang(l)).map(async (lang) => await normalizeGetter(lang).then((r) => Array.isArray(r) ? r : [r]))\n  )).flat()));\n}\nasync function resolveThemes(themes) {\n  const resolved = await Promise.all(\n    themes.map(\n      async (theme) => isSpecialTheme(theme) ? null : normalizeTheme(await normalizeGetter(theme))\n    )\n  );\n  return resolved.filter((i) => !!i);\n}\n\nclass ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\nclass Registry extends _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.Registry {\n  constructor(_resolver, _themes, _langs, _alias = {}) {\n    super(_resolver);\n    this._resolver = _resolver;\n    this._themes = _themes;\n    this._langs = _langs;\n    this._alias = _alias;\n    this._themes.map((t) => this.loadTheme(t));\n    this.loadLanguages(this._langs);\n  }\n  _resolvedThemes = /* @__PURE__ */ new Map();\n  _resolvedGrammars = /* @__PURE__ */ new Map();\n  _langMap = /* @__PURE__ */ new Map();\n  _langGraph = /* @__PURE__ */ new Map();\n  _textmateThemeCache = /* @__PURE__ */ new WeakMap();\n  _loadedThemesCache = null;\n  _loadedLanguagesCache = null;\n  getTheme(theme) {\n    if (typeof theme === \"string\")\n      return this._resolvedThemes.get(theme);\n    else\n      return this.loadTheme(theme);\n  }\n  loadTheme(theme) {\n    const _theme = normalizeTheme(theme);\n    if (_theme.name) {\n      this._resolvedThemes.set(_theme.name, _theme);\n      this._loadedThemesCache = null;\n    }\n    return _theme;\n  }\n  getLoadedThemes() {\n    if (!this._loadedThemesCache)\n      this._loadedThemesCache = [...this._resolvedThemes.keys()];\n    return this._loadedThemesCache;\n  }\n  // Override and re-implement this method to cache the textmate themes as `TextMateTheme.createFromRawTheme`\n  // is expensive. Themes can switch often especially for dual-theme support.\n  //\n  // The parent class also accepts `colorMap` as the second parameter, but since we don't use that,\n  // we omit here so it's easier to cache the themes.\n  setTheme(theme) {\n    let textmateTheme = this._textmateThemeCache.get(theme);\n    if (!textmateTheme) {\n      textmateTheme = _shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_2__.Theme.createFromRawTheme(theme);\n      this._textmateThemeCache.set(theme, textmateTheme);\n    }\n    this._syncRegistry.setTheme(textmateTheme);\n  }\n  getGrammar(name) {\n    if (this._alias[name]) {\n      const resolved = /* @__PURE__ */ new Set([name]);\n      while (this._alias[name]) {\n        name = this._alias[name];\n        if (resolved.has(name))\n          throw new ShikiError(`Circular alias \\`${Array.from(resolved).join(\" -> \")} -> ${name}\\``);\n        resolved.add(name);\n      }\n    }\n    return this._resolvedGrammars.get(name);\n  }\n  loadLanguage(lang) {\n    if (this.getGrammar(lang.name))\n      return;\n    const embeddedLazilyBy = new Set(\n      [...this._langMap.values()].filter((i) => i.embeddedLangsLazy?.includes(lang.name))\n    );\n    this._resolver.addLanguage(lang);\n    const grammarConfig = {\n      balancedBracketSelectors: lang.balancedBracketSelectors || [\"*\"],\n      unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []\n    };\n    this._syncRegistry._rawGrammars.set(lang.scopeName, lang);\n    const g = this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);\n    g.name = lang.name;\n    this._resolvedGrammars.set(lang.name, g);\n    if (lang.aliases) {\n      lang.aliases.forEach((alias) => {\n        this._alias[alias] = lang.name;\n      });\n    }\n    this._loadedLanguagesCache = null;\n    if (embeddedLazilyBy.size) {\n      for (const e of embeddedLazilyBy) {\n        this._resolvedGrammars.delete(e.name);\n        this._loadedLanguagesCache = null;\n        this._syncRegistry?._injectionGrammars?.delete(e.scopeName);\n        this._syncRegistry?._grammars?.delete(e.scopeName);\n        this.loadLanguage(this._langMap.get(e.name));\n      }\n    }\n  }\n  dispose() {\n    super.dispose();\n    this._resolvedThemes.clear();\n    this._resolvedGrammars.clear();\n    this._langMap.clear();\n    this._langGraph.clear();\n    this._loadedThemesCache = null;\n  }\n  loadLanguages(langs) {\n    for (const lang of langs)\n      this.resolveEmbeddedLanguages(lang);\n    const langsGraphArray = Array.from(this._langGraph.entries());\n    const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);\n    if (missingLangs.length) {\n      const dependents = langsGraphArray.filter(([_, lang]) => lang && lang.embeddedLangs?.some((l) => missingLangs.map(([name]) => name).includes(l))).filter((lang) => !missingLangs.includes(lang));\n      throw new ShikiError(`Missing languages ${missingLangs.map(([name]) => `\\`${name}\\``).join(\", \")}, required by ${dependents.map(([name]) => `\\`${name}\\``).join(\", \")}`);\n    }\n    for (const [_, lang] of langsGraphArray)\n      this._resolver.addLanguage(lang);\n    for (const [_, lang] of langsGraphArray)\n      this.loadLanguage(lang);\n  }\n  getLoadedLanguages() {\n    if (!this._loadedLanguagesCache) {\n      this._loadedLanguagesCache = [\n        .../* @__PURE__ */ new Set([...this._resolvedGrammars.keys(), ...Object.keys(this._alias)])\n      ];\n    }\n    return this._loadedLanguagesCache;\n  }\n  resolveEmbeddedLanguages(lang) {\n    this._langMap.set(lang.name, lang);\n    this._langGraph.set(lang.name, lang);\n    if (lang.embeddedLangs) {\n      for (const embeddedLang of lang.embeddedLangs)\n        this._langGraph.set(embeddedLang, this._langMap.get(embeddedLang));\n    }\n  }\n}\n\nclass Resolver {\n  _langs = /* @__PURE__ */ new Map();\n  _scopeToLang = /* @__PURE__ */ new Map();\n  _injections = /* @__PURE__ */ new Map();\n  _onigLib;\n  constructor(engine, langs) {\n    this._onigLib = {\n      createOnigScanner: (patterns) => engine.createScanner(patterns),\n      createOnigString: (s) => engine.createString(s)\n    };\n    langs.forEach((i) => this.addLanguage(i));\n  }\n  get onigLib() {\n    return this._onigLib;\n  }\n  getLangRegistration(langIdOrAlias) {\n    return this._langs.get(langIdOrAlias);\n  }\n  loadGrammar(scopeName) {\n    return this._scopeToLang.get(scopeName);\n  }\n  addLanguage(l) {\n    this._langs.set(l.name, l);\n    if (l.aliases) {\n      l.aliases.forEach((a) => {\n        this._langs.set(a, l);\n      });\n    }\n    this._scopeToLang.set(l.scopeName, l);\n    if (l.injectTo) {\n      l.injectTo.forEach((i) => {\n        if (!this._injections.get(i))\n          this._injections.set(i, []);\n        this._injections.get(i).push(l.scopeName);\n      });\n    }\n  }\n  getInjections(scopeName) {\n    const scopeParts = scopeName.split(\".\");\n    let injections = [];\n    for (let i = 1; i <= scopeParts.length; i++) {\n      const subScopeName = scopeParts.slice(0, i).join(\".\");\n      injections = [...injections, ...this._injections.get(subScopeName) || []];\n    }\n    return injections;\n  }\n}\n\nlet instancesCount = 0;\nfunction createShikiInternalSync(options) {\n  instancesCount += 1;\n  if (options.warnings !== false && instancesCount >= 10 && instancesCount % 10 === 0)\n    console.warn(`[Shiki] ${instancesCount} instances have been created. Shiki is supposed to be used as a singleton, consider refactoring your code to cache your highlighter instance; Or call \\`highlighter.dispose()\\` to release unused instances.`);\n  let isDisposed = false;\n  if (!options.engine)\n    throw new ShikiError(\"`engine` option is required for synchronous mode\");\n  const langs = (options.langs || []).flat(1);\n  const themes = (options.themes || []).flat(1).map(normalizeTheme);\n  const resolver = new Resolver(options.engine, langs);\n  const _registry = new Registry(resolver, themes, langs, options.langAlias);\n  let _lastTheme;\n  function getLanguage(name) {\n    ensureNotDisposed();\n    const _lang = _registry.getGrammar(typeof name === \"string\" ? name : name.name);\n    if (!_lang)\n      throw new ShikiError(`Language \\`${name}\\` not found, you may need to load it first`);\n    return _lang;\n  }\n  function getTheme(name) {\n    if (name === \"none\")\n      return { bg: \"\", fg: \"\", name: \"none\", settings: [], type: \"dark\" };\n    ensureNotDisposed();\n    const _theme = _registry.getTheme(name);\n    if (!_theme)\n      throw new ShikiError(`Theme \\`${name}\\` not found, you may need to load it first`);\n    return _theme;\n  }\n  function setTheme(name) {\n    ensureNotDisposed();\n    const theme = getTheme(name);\n    if (_lastTheme !== name) {\n      _registry.setTheme(theme);\n      _lastTheme = name;\n    }\n    const colorMap = _registry.getColorMap();\n    return {\n      theme,\n      colorMap\n    };\n  }\n  function getLoadedThemes() {\n    ensureNotDisposed();\n    return _registry.getLoadedThemes();\n  }\n  function getLoadedLanguages() {\n    ensureNotDisposed();\n    return _registry.getLoadedLanguages();\n  }\n  function loadLanguageSync(...langs2) {\n    ensureNotDisposed();\n    _registry.loadLanguages(langs2.flat(1));\n  }\n  async function loadLanguage(...langs2) {\n    return loadLanguageSync(await resolveLangs(langs2));\n  }\n  function loadThemeSync(...themes2) {\n    ensureNotDisposed();\n    for (const theme of themes2.flat(1)) {\n      _registry.loadTheme(theme);\n    }\n  }\n  async function loadTheme(...themes2) {\n    ensureNotDisposed();\n    return loadThemeSync(await resolveThemes(themes2));\n  }\n  function ensureNotDisposed() {\n    if (isDisposed)\n      throw new ShikiError(\"Shiki instance has been disposed\");\n  }\n  function dispose() {\n    if (isDisposed)\n      return;\n    isDisposed = true;\n    _registry.dispose();\n    instancesCount -= 1;\n  }\n  return {\n    setTheme,\n    getTheme,\n    getLanguage,\n    getLoadedThemes,\n    getLoadedLanguages,\n    loadLanguage,\n    loadLanguageSync,\n    loadTheme,\n    loadThemeSync,\n    dispose,\n    [Symbol.dispose]: dispose\n  };\n}\n\nasync function createShikiInternal(options) {\n  if (options.loadWasm) {\n    (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"`loadWasm` option is deprecated. Use `engine: createOnigurumaEngine(loadWasm)` instead.\");\n  }\n  if (!options.engine) {\n    (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"`engine` option is required. Use `createOnigurumaEngine` or `createJavaScriptRegexEngine` to create an engine.\");\n  }\n  const [\n    themes,\n    langs,\n    engine\n  ] = await Promise.all([\n    resolveThemes(options.themes || []),\n    resolveLangs(options.langs || []),\n    options.engine || (0,_shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__.createOnigurumaEngine)(options.loadWasm || (0,_shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__.getDefaultWasmLoader)())\n  ]);\n  return createShikiInternalSync({\n    ...options,\n    themes,\n    langs,\n    engine\n  });\n}\nfunction getShikiInternal(options) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"`getShikiInternal` is deprecated. Use `createShikiInternal` instead.\");\n  return createShikiInternal(options);\n}\n\nasync function createHighlighterCore(options) {\n  const internal = await createShikiInternal(options);\n  return {\n    getLastGrammarState: (...args) => getLastGrammarState(internal, ...args),\n    codeToTokensBase: (code, options2) => codeToTokensBase(internal, code, options2),\n    codeToTokensWithThemes: (code, options2) => codeToTokensWithThemes(internal, code, options2),\n    codeToTokens: (code, options2) => codeToTokens(internal, code, options2),\n    codeToHast: (code, options2) => codeToHast(internal, code, options2),\n    codeToHtml: (code, options2) => codeToHtml(internal, code, options2),\n    getBundledLanguages: () => ({}),\n    getBundledThemes: () => ({}),\n    ...internal,\n    getInternalContext: () => internal\n  };\n}\nfunction createHighlighterCoreSync(options) {\n  const internal = createShikiInternalSync(options);\n  return {\n    getLastGrammarState: (...args) => getLastGrammarState(internal, ...args),\n    codeToTokensBase: (code, options2) => codeToTokensBase(internal, code, options2),\n    codeToTokensWithThemes: (code, options2) => codeToTokensWithThemes(internal, code, options2),\n    codeToTokens: (code, options2) => codeToTokens(internal, code, options2),\n    codeToHast: (code, options2) => codeToHast(internal, code, options2),\n    codeToHtml: (code, options2) => codeToHtml(internal, code, options2),\n    getBundledLanguages: () => ({}),\n    getBundledThemes: () => ({}),\n    ...internal,\n    getInternalContext: () => internal\n  };\n}\nfunction makeSingletonHighlighterCore(createHighlighter) {\n  let _shiki;\n  async function getSingletonHighlighterCore2(options) {\n    if (!_shiki) {\n      _shiki = createHighlighter({\n        ...options,\n        themes: options.themes || [],\n        langs: options.langs || []\n      });\n      return _shiki;\n    } else {\n      const s = await _shiki;\n      await Promise.all([\n        s.loadTheme(...options.themes || []),\n        s.loadLanguage(...options.langs || [])\n      ]);\n      return s;\n    }\n  }\n  return getSingletonHighlighterCore2;\n}\nconst getSingletonHighlighterCore = /* @__PURE__ */ makeSingletonHighlighterCore(createHighlighterCore);\nfunction getHighlighterCore(options) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"`getHighlighterCore` is deprecated. Use `createHighlighterCore` or `getSingletonHighlighterCore` instead.\");\n  return createHighlighterCore(options);\n}\n\nfunction createdBundledHighlighter(arg1, arg2, arg3) {\n  let bundledLanguages;\n  let bundledThemes;\n  let engine;\n  if (arg2) {\n    (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"`createdBundledHighlighter` signature with `bundledLanguages` and `bundledThemes` is deprecated. Use the options object signature instead.\");\n    bundledLanguages = arg1;\n    bundledThemes = arg2;\n    engine = () => createOnigurumaEngine(arg3);\n  } else {\n    const options = arg1;\n    bundledLanguages = options.langs;\n    bundledThemes = options.themes;\n    engine = options.engine;\n  }\n  async function createHighlighter(options) {\n    function resolveLang(lang) {\n      if (typeof lang === \"string\") {\n        if (isSpecialLang(lang))\n          return [];\n        const bundle = bundledLanguages[lang];\n        if (!bundle)\n          throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Language \\`${lang}\\` is not included in this bundle. You may want to load it from external source.`);\n        return bundle;\n      }\n      return lang;\n    }\n    function resolveTheme(theme) {\n      if (isSpecialTheme(theme))\n        return \"none\";\n      if (typeof theme === \"string\") {\n        const bundle = bundledThemes[theme];\n        if (!bundle)\n          throw new _shikijs_types__WEBPACK_IMPORTED_MODULE_0__.ShikiError(`Theme \\`${theme}\\` is not included in this bundle. You may want to load it from external source.`);\n        return bundle;\n      }\n      return theme;\n    }\n    const _themes = (options.themes ?? []).map((i) => resolveTheme(i));\n    const langs = (options.langs ?? []).map((i) => resolveLang(i));\n    const core = await createHighlighterCore({\n      engine: options.engine ?? engine(),\n      ...options,\n      themes: _themes,\n      langs\n    });\n    return {\n      ...core,\n      loadLanguage(...langs2) {\n        return core.loadLanguage(...langs2.map(resolveLang));\n      },\n      loadTheme(...themes) {\n        return core.loadTheme(...themes.map(resolveTheme));\n      },\n      getBundledLanguages() {\n        return bundledLanguages;\n      },\n      getBundledThemes() {\n        return bundledThemes;\n      }\n    };\n  }\n  return createHighlighter;\n}\nfunction makeSingletonHighlighter(createHighlighter) {\n  let _shiki;\n  async function getSingletonHighlighter(options = {}) {\n    if (!_shiki) {\n      _shiki = createHighlighter({\n        ...options,\n        themes: options.themes || [],\n        langs: options.langs || []\n      });\n      return _shiki;\n    } else {\n      const s = await _shiki;\n      await Promise.all([\n        s.loadTheme(...options.themes || []),\n        s.loadLanguage(...options.langs || [])\n      ]);\n      return s;\n    }\n  }\n  return getSingletonHighlighter;\n}\nfunction createSingletonShorthands(createHighlighter, config) {\n  const getSingletonHighlighter = makeSingletonHighlighter(createHighlighter);\n  async function get(code, options) {\n    const shiki = await getSingletonHighlighter({\n      langs: [options.lang],\n      themes: \"theme\" in options ? [options.theme] : Object.values(options.themes)\n    });\n    const langs = await config?.guessEmbeddedLanguages?.(code, options.lang, shiki);\n    if (langs) {\n      await shiki.loadLanguage(...langs);\n    }\n    return shiki;\n  }\n  return {\n    getSingletonHighlighter(options) {\n      return getSingletonHighlighter(options);\n    },\n    async codeToHtml(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToHtml(code, options);\n    },\n    async codeToHast(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToHast(code, options);\n    },\n    async codeToTokens(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToTokens(code, options);\n    },\n    async codeToTokensBase(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToTokensBase(code, options);\n    },\n    async codeToTokensWithThemes(code, options) {\n      const shiki = await get(code, options);\n      return shiki.codeToTokensWithThemes(code, options);\n    },\n    async getLastGrammarState(code, options) {\n      const shiki = await getSingletonHighlighter({\n        langs: [options.lang],\n        themes: [options.theme]\n      });\n      return shiki.getLastGrammarState(code, options);\n    }\n  };\n}\n\nfunction createJavaScriptRegexEngine(options) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"import `createJavaScriptRegexEngine` from `@shikijs/engine-javascript` or `shiki/engine/javascript` instead\");\n  return (0,_shikijs_engine_javascript__WEBPACK_IMPORTED_MODULE_5__.createJavaScriptRegexEngine)(options);\n}\nfunction defaultJavaScriptRegexConstructor(pattern) {\n  (0,_shared_core_5hv0Law9_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\"import `defaultJavaScriptRegexConstructor` from `@shikijs/engine-javascript` or `shiki/engine/javascript` instead\");\n  return (0,_shikijs_engine_javascript__WEBPACK_IMPORTED_MODULE_5__.defaultJavaScriptRegexConstructor)(pattern);\n}\n\nfunction createCssVariablesTheme(options = {}) {\n  const {\n    name = \"css-variables\",\n    variablePrefix = \"--shiki-\",\n    fontStyle = true\n  } = options;\n  const variable = (name2) => {\n    if (options.variableDefaults?.[name2])\n      return `var(${variablePrefix}${name2}, ${options.variableDefaults[name2]})`;\n    return `var(${variablePrefix}${name2})`;\n  };\n  const theme = {\n    name,\n    type: \"dark\",\n    colors: {\n      \"editor.foreground\": variable(\"foreground\"),\n      \"editor.background\": variable(\"background\"),\n      \"terminal.ansiBlack\": variable(\"ansi-black\"),\n      \"terminal.ansiRed\": variable(\"ansi-red\"),\n      \"terminal.ansiGreen\": variable(\"ansi-green\"),\n      \"terminal.ansiYellow\": variable(\"ansi-yellow\"),\n      \"terminal.ansiBlue\": variable(\"ansi-blue\"),\n      \"terminal.ansiMagenta\": variable(\"ansi-magenta\"),\n      \"terminal.ansiCyan\": variable(\"ansi-cyan\"),\n      \"terminal.ansiWhite\": variable(\"ansi-white\"),\n      \"terminal.ansiBrightBlack\": variable(\"ansi-bright-black\"),\n      \"terminal.ansiBrightRed\": variable(\"ansi-bright-red\"),\n      \"terminal.ansiBrightGreen\": variable(\"ansi-bright-green\"),\n      \"terminal.ansiBrightYellow\": variable(\"ansi-bright-yellow\"),\n      \"terminal.ansiBrightBlue\": variable(\"ansi-bright-blue\"),\n      \"terminal.ansiBrightMagenta\": variable(\"ansi-bright-magenta\"),\n      \"terminal.ansiBrightCyan\": variable(\"ansi-bright-cyan\"),\n      \"terminal.ansiBrightWhite\": variable(\"ansi-bright-white\")\n    },\n    tokenColors: [\n      {\n        scope: [\n          \"keyword.operator.accessor\",\n          \"meta.group.braces.round.function.arguments\",\n          \"meta.template.expression\",\n          \"markup.fenced_code meta.embedded.block\"\n        ],\n        settings: {\n          foreground: variable(\"foreground\")\n        }\n      },\n      {\n        scope: \"emphasis\",\n        settings: {\n          fontStyle: \"italic\"\n        }\n      },\n      {\n        scope: [\"strong\", \"markup.heading.markdown\", \"markup.bold.markdown\"],\n        settings: {\n          fontStyle: \"bold\"\n        }\n      },\n      {\n        scope: [\"markup.italic.markdown\"],\n        settings: {\n          fontStyle: \"italic\"\n        }\n      },\n      {\n        scope: \"meta.link.inline.markdown\",\n        settings: {\n          fontStyle: \"underline\",\n          foreground: variable(\"token-link\")\n        }\n      },\n      {\n        scope: [\"string\", \"markup.fenced_code\", \"markup.inline\"],\n        settings: {\n          foreground: variable(\"token-string\")\n        }\n      },\n      {\n        scope: [\"comment\", \"string.quoted.docstring.multi\"],\n        settings: {\n          foreground: variable(\"token-comment\")\n        }\n      },\n      {\n        scope: [\n          \"constant.numeric\",\n          \"constant.language\",\n          \"constant.other.placeholder\",\n          \"constant.character.format.placeholder\",\n          \"variable.language.this\",\n          \"variable.other.object\",\n          \"variable.other.class\",\n          \"variable.other.constant\",\n          \"meta.property-name\",\n          \"meta.property-value\",\n          \"support\"\n        ],\n        settings: {\n          foreground: variable(\"token-constant\")\n        }\n      },\n      {\n        scope: [\n          \"keyword\",\n          \"storage.modifier\",\n          \"storage.type\",\n          \"storage.control.clojure\",\n          \"entity.name.function.clojure\",\n          \"entity.name.tag.yaml\",\n          \"support.function.node\",\n          \"support.type.property-name.json\",\n          \"punctuation.separator.key-value\",\n          \"punctuation.definition.template-expression\"\n        ],\n        settings: {\n          foreground: variable(\"token-keyword\")\n        }\n      },\n      {\n        scope: \"variable.parameter.function\",\n        settings: {\n          foreground: variable(\"token-parameter\")\n        }\n      },\n      {\n        scope: [\n          \"support.function\",\n          \"entity.name.type\",\n          \"entity.other.inherited-class\",\n          \"meta.function-call\",\n          \"meta.instance.constructor\",\n          \"entity.other.attribute-name\",\n          \"entity.name.function\",\n          \"constant.keyword.clojure\"\n        ],\n        settings: {\n          foreground: variable(\"token-function\")\n        }\n      },\n      {\n        scope: [\n          \"entity.name.tag\",\n          \"string.quoted\",\n          \"string.regexp\",\n          \"string.interpolated\",\n          \"string.template\",\n          \"string.unquoted.plain.out.yaml\",\n          \"keyword.other.template\"\n        ],\n        settings: {\n          foreground: variable(\"token-string-expression\")\n        }\n      },\n      {\n        scope: [\n          \"punctuation.definition.arguments\",\n          \"punctuation.definition.dict\",\n          \"punctuation.separator\",\n          \"meta.function-call.arguments\"\n        ],\n        settings: {\n          foreground: variable(\"token-punctuation\")\n        }\n      },\n      {\n        // [Custom] Markdown links\n        scope: [\n          \"markup.underline.link\",\n          \"punctuation.definition.metadata.markdown\"\n        ],\n        settings: {\n          foreground: variable(\"token-link\")\n        }\n      },\n      {\n        // [Custom] Markdown list\n        scope: [\"beginning.punctuation.definition.list.markdown\"],\n        settings: {\n          foreground: variable(\"token-string\")\n        }\n      },\n      {\n        // [Custom] Markdown punctuation definition brackets\n        scope: [\n          \"punctuation.definition.string.begin.markdown\",\n          \"punctuation.definition.string.end.markdown\",\n          \"string.other.link.title.markdown\",\n          \"string.other.link.description.markdown\"\n        ],\n        settings: {\n          foreground: variable(\"token-keyword\")\n        }\n      },\n      {\n        // [Custom] Diff\n        scope: [\n          \"markup.inserted\",\n          \"meta.diff.header.to-file\",\n          \"punctuation.definition.inserted\"\n        ],\n        settings: {\n          foreground: variable(\"token-inserted\")\n        }\n      },\n      {\n        scope: [\n          \"markup.deleted\",\n          \"meta.diff.header.from-file\",\n          \"punctuation.definition.deleted\"\n        ],\n        settings: {\n          foreground: variable(\"token-deleted\")\n        }\n      },\n      {\n        scope: [\n          \"markup.changed\",\n          \"punctuation.definition.changed\"\n        ],\n        settings: {\n          foreground: variable(\"token-changed\")\n        }\n      }\n    ]\n  };\n  if (!fontStyle) {\n    theme.tokenColors = theme.tokenColors?.map((tokenColor) => {\n      if (tokenColor.settings?.fontStyle)\n        delete tokenColor.settings.fontStyle;\n      return tokenColor;\n    });\n  }\n  return theme;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ enableDeprecationWarnings),\n/* harmony export */   w: () => (/* binding */ warnDeprecated)\n/* harmony export */ });\nlet _emitDeprecation = 3;\nlet _emitError = false;\nfunction enableDeprecationWarnings(emitDeprecation = true, emitError = false) {\n  _emitDeprecation = emitDeprecation;\n  _emitError = emitError;\n}\nfunction warnDeprecated(message, version = 3) {\n  if (!_emitDeprecation)\n    return;\n  if (typeof _emitDeprecation === \"number\" && version > _emitDeprecation)\n    return;\n  if (_emitError) {\n    throw new Error(`[SHIKI DEPRECATE]: ${message}`);\n  } else {\n    console.trace(`[SHIKI DEPRECATE]: ${message}`);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcytjb3JlQDIuNS4wL25vZGVfbW9kdWxlcy9Ac2hpa2lqcy9jb3JlL2Rpc3Qvc2hhcmVkL2NvcmUuNWh2MExhdzkubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQsSUFBSTtBQUNKLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7O0FBRStEIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vQHNoaWtpanMrY29yZUAyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvY29yZS9kaXN0L3NoYXJlZC9jb3JlLjVodjBMYXc5Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgX2VtaXREZXByZWNhdGlvbiA9IDM7XG5sZXQgX2VtaXRFcnJvciA9IGZhbHNlO1xuZnVuY3Rpb24gZW5hYmxlRGVwcmVjYXRpb25XYXJuaW5ncyhlbWl0RGVwcmVjYXRpb24gPSB0cnVlLCBlbWl0RXJyb3IgPSBmYWxzZSkge1xuICBfZW1pdERlcHJlY2F0aW9uID0gZW1pdERlcHJlY2F0aW9uO1xuICBfZW1pdEVycm9yID0gZW1pdEVycm9yO1xufVxuZnVuY3Rpb24gd2FybkRlcHJlY2F0ZWQobWVzc2FnZSwgdmVyc2lvbiA9IDMpIHtcbiAgaWYgKCFfZW1pdERlcHJlY2F0aW9uKVxuICAgIHJldHVybjtcbiAgaWYgKHR5cGVvZiBfZW1pdERlcHJlY2F0aW9uID09PSBcIm51bWJlclwiICYmIHZlcnNpb24gPiBfZW1pdERlcHJlY2F0aW9uKVxuICAgIHJldHVybjtcbiAgaWYgKF9lbWl0RXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFtTSElLSSBERVBSRUNBVEVdOiAke21lc3NhZ2V9YCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS50cmFjZShgW1NISUtJIERFUFJFQ0FURV06ICR7bWVzc2FnZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgeyBlbmFibGVEZXByZWNhdGlvbldhcm5pbmdzIGFzIGUsIHdhcm5EZXByZWNhdGVkIGFzIHcgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/engine-compile.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/engine-compile.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createJavaScriptRegexEngine: () => (/* binding */ createJavaScriptRegexEngine),\n/* harmony export */   defaultJavaScriptRegexConstructor: () => (/* binding */ defaultJavaScriptRegexConstructor)\n/* harmony export */ });\n/* harmony import */ var oniguruma_to_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! oniguruma-to-es */ \"(app-pages-browser)/./node_modules/.pnpm/oniguruma-to-es@3.1.1/node_modules/oniguruma-to-es/dist/esm/index.js\");\n/* harmony import */ var _shared_engine_javascript_hzpS1_41_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/engine-javascript.hzpS1_41.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/shared/engine-javascript.hzpS1_41.mjs\");\n\n\n\nfunction defaultJavaScriptRegexConstructor(pattern, options) {\n  return (0,oniguruma_to_es__WEBPACK_IMPORTED_MODULE_0__.toRegExp)(\n    pattern,\n    {\n      global: true,\n      hasIndices: true,\n      // This has no benefit for the standard JS engine, but it avoids a perf penalty for\n      // precompiled grammars when constructing extremely long patterns that aren't always used\n      lazyCompileLength: 3e3,\n      rules: {\n        // Needed since TextMate grammars merge backrefs across patterns\n        allowOrphanBackrefs: true,\n        // Improves search performance for generated regexes\n        asciiWordBoundaries: true,\n        // Follow `vscode-oniguruma` which enables this Oniguruma option by default\n        captureGroup: true,\n        // Oniguruma uses depth limit `20`; lowered here to keep regexes shorter and maybe\n        // sometimes faster, but can be increased if issues reported due to low limit\n        recursionLimit: 5,\n        // Oniguruma option for `^`->`\\A`, `$`->`\\Z`; improves search performance without any\n        // change in meaning since TM grammars search line by line\n        singleline: true\n      },\n      ...options\n    }\n  );\n}\nfunction createJavaScriptRegexEngine(options = {}) {\n  const _options = Object.assign(\n    {\n      target: \"auto\",\n      cache: /* @__PURE__ */ new Map()\n    },\n    options\n  );\n  _options.regexConstructor ||= (pattern) => defaultJavaScriptRegexConstructor(pattern, { target: _options.target });\n  return {\n    createScanner(patterns) {\n      return new _shared_engine_javascript_hzpS1_41_mjs__WEBPACK_IMPORTED_MODULE_1__.J(patterns, _options);\n    },\n    createString(s) {\n      return {\n        content: s\n      };\n    }\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcytlbmdpbmUtamF2YXNjcmlwdEAyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvZW5naW5lLWphdmFzY3JpcHQvZGlzdC9lbmdpbmUtY29tcGlsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNzQzs7QUFFakY7QUFDQSxTQUFTLHlEQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwwRkFBMEYseUJBQXlCO0FBQ25IO0FBQ0E7QUFDQSxpQkFBaUIscUVBQWlCO0FBQ2xDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMEUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcytlbmdpbmUtamF2YXNjcmlwdEAyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvZW5naW5lLWphdmFzY3JpcHQvZGlzdC9lbmdpbmUtY29tcGlsZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9SZWdFeHAgfSBmcm9tICdvbmlndXJ1bWEtdG8tZXMnO1xuaW1wb3J0IHsgSiBhcyBKYXZhU2NyaXB0U2Nhbm5lciB9IGZyb20gJy4vc2hhcmVkL2VuZ2luZS1qYXZhc2NyaXB0Lmh6cFMxXzQxLm1qcyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRKYXZhU2NyaXB0UmVnZXhDb25zdHJ1Y3RvcihwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b1JlZ0V4cChcbiAgICBwYXR0ZXJuLFxuICAgIHtcbiAgICAgIGdsb2JhbDogdHJ1ZSxcbiAgICAgIGhhc0luZGljZXM6IHRydWUsXG4gICAgICAvLyBUaGlzIGhhcyBubyBiZW5lZml0IGZvciB0aGUgc3RhbmRhcmQgSlMgZW5naW5lLCBidXQgaXQgYXZvaWRzIGEgcGVyZiBwZW5hbHR5IGZvclxuICAgICAgLy8gcHJlY29tcGlsZWQgZ3JhbW1hcnMgd2hlbiBjb25zdHJ1Y3RpbmcgZXh0cmVtZWx5IGxvbmcgcGF0dGVybnMgdGhhdCBhcmVuJ3QgYWx3YXlzIHVzZWRcbiAgICAgIGxhenlDb21waWxlTGVuZ3RoOiAzZTMsXG4gICAgICBydWxlczoge1xuICAgICAgICAvLyBOZWVkZWQgc2luY2UgVGV4dE1hdGUgZ3JhbW1hcnMgbWVyZ2UgYmFja3JlZnMgYWNyb3NzIHBhdHRlcm5zXG4gICAgICAgIGFsbG93T3JwaGFuQmFja3JlZnM6IHRydWUsXG4gICAgICAgIC8vIEltcHJvdmVzIHNlYXJjaCBwZXJmb3JtYW5jZSBmb3IgZ2VuZXJhdGVkIHJlZ2V4ZXNcbiAgICAgICAgYXNjaWlXb3JkQm91bmRhcmllczogdHJ1ZSxcbiAgICAgICAgLy8gRm9sbG93IGB2c2NvZGUtb25pZ3VydW1hYCB3aGljaCBlbmFibGVzIHRoaXMgT25pZ3VydW1hIG9wdGlvbiBieSBkZWZhdWx0XG4gICAgICAgIGNhcHR1cmVHcm91cDogdHJ1ZSxcbiAgICAgICAgLy8gT25pZ3VydW1hIHVzZXMgZGVwdGggbGltaXQgYDIwYDsgbG93ZXJlZCBoZXJlIHRvIGtlZXAgcmVnZXhlcyBzaG9ydGVyIGFuZCBtYXliZVxuICAgICAgICAvLyBzb21ldGltZXMgZmFzdGVyLCBidXQgY2FuIGJlIGluY3JlYXNlZCBpZiBpc3N1ZXMgcmVwb3J0ZWQgZHVlIHRvIGxvdyBsaW1pdFxuICAgICAgICByZWN1cnNpb25MaW1pdDogNSxcbiAgICAgICAgLy8gT25pZ3VydW1hIG9wdGlvbiBmb3IgYF5gLT5gXFxBYCwgYCRgLT5gXFxaYDsgaW1wcm92ZXMgc2VhcmNoIHBlcmZvcm1hbmNlIHdpdGhvdXQgYW55XG4gICAgICAgIC8vIGNoYW5nZSBpbiBtZWFuaW5nIHNpbmNlIFRNIGdyYW1tYXJzIHNlYXJjaCBsaW5lIGJ5IGxpbmVcbiAgICAgICAgc2luZ2xlbGluZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVKYXZhU2NyaXB0UmVnZXhFbmdpbmUob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IF9vcHRpb25zID0gT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICB0YXJnZXQ6IFwiYXV0b1wiLFxuICAgICAgY2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKClcbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgX29wdGlvbnMucmVnZXhDb25zdHJ1Y3RvciB8fD0gKHBhdHRlcm4pID0+IGRlZmF1bHRKYXZhU2NyaXB0UmVnZXhDb25zdHJ1Y3RvcihwYXR0ZXJuLCB7IHRhcmdldDogX29wdGlvbnMudGFyZ2V0IH0pO1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZVNjYW5uZXIocGF0dGVybnMpIHtcbiAgICAgIHJldHVybiBuZXcgSmF2YVNjcmlwdFNjYW5uZXIocGF0dGVybnMsIF9vcHRpb25zKTtcbiAgICB9LFxuICAgIGNyZWF0ZVN0cmluZyhzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBzXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlSmF2YVNjcmlwdFJlZ2V4RW5naW5lLCBkZWZhdWx0SmF2YVNjcmlwdFJlZ2V4Q29uc3RydWN0b3IgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/engine-compile.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/shared/engine-javascript.hzpS1_41.mjs":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/shared/engine-javascript.hzpS1_41.mjs ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   J: () => (/* binding */ JavaScriptScanner)\n/* harmony export */ });\nconst MAX = 4294967295;\nclass JavaScriptScanner {\n  constructor(patterns, options = {}) {\n    this.patterns = patterns;\n    this.options = options;\n    const {\n      forgiving = false,\n      cache,\n      regexConstructor\n    } = options;\n    if (!regexConstructor) {\n      throw new Error(\"Option `regexConstructor` is not provided\");\n    }\n    this.regexps = patterns.map((p) => {\n      if (typeof p !== \"string\") {\n        return p;\n      }\n      const cached = cache?.get(p);\n      if (cached) {\n        if (cached instanceof RegExp) {\n          return cached;\n        }\n        if (forgiving)\n          return null;\n        throw cached;\n      }\n      try {\n        const regex = regexConstructor(p);\n        cache?.set(p, regex);\n        return regex;\n      } catch (e) {\n        cache?.set(p, e);\n        if (forgiving)\n          return null;\n        throw e;\n      }\n    });\n  }\n  regexps;\n  findNextMatchSync(string, startPosition, _options) {\n    const str = typeof string === \"string\" ? string : string.content;\n    const pending = [];\n    function toResult(index, match, offset = 0) {\n      return {\n        index,\n        captureIndices: match.indices.map((indice) => {\n          if (indice == null) {\n            return {\n              start: MAX,\n              end: MAX,\n              length: 0\n            };\n          }\n          return {\n            start: indice[0] + offset,\n            end: indice[1] + offset,\n            length: indice[1] - indice[0]\n          };\n        })\n      };\n    }\n    for (let i = 0; i < this.regexps.length; i++) {\n      const regexp = this.regexps[i];\n      if (!regexp)\n        continue;\n      try {\n        regexp.lastIndex = startPosition;\n        const match = regexp.exec(str);\n        if (!match)\n          continue;\n        if (match.index === startPosition) {\n          return toResult(i, match, 0);\n        }\n        pending.push([i, match, 0]);\n      } catch (e) {\n        if (this.options.forgiving)\n          continue;\n        throw e;\n      }\n    }\n    if (pending.length) {\n      const minIndex = Math.min(...pending.map((m) => m[1].index));\n      for (const [i, match, offset] of pending) {\n        if (match.index === minIndex) {\n          return toResult(i, match, offset);\n        }\n      }\n    }\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcytlbmdpbmUtamF2YXNjcmlwdEAyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvZW5naW5lLWphdmFzY3JpcHQvZGlzdC9zaGFyZWQvZW5naW5lLWphdmFzY3JpcHQuaHpwUzFfNDEubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcytlbmdpbmUtamF2YXNjcmlwdEAyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvZW5naW5lLWphdmFzY3JpcHQvZGlzdC9zaGFyZWQvZW5naW5lLWphdmFzY3JpcHQuaHpwUzFfNDEubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1BWCA9IDQyOTQ5NjcyOTU7XG5jbGFzcyBKYXZhU2NyaXB0U2Nhbm5lciB7XG4gIGNvbnN0cnVjdG9yKHBhdHRlcm5zLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBjb25zdCB7XG4gICAgICBmb3JnaXZpbmcgPSBmYWxzZSxcbiAgICAgIGNhY2hlLFxuICAgICAgcmVnZXhDb25zdHJ1Y3RvclxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICghcmVnZXhDb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3B0aW9uIGByZWdleENvbnN0cnVjdG9yYCBpcyBub3QgcHJvdmlkZWRcIik7XG4gICAgfVxuICAgIHRoaXMucmVnZXhwcyA9IHBhdHRlcm5zLm1hcCgocCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGU/LmdldChwKTtcbiAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgaWYgKGNhY2hlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcmdpdmluZylcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhyb3cgY2FjaGVkO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVnZXggPSByZWdleENvbnN0cnVjdG9yKHApO1xuICAgICAgICBjYWNoZT8uc2V0KHAsIHJlZ2V4KTtcbiAgICAgICAgcmV0dXJuIHJlZ2V4O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZT8uc2V0KHAsIGUpO1xuICAgICAgICBpZiAoZm9yZ2l2aW5nKVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJlZ2V4cHM7XG4gIGZpbmROZXh0TWF0Y2hTeW5jKHN0cmluZywgc3RhcnRQb3NpdGlvbiwgX29wdGlvbnMpIHtcbiAgICBjb25zdCBzdHIgPSB0eXBlb2Ygc3RyaW5nID09PSBcInN0cmluZ1wiID8gc3RyaW5nIDogc3RyaW5nLmNvbnRlbnQ7XG4gICAgY29uc3QgcGVuZGluZyA9IFtdO1xuICAgIGZ1bmN0aW9uIHRvUmVzdWx0KGluZGV4LCBtYXRjaCwgb2Zmc2V0ID0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGNhcHR1cmVJbmRpY2VzOiBtYXRjaC5pbmRpY2VzLm1hcCgoaW5kaWNlKSA9PiB7XG4gICAgICAgICAgaWYgKGluZGljZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzdGFydDogTUFYLFxuICAgICAgICAgICAgICBlbmQ6IE1BWCxcbiAgICAgICAgICAgICAgbGVuZ3RoOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IGluZGljZVswXSArIG9mZnNldCxcbiAgICAgICAgICAgIGVuZDogaW5kaWNlWzFdICsgb2Zmc2V0LFxuICAgICAgICAgICAgbGVuZ3RoOiBpbmRpY2VbMV0gLSBpbmRpY2VbMF1cbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJlZ2V4cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IHRoaXMucmVnZXhwc1tpXTtcbiAgICAgIGlmICghcmVnZXhwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZ2V4cC5sYXN0SW5kZXggPSBzdGFydFBvc2l0aW9uO1xuICAgICAgICBjb25zdCBtYXRjaCA9IHJlZ2V4cC5leGVjKHN0cik7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChtYXRjaC5pbmRleCA9PT0gc3RhcnRQb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybiB0b1Jlc3VsdChpLCBtYXRjaCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcGVuZGluZy5wdXNoKFtpLCBtYXRjaCwgMF0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZvcmdpdmluZylcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBlbmRpbmcubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtaW5JbmRleCA9IE1hdGgubWluKC4uLnBlbmRpbmcubWFwKChtKSA9PiBtWzFdLmluZGV4KSk7XG4gICAgICBmb3IgKGNvbnN0IFtpLCBtYXRjaCwgb2Zmc2V0XSBvZiBwZW5kaW5nKSB7XG4gICAgICAgIGlmIChtYXRjaC5pbmRleCA9PT0gbWluSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gdG9SZXN1bHQoaSwgbWF0Y2gsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgSmF2YVNjcmlwdFNjYW5uZXIgYXMgSiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/shared/engine-javascript.hzpS1_41.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-oniguruma@2.5.0/node_modules/@shikijs/engine-oniguruma/dist/index.mjs":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+engine-oniguruma@2.5.0/node_modules/@shikijs/engine-oniguruma/dist/index.mjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOnigurumaEngine: () => (/* binding */ createOnigurumaEngine),\n/* harmony export */   createWasmOnigEngine: () => (/* binding */ createWasmOnigEngine),\n/* harmony export */   getDefaultWasmLoader: () => (/* binding */ getDefaultWasmLoader),\n/* harmony export */   loadWasm: () => (/* binding */ loadWasm),\n/* harmony export */   setDefaultWasmLoader: () => (/* binding */ setDefaultWasmLoader)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\")[\"Buffer\"];\nclass ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\nfunction getHeapMax() {\n  return 2147483648;\n}\nfunction _emscripten_get_now() {\n  return typeof performance !== \"undefined\" ? performance.now() : Date.now();\n}\nconst alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\nasync function main(init) {\n  let wasmMemory;\n  let buffer;\n  const binding = {};\n  function updateGlobalBufferAndViews(buf) {\n    buffer = buf;\n    binding.HEAPU8 = new Uint8Array(buf);\n    binding.HEAPU32 = new Uint32Array(buf);\n  }\n  function _emscripten_memcpy_big(dest, src, num) {\n    binding.HEAPU8.copyWithin(dest, src, src + num);\n  }\n  function emscripten_realloc_buffer(size) {\n    try {\n      wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      return 1;\n    } catch {\n    }\n  }\n  function _emscripten_resize_heap(requestedSize) {\n    const oldSize = binding.HEAPU8.length;\n    requestedSize = requestedSize >>> 0;\n    const maxHeapSize = getHeapMax();\n    if (requestedSize > maxHeapSize)\n      return false;\n    for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n      let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n      overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n      const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n      const replacement = emscripten_realloc_buffer(newSize);\n      if (replacement)\n        return true;\n    }\n    return false;\n  }\n  const UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : void 0;\n  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead = 1024) {\n    const endIdx = idx + maxBytesToRead;\n    let endPtr = idx;\n    while (heapOrArray[endPtr] && !(endPtr >= endIdx))\n      ++endPtr;\n    if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n      return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n    }\n    let str = \"\";\n    while (idx < endPtr) {\n      let u0 = heapOrArray[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      const u1 = heapOrArray[idx++] & 63;\n      if ((u0 & 224) === 192) {\n        str += String.fromCharCode((u0 & 31) << 6 | u1);\n        continue;\n      }\n      const u2 = heapOrArray[idx++] & 63;\n      if ((u0 & 240) === 224) {\n        u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n      } else {\n        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        const ch = u0 - 65536;\n        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n      }\n    }\n    return str;\n  }\n  function UTF8ToString(ptr, maxBytesToRead) {\n    return ptr ? UTF8ArrayToString(binding.HEAPU8, ptr, maxBytesToRead) : \"\";\n  }\n  const asmLibraryArg = {\n    emscripten_get_now: _emscripten_get_now,\n    emscripten_memcpy_big: _emscripten_memcpy_big,\n    emscripten_resize_heap: _emscripten_resize_heap,\n    fd_write: () => 0\n  };\n  async function createWasm() {\n    const info = {\n      env: asmLibraryArg,\n      wasi_snapshot_preview1: asmLibraryArg\n    };\n    const exports = await init(info);\n    wasmMemory = exports.memory;\n    updateGlobalBufferAndViews(wasmMemory.buffer);\n    Object.assign(binding, exports);\n    binding.UTF8ToString = UTF8ToString;\n  }\n  await createWasm();\n  return binding;\n}\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nlet onigBinding = null;\nfunction throwLastOnigError(onigBinding2) {\n  throw new ShikiError(onigBinding2.UTF8ToString(onigBinding2.getLastOnigError()));\n}\nclass UtfString {\n  constructor(str) {\n    __publicField(this, \"utf16Length\");\n    __publicField(this, \"utf8Length\");\n    __publicField(this, \"utf16Value\");\n    __publicField(this, \"utf8Value\");\n    __publicField(this, \"utf16OffsetToUtf8\");\n    __publicField(this, \"utf8OffsetToUtf16\");\n    const utf16Length = str.length;\n    const utf8Length = UtfString._utf8ByteLength(str);\n    const computeIndicesMapping = utf8Length !== utf16Length;\n    const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n    if (computeIndicesMapping)\n      utf16OffsetToUtf8[utf16Length] = utf8Length;\n    const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n    if (computeIndicesMapping)\n      utf8OffsetToUtf16[utf8Length] = utf16Length;\n    const utf8Value = new Uint8Array(utf8Length);\n    let i8 = 0;\n    for (let i16 = 0; i16 < utf16Length; i16++) {\n      const charCode = str.charCodeAt(i16);\n      let codePoint = charCode;\n      let wasSurrogatePair = false;\n      if (charCode >= 55296 && charCode <= 56319) {\n        if (i16 + 1 < utf16Length) {\n          const nextCharCode = str.charCodeAt(i16 + 1);\n          if (nextCharCode >= 56320 && nextCharCode <= 57343) {\n            codePoint = (charCode - 55296 << 10) + 65536 | nextCharCode - 56320;\n            wasSurrogatePair = true;\n          }\n        }\n      }\n      if (computeIndicesMapping) {\n        utf16OffsetToUtf8[i16] = i8;\n        if (wasSurrogatePair)\n          utf16OffsetToUtf8[i16 + 1] = i8;\n        if (codePoint <= 127) {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n        } else if (codePoint <= 2047) {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n          utf8OffsetToUtf16[i8 + 1] = i16;\n        } else if (codePoint <= 65535) {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n          utf8OffsetToUtf16[i8 + 1] = i16;\n          utf8OffsetToUtf16[i8 + 2] = i16;\n        } else {\n          utf8OffsetToUtf16[i8 + 0] = i16;\n          utf8OffsetToUtf16[i8 + 1] = i16;\n          utf8OffsetToUtf16[i8 + 2] = i16;\n          utf8OffsetToUtf16[i8 + 3] = i16;\n        }\n      }\n      if (codePoint <= 127) {\n        utf8Value[i8++] = codePoint;\n      } else if (codePoint <= 2047) {\n        utf8Value[i8++] = 192 | (codePoint & 1984) >>> 6;\n        utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;\n      } else if (codePoint <= 65535) {\n        utf8Value[i8++] = 224 | (codePoint & 61440) >>> 12;\n        utf8Value[i8++] = 128 | (codePoint & 4032) >>> 6;\n        utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;\n      } else {\n        utf8Value[i8++] = 240 | (codePoint & 1835008) >>> 18;\n        utf8Value[i8++] = 128 | (codePoint & 258048) >>> 12;\n        utf8Value[i8++] = 128 | (codePoint & 4032) >>> 6;\n        utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;\n      }\n      if (wasSurrogatePair)\n        i16++;\n    }\n    this.utf16Length = utf16Length;\n    this.utf8Length = utf8Length;\n    this.utf16Value = str;\n    this.utf8Value = utf8Value;\n    this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n    this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n  }\n  static _utf8ByteLength(str) {\n    let result = 0;\n    for (let i = 0, len = str.length; i < len; i++) {\n      const charCode = str.charCodeAt(i);\n      let codepoint = charCode;\n      let wasSurrogatePair = false;\n      if (charCode >= 55296 && charCode <= 56319) {\n        if (i + 1 < len) {\n          const nextCharCode = str.charCodeAt(i + 1);\n          if (nextCharCode >= 56320 && nextCharCode <= 57343) {\n            codepoint = (charCode - 55296 << 10) + 65536 | nextCharCode - 56320;\n            wasSurrogatePair = true;\n          }\n        }\n      }\n      if (codepoint <= 127)\n        result += 1;\n      else if (codepoint <= 2047)\n        result += 2;\n      else if (codepoint <= 65535)\n        result += 3;\n      else\n        result += 4;\n      if (wasSurrogatePair)\n        i++;\n    }\n    return result;\n  }\n  createString(onigBinding2) {\n    const result = onigBinding2.omalloc(this.utf8Length);\n    onigBinding2.HEAPU8.set(this.utf8Value, result);\n    return result;\n  }\n}\nconst _OnigString = class {\n  constructor(str) {\n    __publicField(this, \"id\", ++_OnigString.LAST_ID);\n    __publicField(this, \"_onigBinding\");\n    __publicField(this, \"content\");\n    __publicField(this, \"utf16Length\");\n    __publicField(this, \"utf8Length\");\n    __publicField(this, \"utf16OffsetToUtf8\");\n    __publicField(this, \"utf8OffsetToUtf16\");\n    __publicField(this, \"ptr\");\n    if (!onigBinding)\n      throw new ShikiError(\"Must invoke loadWasm first.\");\n    this._onigBinding = onigBinding;\n    this.content = str;\n    const utfString = new UtfString(str);\n    this.utf16Length = utfString.utf16Length;\n    this.utf8Length = utfString.utf8Length;\n    this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n    this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n    if (this.utf8Length < 1e4 && !_OnigString._sharedPtrInUse) {\n      if (!_OnigString._sharedPtr)\n        _OnigString._sharedPtr = onigBinding.omalloc(1e4);\n      _OnigString._sharedPtrInUse = true;\n      onigBinding.HEAPU8.set(utfString.utf8Value, _OnigString._sharedPtr);\n      this.ptr = _OnigString._sharedPtr;\n    } else {\n      this.ptr = utfString.createString(onigBinding);\n    }\n  }\n  convertUtf8OffsetToUtf16(utf8Offset) {\n    if (this.utf8OffsetToUtf16) {\n      if (utf8Offset < 0)\n        return 0;\n      if (utf8Offset > this.utf8Length)\n        return this.utf16Length;\n      return this.utf8OffsetToUtf16[utf8Offset];\n    }\n    return utf8Offset;\n  }\n  convertUtf16OffsetToUtf8(utf16Offset) {\n    if (this.utf16OffsetToUtf8) {\n      if (utf16Offset < 0)\n        return 0;\n      if (utf16Offset > this.utf16Length)\n        return this.utf8Length;\n      return this.utf16OffsetToUtf8[utf16Offset];\n    }\n    return utf16Offset;\n  }\n  dispose() {\n    if (this.ptr === _OnigString._sharedPtr)\n      _OnigString._sharedPtrInUse = false;\n    else\n      this._onigBinding.ofree(this.ptr);\n  }\n};\nlet OnigString = _OnigString;\n__publicField(OnigString, \"LAST_ID\", 0);\n__publicField(OnigString, \"_sharedPtr\", 0);\n// a pointer to a string of 10000 bytes\n__publicField(OnigString, \"_sharedPtrInUse\", false);\nclass OnigScanner {\n  constructor(patterns) {\n    __publicField(this, \"_onigBinding\");\n    __publicField(this, \"_ptr\");\n    if (!onigBinding)\n      throw new ShikiError(\"Must invoke loadWasm first.\");\n    const strPtrsArr = [];\n    const strLenArr = [];\n    for (let i = 0, len = patterns.length; i < len; i++) {\n      const utfString = new UtfString(patterns[i]);\n      strPtrsArr[i] = utfString.createString(onigBinding);\n      strLenArr[i] = utfString.utf8Length;\n    }\n    const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n    onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n    const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n    onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n    const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n    for (let i = 0, len = patterns.length; i < len; i++)\n      onigBinding.ofree(strPtrsArr[i]);\n    onigBinding.ofree(strLenPtr);\n    onigBinding.ofree(strPtrsPtr);\n    if (scannerPtr === 0)\n      throwLastOnigError(onigBinding);\n    this._onigBinding = onigBinding;\n    this._ptr = scannerPtr;\n  }\n  dispose() {\n    this._onigBinding.freeOnigScanner(this._ptr);\n  }\n  findNextMatchSync(string, startPosition, arg) {\n    let options = 0 /* None */;\n    if (typeof arg === \"number\") {\n      options = arg;\n    }\n    if (typeof string === \"string\") {\n      string = new OnigString(string);\n      const result = this._findNextMatchSync(string, startPosition, false, options);\n      string.dispose();\n      return result;\n    }\n    return this._findNextMatchSync(string, startPosition, false, options);\n  }\n  _findNextMatchSync(string, startPosition, debugCall, options) {\n    const onigBinding2 = this._onigBinding;\n    const resultPtr = onigBinding2.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n    if (resultPtr === 0) {\n      return null;\n    }\n    const HEAPU32 = onigBinding2.HEAPU32;\n    let offset = resultPtr / 4;\n    const index = HEAPU32[offset++];\n    const count = HEAPU32[offset++];\n    const captureIndices = [];\n    for (let i = 0; i < count; i++) {\n      const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n      const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n      captureIndices[i] = {\n        start: beg,\n        end,\n        length: end - beg\n      };\n    }\n    return {\n      index,\n      captureIndices\n    };\n  }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n  return typeof dataOrOptions.instantiator === \"function\";\n}\nfunction isInstantiatorModule(dataOrOptions) {\n  return typeof dataOrOptions.default === \"function\";\n}\nfunction isDataOptionsObject(dataOrOptions) {\n  return typeof dataOrOptions.data !== \"undefined\";\n}\nfunction isResponse(dataOrOptions) {\n  return typeof Response !== \"undefined\" && dataOrOptions instanceof Response;\n}\nfunction isArrayBuffer(data) {\n  return typeof ArrayBuffer !== \"undefined\" && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) || typeof Buffer !== \"undefined\" && Buffer.isBuffer?.(data) || typeof SharedArrayBuffer !== \"undefined\" && data instanceof SharedArrayBuffer || typeof Uint32Array !== \"undefined\" && data instanceof Uint32Array;\n}\nlet initPromise;\nfunction loadWasm(options) {\n  if (initPromise)\n    return initPromise;\n  async function _load() {\n    onigBinding = await main(async (info) => {\n      let instance = options;\n      instance = await instance;\n      if (typeof instance === \"function\")\n        instance = await instance(info);\n      if (typeof instance === \"function\")\n        instance = await instance(info);\n      if (isInstantiatorOptionsObject(instance)) {\n        instance = await instance.instantiator(info);\n      } else if (isInstantiatorModule(instance)) {\n        instance = await instance.default(info);\n      } else {\n        if (isDataOptionsObject(instance))\n          instance = instance.data;\n        if (isResponse(instance)) {\n          if (typeof WebAssembly.instantiateStreaming === \"function\")\n            instance = await _makeResponseStreamingLoader(instance)(info);\n          else\n            instance = await _makeResponseNonStreamingLoader(instance)(info);\n        } else if (isArrayBuffer(instance)) {\n          instance = await _makeArrayBufferLoader(instance)(info);\n        } else if (instance instanceof WebAssembly.Module) {\n          instance = await _makeArrayBufferLoader(instance)(info);\n        } else if (\"default\" in instance && instance.default instanceof WebAssembly.Module) {\n          instance = await _makeArrayBufferLoader(instance.default)(info);\n        }\n      }\n      if (\"instance\" in instance)\n        instance = instance.instance;\n      if (\"exports\" in instance)\n        instance = instance.exports;\n      return instance;\n    });\n  }\n  initPromise = _load();\n  return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n  return (importObject) => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n  return (importObject) => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n  return async (importObject) => {\n    const arrayBuffer = await data.arrayBuffer();\n    return WebAssembly.instantiate(arrayBuffer, importObject);\n  };\n}\n\nlet _defaultWasmLoader;\nfunction setDefaultWasmLoader(_loader) {\n  _defaultWasmLoader = _loader;\n}\nfunction getDefaultWasmLoader() {\n  return _defaultWasmLoader;\n}\nasync function createOnigurumaEngine(options) {\n  if (options)\n    await loadWasm(options);\n  return {\n    createScanner(patterns) {\n      return new OnigScanner(patterns.map((p) => typeof p === \"string\" ? p : p.source));\n    },\n    createString(s) {\n      return new OnigString(s);\n    }\n  };\n}\nasync function createWasmOnigEngine(options) {\n  return createOnigurumaEngine(options);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-oniguruma@2.5.0/node_modules/@shikijs/engine-oniguruma/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+types@2.5.0/node_modules/@shikijs/types/dist/index.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+types@2.5.0/node_modules/@shikijs/types/dist/index.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ShikiError: () => (/* binding */ ShikiError)\n/* harmony export */ });\nclass ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcyt0eXBlc0AyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvdHlwZXMvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFc0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcyt0eXBlc0AyLjUuMC9ub2RlX21vZHVsZXMvQHNoaWtpanMvdHlwZXMvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU2hpa2lFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiU2hpa2lFcnJvclwiO1xuICB9XG59XG5cbmV4cG9ydCB7IFNoaWtpRXJyb3IgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+types@2.5.0/node_modules/@shikijs/types/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@shikijs+vscode-textmate@10.0.2/node_modules/@shikijs/vscode-textmate/dist/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@shikijs+vscode-textmate@10.0.2/node_modules/@shikijs/vscode-textmate/dist/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncodedTokenMetadata: () => (/* binding */ EncodedTokenMetadata),\n/* harmony export */   FindOption: () => (/* binding */ FindOption),\n/* harmony export */   FontStyle: () => (/* binding */ FontStyle),\n/* harmony export */   INITIAL: () => (/* binding */ INITIAL),\n/* harmony export */   Registry: () => (/* binding */ Registry),\n/* harmony export */   Theme: () => (/* binding */ Theme),\n/* harmony export */   disposeOnigString: () => (/* binding */ disposeOnigString)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.1.7_react-dom@19.0.0_react@19.0.0/node_modules/next/dist/build/polyfills/process.js\");\n// src/utils.ts\nfunction clone(something) {\n  return doClone(something);\n}\nfunction doClone(something) {\n  if (Array.isArray(something)) {\n    return cloneArray(something);\n  }\n  if (something instanceof RegExp) {\n    return something;\n  }\n  if (typeof something === \"object\") {\n    return cloneObj(something);\n  }\n  return something;\n}\nfunction cloneArray(arr) {\n  let r = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    r[i] = doClone(arr[i]);\n  }\n  return r;\n}\nfunction cloneObj(obj) {\n  let r = {};\n  for (let key in obj) {\n    r[key] = doClone(obj[key]);\n  }\n  return r;\n}\nfunction mergeObjects(target, ...sources) {\n  sources.forEach((source) => {\n    for (let key in source) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n}\nfunction basename(path) {\n  const idx = ~path.lastIndexOf(\"/\") || ~path.lastIndexOf(\"\\\\\");\n  if (idx === 0) {\n    return path;\n  } else if (~idx === path.length - 1) {\n    return basename(path.substring(0, path.length - 1));\n  } else {\n    return path.substr(~idx + 1);\n  }\n}\nvar CAPTURING_REGEX_SOURCE = /\\$(\\d+)|\\${(\\d+):\\/(downcase|upcase)}/g;\nvar RegexSource = class {\n  static hasCaptures(regexSource) {\n    if (regexSource === null) {\n      return false;\n    }\n    CAPTURING_REGEX_SOURCE.lastIndex = 0;\n    return CAPTURING_REGEX_SOURCE.test(regexSource);\n  }\n  static replaceCaptures(regexSource, captureSource, captureIndices) {\n    return regexSource.replace(CAPTURING_REGEX_SOURCE, (match, index, commandIndex, command) => {\n      let capture = captureIndices[parseInt(index || commandIndex, 10)];\n      if (capture) {\n        let result = captureSource.substring(capture.start, capture.end);\n        while (result[0] === \".\") {\n          result = result.substring(1);\n        }\n        switch (command) {\n          case \"downcase\":\n            return result.toLowerCase();\n          case \"upcase\":\n            return result.toUpperCase();\n          default:\n            return result;\n        }\n      } else {\n        return match;\n      }\n    });\n  }\n};\nfunction strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\nfunction strArrCmp(a, b) {\n  if (a === null && b === null) {\n    return 0;\n  }\n  if (!a) {\n    return -1;\n  }\n  if (!b) {\n    return 1;\n  }\n  let len1 = a.length;\n  let len2 = b.length;\n  if (len1 === len2) {\n    for (let i = 0; i < len1; i++) {\n      let res = strcmp(a[i], b[i]);\n      if (res !== 0) {\n        return res;\n      }\n    }\n    return 0;\n  }\n  return len1 - len2;\n}\nfunction isValidHexColor(hex) {\n  if (/^#[0-9a-f]{6}$/i.test(hex)) {\n    return true;\n  }\n  if (/^#[0-9a-f]{8}$/i.test(hex)) {\n    return true;\n  }\n  if (/^#[0-9a-f]{3}$/i.test(hex)) {\n    return true;\n  }\n  if (/^#[0-9a-f]{4}$/i.test(hex)) {\n    return true;\n  }\n  return false;\n}\nfunction escapeRegExpCharacters(value) {\n  return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, \"\\\\$&\");\n}\nvar CachedFn = class {\n  constructor(fn) {\n    this.fn = fn;\n  }\n  cache = /* @__PURE__ */ new Map();\n  get(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    const value = this.fn(key);\n    this.cache.set(key, value);\n    return value;\n  }\n};\n\n// src/theme.ts\nvar Theme = class {\n  constructor(_colorMap, _defaults, _root) {\n    this._colorMap = _colorMap;\n    this._defaults = _defaults;\n    this._root = _root;\n  }\n  static createFromRawTheme(source, colorMap) {\n    return this.createFromParsedTheme(parseTheme(source), colorMap);\n  }\n  static createFromParsedTheme(source, colorMap) {\n    return resolveParsedThemeRules(source, colorMap);\n  }\n  _cachedMatchRoot = new CachedFn(\n    (scopeName) => this._root.match(scopeName)\n  );\n  getColorMap() {\n    return this._colorMap.getColorMap();\n  }\n  getDefaults() {\n    return this._defaults;\n  }\n  match(scopePath) {\n    if (scopePath === null) {\n      return this._defaults;\n    }\n    const scopeName = scopePath.scopeName;\n    const matchingTrieElements = this._cachedMatchRoot.get(scopeName);\n    const effectiveRule = matchingTrieElements.find(\n      (v) => _scopePathMatchesParentScopes(scopePath.parent, v.parentScopes)\n    );\n    if (!effectiveRule) {\n      return null;\n    }\n    return new StyleAttributes(\n      effectiveRule.fontStyle,\n      effectiveRule.foreground,\n      effectiveRule.background\n    );\n  }\n};\nvar ScopeStack = class _ScopeStack {\n  constructor(parent, scopeName) {\n    this.parent = parent;\n    this.scopeName = scopeName;\n  }\n  static push(path, scopeNames) {\n    for (const name of scopeNames) {\n      path = new _ScopeStack(path, name);\n    }\n    return path;\n  }\n  static from(...segments) {\n    let result = null;\n    for (let i = 0; i < segments.length; i++) {\n      result = new _ScopeStack(result, segments[i]);\n    }\n    return result;\n  }\n  push(scopeName) {\n    return new _ScopeStack(this, scopeName);\n  }\n  getSegments() {\n    let item = this;\n    const result = [];\n    while (item) {\n      result.push(item.scopeName);\n      item = item.parent;\n    }\n    result.reverse();\n    return result;\n  }\n  toString() {\n    return this.getSegments().join(\" \");\n  }\n  extends(other) {\n    if (this === other) {\n      return true;\n    }\n    if (this.parent === null) {\n      return false;\n    }\n    return this.parent.extends(other);\n  }\n  getExtensionIfDefined(base) {\n    const result = [];\n    let item = this;\n    while (item && item !== base) {\n      result.push(item.scopeName);\n      item = item.parent;\n    }\n    return item === base ? result.reverse() : void 0;\n  }\n};\nfunction _scopePathMatchesParentScopes(scopePath, parentScopes) {\n  if (parentScopes.length === 0) {\n    return true;\n  }\n  for (let index = 0; index < parentScopes.length; index++) {\n    let scopePattern = parentScopes[index];\n    let scopeMustMatch = false;\n    if (scopePattern === \">\") {\n      if (index === parentScopes.length - 1) {\n        return false;\n      }\n      scopePattern = parentScopes[++index];\n      scopeMustMatch = true;\n    }\n    while (scopePath) {\n      if (_matchesScope(scopePath.scopeName, scopePattern)) {\n        break;\n      }\n      if (scopeMustMatch) {\n        return false;\n      }\n      scopePath = scopePath.parent;\n    }\n    if (!scopePath) {\n      return false;\n    }\n    scopePath = scopePath.parent;\n  }\n  return true;\n}\nfunction _matchesScope(scopeName, scopePattern) {\n  return scopePattern === scopeName || scopeName.startsWith(scopePattern) && scopeName[scopePattern.length] === \".\";\n}\nvar StyleAttributes = class {\n  constructor(fontStyle, foregroundId, backgroundId) {\n    this.fontStyle = fontStyle;\n    this.foregroundId = foregroundId;\n    this.backgroundId = backgroundId;\n  }\n};\nfunction parseTheme(source) {\n  if (!source) {\n    return [];\n  }\n  if (!source.settings || !Array.isArray(source.settings)) {\n    return [];\n  }\n  let settings = source.settings;\n  let result = [], resultLen = 0;\n  for (let i = 0, len = settings.length; i < len; i++) {\n    let entry = settings[i];\n    if (!entry.settings) {\n      continue;\n    }\n    let scopes;\n    if (typeof entry.scope === \"string\") {\n      let _scope = entry.scope;\n      _scope = _scope.replace(/^[,]+/, \"\");\n      _scope = _scope.replace(/[,]+$/, \"\");\n      scopes = _scope.split(\",\");\n    } else if (Array.isArray(entry.scope)) {\n      scopes = entry.scope;\n    } else {\n      scopes = [\"\"];\n    }\n    let fontStyle = -1 /* NotSet */;\n    if (typeof entry.settings.fontStyle === \"string\") {\n      fontStyle = 0 /* None */;\n      let segments = entry.settings.fontStyle.split(\" \");\n      for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n        let segment = segments[j];\n        switch (segment) {\n          case \"italic\":\n            fontStyle = fontStyle | 1 /* Italic */;\n            break;\n          case \"bold\":\n            fontStyle = fontStyle | 2 /* Bold */;\n            break;\n          case \"underline\":\n            fontStyle = fontStyle | 4 /* Underline */;\n            break;\n          case \"strikethrough\":\n            fontStyle = fontStyle | 8 /* Strikethrough */;\n            break;\n        }\n      }\n    }\n    let foreground = null;\n    if (typeof entry.settings.foreground === \"string\" && isValidHexColor(entry.settings.foreground)) {\n      foreground = entry.settings.foreground;\n    }\n    let background = null;\n    if (typeof entry.settings.background === \"string\" && isValidHexColor(entry.settings.background)) {\n      background = entry.settings.background;\n    }\n    for (let j = 0, lenJ = scopes.length; j < lenJ; j++) {\n      let _scope = scopes[j].trim();\n      let segments = _scope.split(\" \");\n      let scope = segments[segments.length - 1];\n      let parentScopes = null;\n      if (segments.length > 1) {\n        parentScopes = segments.slice(0, segments.length - 1);\n        parentScopes.reverse();\n      }\n      result[resultLen++] = new ParsedThemeRule(\n        scope,\n        parentScopes,\n        i,\n        fontStyle,\n        foreground,\n        background\n      );\n    }\n  }\n  return result;\n}\nvar ParsedThemeRule = class {\n  constructor(scope, parentScopes, index, fontStyle, foreground, background) {\n    this.scope = scope;\n    this.parentScopes = parentScopes;\n    this.index = index;\n    this.fontStyle = fontStyle;\n    this.foreground = foreground;\n    this.background = background;\n  }\n};\nvar FontStyle = /* @__PURE__ */ ((FontStyle2) => {\n  FontStyle2[FontStyle2[\"NotSet\"] = -1] = \"NotSet\";\n  FontStyle2[FontStyle2[\"None\"] = 0] = \"None\";\n  FontStyle2[FontStyle2[\"Italic\"] = 1] = \"Italic\";\n  FontStyle2[FontStyle2[\"Bold\"] = 2] = \"Bold\";\n  FontStyle2[FontStyle2[\"Underline\"] = 4] = \"Underline\";\n  FontStyle2[FontStyle2[\"Strikethrough\"] = 8] = \"Strikethrough\";\n  return FontStyle2;\n})(FontStyle || {});\nfunction resolveParsedThemeRules(parsedThemeRules, _colorMap) {\n  parsedThemeRules.sort((a, b) => {\n    let r = strcmp(a.scope, b.scope);\n    if (r !== 0) {\n      return r;\n    }\n    r = strArrCmp(a.parentScopes, b.parentScopes);\n    if (r !== 0) {\n      return r;\n    }\n    return a.index - b.index;\n  });\n  let defaultFontStyle = 0 /* None */;\n  let defaultForeground = \"#000000\";\n  let defaultBackground = \"#ffffff\";\n  while (parsedThemeRules.length >= 1 && parsedThemeRules[0].scope === \"\") {\n    let incomingDefaults = parsedThemeRules.shift();\n    if (incomingDefaults.fontStyle !== -1 /* NotSet */) {\n      defaultFontStyle = incomingDefaults.fontStyle;\n    }\n    if (incomingDefaults.foreground !== null) {\n      defaultForeground = incomingDefaults.foreground;\n    }\n    if (incomingDefaults.background !== null) {\n      defaultBackground = incomingDefaults.background;\n    }\n  }\n  let colorMap = new ColorMap(_colorMap);\n  let defaults = new StyleAttributes(defaultFontStyle, colorMap.getId(defaultForeground), colorMap.getId(defaultBackground));\n  let root = new ThemeTrieElement(new ThemeTrieElementRule(0, null, -1 /* NotSet */, 0, 0), []);\n  for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n    let rule = parsedThemeRules[i];\n    root.insert(0, rule.scope, rule.parentScopes, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n  }\n  return new Theme(colorMap, defaults, root);\n}\nvar ColorMap = class {\n  _isFrozen;\n  _lastColorId;\n  _id2color;\n  _color2id;\n  constructor(_colorMap) {\n    this._lastColorId = 0;\n    this._id2color = [];\n    this._color2id = /* @__PURE__ */ Object.create(null);\n    if (Array.isArray(_colorMap)) {\n      this._isFrozen = true;\n      for (let i = 0, len = _colorMap.length; i < len; i++) {\n        this._color2id[_colorMap[i]] = i;\n        this._id2color[i] = _colorMap[i];\n      }\n    } else {\n      this._isFrozen = false;\n    }\n  }\n  getId(color) {\n    if (color === null) {\n      return 0;\n    }\n    color = color.toUpperCase();\n    let value = this._color2id[color];\n    if (value) {\n      return value;\n    }\n    if (this._isFrozen) {\n      throw new Error(`Missing color in color map - ${color}`);\n    }\n    value = ++this._lastColorId;\n    this._color2id[color] = value;\n    this._id2color[value] = color;\n    return value;\n  }\n  getColorMap() {\n    return this._id2color.slice(0);\n  }\n};\nvar emptyParentScopes = Object.freeze([]);\nvar ThemeTrieElementRule = class _ThemeTrieElementRule {\n  scopeDepth;\n  parentScopes;\n  fontStyle;\n  foreground;\n  background;\n  constructor(scopeDepth, parentScopes, fontStyle, foreground, background) {\n    this.scopeDepth = scopeDepth;\n    this.parentScopes = parentScopes || emptyParentScopes;\n    this.fontStyle = fontStyle;\n    this.foreground = foreground;\n    this.background = background;\n  }\n  clone() {\n    return new _ThemeTrieElementRule(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);\n  }\n  static cloneArr(arr) {\n    let r = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n      r[i] = arr[i].clone();\n    }\n    return r;\n  }\n  acceptOverwrite(scopeDepth, fontStyle, foreground, background) {\n    if (this.scopeDepth > scopeDepth) {\n      console.log(\"how did this happen?\");\n    } else {\n      this.scopeDepth = scopeDepth;\n    }\n    if (fontStyle !== -1 /* NotSet */) {\n      this.fontStyle = fontStyle;\n    }\n    if (foreground !== 0) {\n      this.foreground = foreground;\n    }\n    if (background !== 0) {\n      this.background = background;\n    }\n  }\n};\nvar ThemeTrieElement = class _ThemeTrieElement {\n  constructor(_mainRule, rulesWithParentScopes = [], _children = {}) {\n    this._mainRule = _mainRule;\n    this._children = _children;\n    this._rulesWithParentScopes = rulesWithParentScopes;\n  }\n  _rulesWithParentScopes;\n  static _cmpBySpecificity(a, b) {\n    if (a.scopeDepth !== b.scopeDepth) {\n      return b.scopeDepth - a.scopeDepth;\n    }\n    let aParentIndex = 0;\n    let bParentIndex = 0;\n    while (true) {\n      if (a.parentScopes[aParentIndex] === \">\") {\n        aParentIndex++;\n      }\n      if (b.parentScopes[bParentIndex] === \">\") {\n        bParentIndex++;\n      }\n      if (aParentIndex >= a.parentScopes.length || bParentIndex >= b.parentScopes.length) {\n        break;\n      }\n      const parentScopeLengthDiff = b.parentScopes[bParentIndex].length - a.parentScopes[aParentIndex].length;\n      if (parentScopeLengthDiff !== 0) {\n        return parentScopeLengthDiff;\n      }\n      aParentIndex++;\n      bParentIndex++;\n    }\n    return b.parentScopes.length - a.parentScopes.length;\n  }\n  match(scope) {\n    if (scope !== \"\") {\n      let dotIndex = scope.indexOf(\".\");\n      let head;\n      let tail;\n      if (dotIndex === -1) {\n        head = scope;\n        tail = \"\";\n      } else {\n        head = scope.substring(0, dotIndex);\n        tail = scope.substring(dotIndex + 1);\n      }\n      if (this._children.hasOwnProperty(head)) {\n        return this._children[head].match(tail);\n      }\n    }\n    const rules = this._rulesWithParentScopes.concat(this._mainRule);\n    rules.sort(_ThemeTrieElement._cmpBySpecificity);\n    return rules;\n  }\n  insert(scopeDepth, scope, parentScopes, fontStyle, foreground, background) {\n    if (scope === \"\") {\n      this._doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background);\n      return;\n    }\n    let dotIndex = scope.indexOf(\".\");\n    let head;\n    let tail;\n    if (dotIndex === -1) {\n      head = scope;\n      tail = \"\";\n    } else {\n      head = scope.substring(0, dotIndex);\n      tail = scope.substring(dotIndex + 1);\n    }\n    let child;\n    if (this._children.hasOwnProperty(head)) {\n      child = this._children[head];\n    } else {\n      child = new _ThemeTrieElement(this._mainRule.clone(), ThemeTrieElementRule.cloneArr(this._rulesWithParentScopes));\n      this._children[head] = child;\n    }\n    child.insert(scopeDepth + 1, tail, parentScopes, fontStyle, foreground, background);\n  }\n  _doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background) {\n    if (parentScopes === null) {\n      this._mainRule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n      return;\n    }\n    for (let i = 0, len = this._rulesWithParentScopes.length; i < len; i++) {\n      let rule = this._rulesWithParentScopes[i];\n      if (strArrCmp(rule.parentScopes, parentScopes) === 0) {\n        rule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n        return;\n      }\n    }\n    if (fontStyle === -1 /* NotSet */) {\n      fontStyle = this._mainRule.fontStyle;\n    }\n    if (foreground === 0) {\n      foreground = this._mainRule.foreground;\n    }\n    if (background === 0) {\n      background = this._mainRule.background;\n    }\n    this._rulesWithParentScopes.push(new ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background));\n  }\n};\n\n// src/encodedTokenAttributes.ts\nvar EncodedTokenMetadata = class _EncodedTokenMetadata {\n  static toBinaryStr(encodedTokenAttributes) {\n    return encodedTokenAttributes.toString(2).padStart(32, \"0\");\n  }\n  static print(encodedTokenAttributes) {\n    const languageId = _EncodedTokenMetadata.getLanguageId(encodedTokenAttributes);\n    const tokenType = _EncodedTokenMetadata.getTokenType(encodedTokenAttributes);\n    const fontStyle = _EncodedTokenMetadata.getFontStyle(encodedTokenAttributes);\n    const foreground = _EncodedTokenMetadata.getForeground(encodedTokenAttributes);\n    const background = _EncodedTokenMetadata.getBackground(encodedTokenAttributes);\n    console.log({\n      languageId,\n      tokenType,\n      fontStyle,\n      foreground,\n      background\n    });\n  }\n  static getLanguageId(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;\n  }\n  static getTokenType(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 768 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;\n  }\n  static containsBalancedBrackets(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 1024 /* BALANCED_BRACKETS_MASK */) !== 0;\n  }\n  static getFontStyle(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 30720 /* FONT_STYLE_MASK */) >>> 11 /* FONT_STYLE_OFFSET */;\n  }\n  static getForeground(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 16744448 /* FOREGROUND_MASK */) >>> 15 /* FOREGROUND_OFFSET */;\n  }\n  static getBackground(encodedTokenAttributes) {\n    return (encodedTokenAttributes & 4278190080 /* BACKGROUND_MASK */) >>> 24 /* BACKGROUND_OFFSET */;\n  }\n  /**\n   * Updates the fields in `metadata`.\n   * A value of `0`, `NotSet` or `null` indicates that the corresponding field should be left as is.\n   */\n  static set(encodedTokenAttributes, languageId, tokenType, containsBalancedBrackets, fontStyle, foreground, background) {\n    let _languageId = _EncodedTokenMetadata.getLanguageId(encodedTokenAttributes);\n    let _tokenType = _EncodedTokenMetadata.getTokenType(encodedTokenAttributes);\n    let _containsBalancedBracketsBit = _EncodedTokenMetadata.containsBalancedBrackets(encodedTokenAttributes) ? 1 : 0;\n    let _fontStyle = _EncodedTokenMetadata.getFontStyle(encodedTokenAttributes);\n    let _foreground = _EncodedTokenMetadata.getForeground(encodedTokenAttributes);\n    let _background = _EncodedTokenMetadata.getBackground(encodedTokenAttributes);\n    if (languageId !== 0) {\n      _languageId = languageId;\n    }\n    if (tokenType !== 8 /* NotSet */) {\n      _tokenType = fromOptionalTokenType(tokenType);\n    }\n    if (containsBalancedBrackets !== null) {\n      _containsBalancedBracketsBit = containsBalancedBrackets ? 1 : 0;\n    }\n    if (fontStyle !== -1 /* NotSet */) {\n      _fontStyle = fontStyle;\n    }\n    if (foreground !== 0) {\n      _foreground = foreground;\n    }\n    if (background !== 0) {\n      _background = background;\n    }\n    return (_languageId << 0 /* LANGUAGEID_OFFSET */ | _tokenType << 8 /* TOKEN_TYPE_OFFSET */ | _containsBalancedBracketsBit << 10 /* BALANCED_BRACKETS_OFFSET */ | _fontStyle << 11 /* FONT_STYLE_OFFSET */ | _foreground << 15 /* FOREGROUND_OFFSET */ | _background << 24 /* BACKGROUND_OFFSET */) >>> 0;\n  }\n};\nfunction toOptionalTokenType(standardType) {\n  return standardType;\n}\nfunction fromOptionalTokenType(standardType) {\n  return standardType;\n}\n\n// src/matcher.ts\nfunction createMatchers(selector, matchesName) {\n  const results = [];\n  const tokenizer = newTokenizer(selector);\n  let token = tokenizer.next();\n  while (token !== null) {\n    let priority = 0;\n    if (token.length === 2 && token.charAt(1) === \":\") {\n      switch (token.charAt(0)) {\n        case \"R\":\n          priority = 1;\n          break;\n        case \"L\":\n          priority = -1;\n          break;\n        default:\n          console.log(`Unknown priority ${token} in scope selector`);\n      }\n      token = tokenizer.next();\n    }\n    let matcher = parseConjunction();\n    results.push({ matcher, priority });\n    if (token !== \",\") {\n      break;\n    }\n    token = tokenizer.next();\n  }\n  return results;\n  function parseOperand() {\n    if (token === \"-\") {\n      token = tokenizer.next();\n      const expressionToNegate = parseOperand();\n      return (matcherInput) => !!expressionToNegate && !expressionToNegate(matcherInput);\n    }\n    if (token === \"(\") {\n      token = tokenizer.next();\n      const expressionInParents = parseInnerExpression();\n      if (token === \")\") {\n        token = tokenizer.next();\n      }\n      return expressionInParents;\n    }\n    if (isIdentifier(token)) {\n      const identifiers = [];\n      do {\n        identifiers.push(token);\n        token = tokenizer.next();\n      } while (isIdentifier(token));\n      return (matcherInput) => matchesName(identifiers, matcherInput);\n    }\n    return null;\n  }\n  function parseConjunction() {\n    const matchers = [];\n    let matcher = parseOperand();\n    while (matcher) {\n      matchers.push(matcher);\n      matcher = parseOperand();\n    }\n    return (matcherInput) => matchers.every((matcher2) => matcher2(matcherInput));\n  }\n  function parseInnerExpression() {\n    const matchers = [];\n    let matcher = parseConjunction();\n    while (matcher) {\n      matchers.push(matcher);\n      if (token === \"|\" || token === \",\") {\n        do {\n          token = tokenizer.next();\n        } while (token === \"|\" || token === \",\");\n      } else {\n        break;\n      }\n      matcher = parseConjunction();\n    }\n    return (matcherInput) => matchers.some((matcher2) => matcher2(matcherInput));\n  }\n}\nfunction isIdentifier(token) {\n  return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n  let regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n  let match = regex.exec(input);\n  return {\n    next: () => {\n      if (!match) {\n        return null;\n      }\n      const res = match[0];\n      match = regex.exec(input);\n      return res;\n    }\n  };\n}\n\n// src/onigLib.ts\nvar FindOption = /* @__PURE__ */ ((FindOption2) => {\n  FindOption2[FindOption2[\"None\"] = 0] = \"None\";\n  FindOption2[FindOption2[\"NotBeginString\"] = 1] = \"NotBeginString\";\n  FindOption2[FindOption2[\"NotEndString\"] = 2] = \"NotEndString\";\n  FindOption2[FindOption2[\"NotBeginPosition\"] = 4] = \"NotBeginPosition\";\n  FindOption2[FindOption2[\"DebugCall\"] = 8] = \"DebugCall\";\n  return FindOption2;\n})(FindOption || {});\nfunction disposeOnigString(str) {\n  if (typeof str.dispose === \"function\") {\n    str.dispose();\n  }\n}\n\n// src/grammar/grammarDependencies.ts\nvar TopLevelRuleReference = class {\n  constructor(scopeName) {\n    this.scopeName = scopeName;\n  }\n  toKey() {\n    return this.scopeName;\n  }\n};\nvar TopLevelRepositoryRuleReference = class {\n  constructor(scopeName, ruleName) {\n    this.scopeName = scopeName;\n    this.ruleName = ruleName;\n  }\n  toKey() {\n    return `${this.scopeName}#${this.ruleName}`;\n  }\n};\nvar ExternalReferenceCollector = class {\n  _references = [];\n  _seenReferenceKeys = /* @__PURE__ */ new Set();\n  get references() {\n    return this._references;\n  }\n  visitedRule = /* @__PURE__ */ new Set();\n  add(reference) {\n    const key = reference.toKey();\n    if (this._seenReferenceKeys.has(key)) {\n      return;\n    }\n    this._seenReferenceKeys.add(key);\n    this._references.push(reference);\n  }\n};\nvar ScopeDependencyProcessor = class {\n  constructor(repo, initialScopeName) {\n    this.repo = repo;\n    this.initialScopeName = initialScopeName;\n    this.seenFullScopeRequests.add(this.initialScopeName);\n    this.Q = [new TopLevelRuleReference(this.initialScopeName)];\n  }\n  seenFullScopeRequests = /* @__PURE__ */ new Set();\n  seenPartialScopeRequests = /* @__PURE__ */ new Set();\n  Q;\n  processQueue() {\n    const q = this.Q;\n    this.Q = [];\n    const deps = new ExternalReferenceCollector();\n    for (const dep of q) {\n      collectReferencesOfReference(dep, this.initialScopeName, this.repo, deps);\n    }\n    for (const dep of deps.references) {\n      if (dep instanceof TopLevelRuleReference) {\n        if (this.seenFullScopeRequests.has(dep.scopeName)) {\n          continue;\n        }\n        this.seenFullScopeRequests.add(dep.scopeName);\n        this.Q.push(dep);\n      } else {\n        if (this.seenFullScopeRequests.has(dep.scopeName)) {\n          continue;\n        }\n        if (this.seenPartialScopeRequests.has(dep.toKey())) {\n          continue;\n        }\n        this.seenPartialScopeRequests.add(dep.toKey());\n        this.Q.push(dep);\n      }\n    }\n  }\n};\nfunction collectReferencesOfReference(reference, baseGrammarScopeName, repo, result) {\n  const selfGrammar = repo.lookup(reference.scopeName);\n  if (!selfGrammar) {\n    if (reference.scopeName === baseGrammarScopeName) {\n      throw new Error(`No grammar provided for <${baseGrammarScopeName}>`);\n    }\n    return;\n  }\n  const baseGrammar = repo.lookup(baseGrammarScopeName);\n  if (reference instanceof TopLevelRuleReference) {\n    collectExternalReferencesInTopLevelRule({ baseGrammar, selfGrammar }, result);\n  } else {\n    collectExternalReferencesInTopLevelRepositoryRule(\n      reference.ruleName,\n      { baseGrammar, selfGrammar, repository: selfGrammar.repository },\n      result\n    );\n  }\n  const injections = repo.injections(reference.scopeName);\n  if (injections) {\n    for (const injection of injections) {\n      result.add(new TopLevelRuleReference(injection));\n    }\n  }\n}\nfunction collectExternalReferencesInTopLevelRepositoryRule(ruleName, context, result) {\n  if (context.repository && context.repository[ruleName]) {\n    const rule = context.repository[ruleName];\n    collectExternalReferencesInRules([rule], context, result);\n  }\n}\nfunction collectExternalReferencesInTopLevelRule(context, result) {\n  if (context.selfGrammar.patterns && Array.isArray(context.selfGrammar.patterns)) {\n    collectExternalReferencesInRules(\n      context.selfGrammar.patterns,\n      { ...context, repository: context.selfGrammar.repository },\n      result\n    );\n  }\n  if (context.selfGrammar.injections) {\n    collectExternalReferencesInRules(\n      Object.values(context.selfGrammar.injections),\n      { ...context, repository: context.selfGrammar.repository },\n      result\n    );\n  }\n}\nfunction collectExternalReferencesInRules(rules, context, result) {\n  for (const rule of rules) {\n    if (result.visitedRule.has(rule)) {\n      continue;\n    }\n    result.visitedRule.add(rule);\n    const patternRepository = rule.repository ? mergeObjects({}, context.repository, rule.repository) : context.repository;\n    if (Array.isArray(rule.patterns)) {\n      collectExternalReferencesInRules(rule.patterns, { ...context, repository: patternRepository }, result);\n    }\n    const include = rule.include;\n    if (!include) {\n      continue;\n    }\n    const reference = parseInclude(include);\n    switch (reference.kind) {\n      case 0 /* Base */:\n        collectExternalReferencesInTopLevelRule({ ...context, selfGrammar: context.baseGrammar }, result);\n        break;\n      case 1 /* Self */:\n        collectExternalReferencesInTopLevelRule(context, result);\n        break;\n      case 2 /* RelativeReference */:\n        collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { ...context, repository: patternRepository }, result);\n        break;\n      case 3 /* TopLevelReference */:\n      case 4 /* TopLevelRepositoryReference */:\n        const selfGrammar = reference.scopeName === context.selfGrammar.scopeName ? context.selfGrammar : reference.scopeName === context.baseGrammar.scopeName ? context.baseGrammar : void 0;\n        if (selfGrammar) {\n          const newContext = { baseGrammar: context.baseGrammar, selfGrammar, repository: patternRepository };\n          if (reference.kind === 4 /* TopLevelRepositoryReference */) {\n            collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, newContext, result);\n          } else {\n            collectExternalReferencesInTopLevelRule(newContext, result);\n          }\n        } else {\n          if (reference.kind === 4 /* TopLevelRepositoryReference */) {\n            result.add(new TopLevelRepositoryRuleReference(reference.scopeName, reference.ruleName));\n          } else {\n            result.add(new TopLevelRuleReference(reference.scopeName));\n          }\n        }\n        break;\n    }\n  }\n}\nvar BaseReference = class {\n  kind = 0 /* Base */;\n};\nvar SelfReference = class {\n  kind = 1 /* Self */;\n};\nvar RelativeReference = class {\n  constructor(ruleName) {\n    this.ruleName = ruleName;\n  }\n  kind = 2 /* RelativeReference */;\n};\nvar TopLevelReference = class {\n  constructor(scopeName) {\n    this.scopeName = scopeName;\n  }\n  kind = 3 /* TopLevelReference */;\n};\nvar TopLevelRepositoryReference = class {\n  constructor(scopeName, ruleName) {\n    this.scopeName = scopeName;\n    this.ruleName = ruleName;\n  }\n  kind = 4 /* TopLevelRepositoryReference */;\n};\nfunction parseInclude(include) {\n  if (include === \"$base\") {\n    return new BaseReference();\n  } else if (include === \"$self\") {\n    return new SelfReference();\n  }\n  const indexOfSharp = include.indexOf(\"#\");\n  if (indexOfSharp === -1) {\n    return new TopLevelReference(include);\n  } else if (indexOfSharp === 0) {\n    return new RelativeReference(include.substring(1));\n  } else {\n    const scopeName = include.substring(0, indexOfSharp);\n    const ruleName = include.substring(indexOfSharp + 1);\n    return new TopLevelRepositoryReference(scopeName, ruleName);\n  }\n}\n\n// src/rule.ts\nvar HAS_BACK_REFERENCES = /\\\\(\\d+)/;\nvar BACK_REFERENCING_END = /\\\\(\\d+)/g;\nvar ruleIdSymbol = Symbol(\"RuleId\");\nvar endRuleId = -1;\nvar whileRuleId = -2;\nfunction ruleIdFromNumber(id) {\n  return id;\n}\nfunction ruleIdToNumber(id) {\n  return id;\n}\nvar Rule = class {\n  $location;\n  id;\n  _nameIsCapturing;\n  _name;\n  _contentNameIsCapturing;\n  _contentName;\n  constructor($location, id, name, contentName) {\n    this.$location = $location;\n    this.id = id;\n    this._name = name || null;\n    this._nameIsCapturing = RegexSource.hasCaptures(this._name);\n    this._contentName = contentName || null;\n    this._contentNameIsCapturing = RegexSource.hasCaptures(this._contentName);\n  }\n  get debugName() {\n    const location = this.$location ? `${basename(this.$location.filename)}:${this.$location.line}` : \"unknown\";\n    return `${this.constructor.name}#${this.id} @ ${location}`;\n  }\n  getName(lineText, captureIndices) {\n    if (!this._nameIsCapturing || this._name === null || lineText === null || captureIndices === null) {\n      return this._name;\n    }\n    return RegexSource.replaceCaptures(this._name, lineText, captureIndices);\n  }\n  getContentName(lineText, captureIndices) {\n    if (!this._contentNameIsCapturing || this._contentName === null) {\n      return this._contentName;\n    }\n    return RegexSource.replaceCaptures(this._contentName, lineText, captureIndices);\n  }\n};\nvar CaptureRule = class extends Rule {\n  retokenizeCapturedWithRuleId;\n  constructor($location, id, name, contentName, retokenizeCapturedWithRuleId) {\n    super($location, id, name, contentName);\n    this.retokenizeCapturedWithRuleId = retokenizeCapturedWithRuleId;\n  }\n  dispose() {\n  }\n  collectPatterns(grammar, out) {\n    throw new Error(\"Not supported!\");\n  }\n  compile(grammar, endRegexSource) {\n    throw new Error(\"Not supported!\");\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    throw new Error(\"Not supported!\");\n  }\n};\nvar MatchRule = class extends Rule {\n  _match;\n  captures;\n  _cachedCompiledPatterns;\n  constructor($location, id, name, match, captures) {\n    super($location, id, name, null);\n    this._match = new RegExpSource(match, this.id);\n    this.captures = captures;\n    this._cachedCompiledPatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n  }\n  get debugMatchRegExp() {\n    return `${this._match.source}`;\n  }\n  collectPatterns(grammar, out) {\n    out.push(this._match);\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      this.collectPatterns(grammar, this._cachedCompiledPatterns);\n    }\n    return this._cachedCompiledPatterns;\n  }\n};\nvar IncludeOnlyRule = class extends Rule {\n  hasMissingPatterns;\n  patterns;\n  _cachedCompiledPatterns;\n  constructor($location, id, name, contentName, patterns) {\n    super($location, id, name, contentName);\n    this.patterns = patterns.patterns;\n    this.hasMissingPatterns = patterns.hasMissingPatterns;\n    this._cachedCompiledPatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n  }\n  collectPatterns(grammar, out) {\n    for (const pattern of this.patterns) {\n      const rule = grammar.getRule(pattern);\n      rule.collectPatterns(grammar, out);\n    }\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      this.collectPatterns(grammar, this._cachedCompiledPatterns);\n    }\n    return this._cachedCompiledPatterns;\n  }\n};\nvar BeginEndRule = class extends Rule {\n  _begin;\n  beginCaptures;\n  _end;\n  endHasBackReferences;\n  endCaptures;\n  applyEndPatternLast;\n  hasMissingPatterns;\n  patterns;\n  _cachedCompiledPatterns;\n  constructor($location, id, name, contentName, begin, beginCaptures, end, endCaptures, applyEndPatternLast, patterns) {\n    super($location, id, name, contentName);\n    this._begin = new RegExpSource(begin, this.id);\n    this.beginCaptures = beginCaptures;\n    this._end = new RegExpSource(end ? end : \"\\uFFFF\", -1);\n    this.endHasBackReferences = this._end.hasBackReferences;\n    this.endCaptures = endCaptures;\n    this.applyEndPatternLast = applyEndPatternLast || false;\n    this.patterns = patterns.patterns;\n    this.hasMissingPatterns = patterns.hasMissingPatterns;\n    this._cachedCompiledPatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n  }\n  get debugBeginRegExp() {\n    return `${this._begin.source}`;\n  }\n  get debugEndRegExp() {\n    return `${this._end.source}`;\n  }\n  getEndWithResolvedBackReferences(lineText, captureIndices) {\n    return this._end.resolveBackReferences(lineText, captureIndices);\n  }\n  collectPatterns(grammar, out) {\n    out.push(this._begin);\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar, endRegexSource).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar, endRegexSource) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      for (const pattern of this.patterns) {\n        const rule = grammar.getRule(pattern);\n        rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n      }\n      if (this.applyEndPatternLast) {\n        this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end);\n      } else {\n        this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);\n      }\n    }\n    if (this._end.hasBackReferences) {\n      if (this.applyEndPatternLast) {\n        this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, endRegexSource);\n      } else {\n        this._cachedCompiledPatterns.setSource(0, endRegexSource);\n      }\n    }\n    return this._cachedCompiledPatterns;\n  }\n};\nvar BeginWhileRule = class extends Rule {\n  _begin;\n  beginCaptures;\n  whileCaptures;\n  _while;\n  whileHasBackReferences;\n  hasMissingPatterns;\n  patterns;\n  _cachedCompiledPatterns;\n  _cachedCompiledWhilePatterns;\n  constructor($location, id, name, contentName, begin, beginCaptures, _while, whileCaptures, patterns) {\n    super($location, id, name, contentName);\n    this._begin = new RegExpSource(begin, this.id);\n    this.beginCaptures = beginCaptures;\n    this.whileCaptures = whileCaptures;\n    this._while = new RegExpSource(_while, whileRuleId);\n    this.whileHasBackReferences = this._while.hasBackReferences;\n    this.patterns = patterns.patterns;\n    this.hasMissingPatterns = patterns.hasMissingPatterns;\n    this._cachedCompiledPatterns = null;\n    this._cachedCompiledWhilePatterns = null;\n  }\n  dispose() {\n    if (this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns.dispose();\n      this._cachedCompiledPatterns = null;\n    }\n    if (this._cachedCompiledWhilePatterns) {\n      this._cachedCompiledWhilePatterns.dispose();\n      this._cachedCompiledWhilePatterns = null;\n    }\n  }\n  get debugBeginRegExp() {\n    return `${this._begin.source}`;\n  }\n  get debugWhileRegExp() {\n    return `${this._while.source}`;\n  }\n  getWhileWithResolvedBackReferences(lineText, captureIndices) {\n    return this._while.resolveBackReferences(lineText, captureIndices);\n  }\n  collectPatterns(grammar, out) {\n    out.push(this._begin);\n  }\n  compile(grammar, endRegexSource) {\n    return this._getCachedCompiledPatterns(grammar).compile(grammar);\n  }\n  compileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledPatterns(grammar) {\n    if (!this._cachedCompiledPatterns) {\n      this._cachedCompiledPatterns = new RegExpSourceList();\n      for (const pattern of this.patterns) {\n        const rule = grammar.getRule(pattern);\n        rule.collectPatterns(grammar, this._cachedCompiledPatterns);\n      }\n    }\n    return this._cachedCompiledPatterns;\n  }\n  compileWhile(grammar, endRegexSource) {\n    return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compile(grammar);\n  }\n  compileWhileAG(grammar, endRegexSource, allowA, allowG) {\n    return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n  }\n  _getCachedCompiledWhilePatterns(grammar, endRegexSource) {\n    if (!this._cachedCompiledWhilePatterns) {\n      this._cachedCompiledWhilePatterns = new RegExpSourceList();\n      this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while);\n    }\n    if (this._while.hasBackReferences) {\n      this._cachedCompiledWhilePatterns.setSource(0, endRegexSource ? endRegexSource : \"\\uFFFF\");\n    }\n    return this._cachedCompiledWhilePatterns;\n  }\n};\nvar RuleFactory = class _RuleFactory {\n  static createCaptureRule(helper, $location, name, contentName, retokenizeCapturedWithRuleId) {\n    return helper.registerRule((id) => {\n      return new CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId);\n    });\n  }\n  static getCompiledRuleId(desc, helper, repository) {\n    if (!desc.id) {\n      helper.registerRule((id) => {\n        desc.id = id;\n        if (desc.match) {\n          return new MatchRule(\n            desc.$vscodeTextmateLocation,\n            desc.id,\n            desc.name,\n            desc.match,\n            _RuleFactory._compileCaptures(desc.captures, helper, repository)\n          );\n        }\n        if (typeof desc.begin === \"undefined\") {\n          if (desc.repository) {\n            repository = mergeObjects({}, repository, desc.repository);\n          }\n          let patterns = desc.patterns;\n          if (typeof patterns === \"undefined\" && desc.include) {\n            patterns = [{ include: desc.include }];\n          }\n          return new IncludeOnlyRule(\n            desc.$vscodeTextmateLocation,\n            desc.id,\n            desc.name,\n            desc.contentName,\n            _RuleFactory._compilePatterns(patterns, helper, repository)\n          );\n        }\n        if (desc.while) {\n          return new BeginWhileRule(\n            desc.$vscodeTextmateLocation,\n            desc.id,\n            desc.name,\n            desc.contentName,\n            desc.begin,\n            _RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository),\n            desc.while,\n            _RuleFactory._compileCaptures(desc.whileCaptures || desc.captures, helper, repository),\n            _RuleFactory._compilePatterns(desc.patterns, helper, repository)\n          );\n        }\n        return new BeginEndRule(\n          desc.$vscodeTextmateLocation,\n          desc.id,\n          desc.name,\n          desc.contentName,\n          desc.begin,\n          _RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository),\n          desc.end,\n          _RuleFactory._compileCaptures(desc.endCaptures || desc.captures, helper, repository),\n          desc.applyEndPatternLast,\n          _RuleFactory._compilePatterns(desc.patterns, helper, repository)\n        );\n      });\n    }\n    return desc.id;\n  }\n  static _compileCaptures(captures, helper, repository) {\n    let r = [];\n    if (captures) {\n      let maximumCaptureId = 0;\n      for (const captureId in captures) {\n        if (captureId === \"$vscodeTextmateLocation\") {\n          continue;\n        }\n        const numericCaptureId = parseInt(captureId, 10);\n        if (numericCaptureId > maximumCaptureId) {\n          maximumCaptureId = numericCaptureId;\n        }\n      }\n      for (let i = 0; i <= maximumCaptureId; i++) {\n        r[i] = null;\n      }\n      for (const captureId in captures) {\n        if (captureId === \"$vscodeTextmateLocation\") {\n          continue;\n        }\n        const numericCaptureId = parseInt(captureId, 10);\n        let retokenizeCapturedWithRuleId = 0;\n        if (captures[captureId].patterns) {\n          retokenizeCapturedWithRuleId = _RuleFactory.getCompiledRuleId(captures[captureId], helper, repository);\n        }\n        r[numericCaptureId] = _RuleFactory.createCaptureRule(helper, captures[captureId].$vscodeTextmateLocation, captures[captureId].name, captures[captureId].contentName, retokenizeCapturedWithRuleId);\n      }\n    }\n    return r;\n  }\n  static _compilePatterns(patterns, helper, repository) {\n    let r = [];\n    if (patterns) {\n      for (let i = 0, len = patterns.length; i < len; i++) {\n        const pattern = patterns[i];\n        let ruleId = -1;\n        if (pattern.include) {\n          const reference = parseInclude(pattern.include);\n          switch (reference.kind) {\n            case 0 /* Base */:\n            case 1 /* Self */:\n              ruleId = _RuleFactory.getCompiledRuleId(repository[pattern.include], helper, repository);\n              break;\n            case 2 /* RelativeReference */:\n              let localIncludedRule = repository[reference.ruleName];\n              if (localIncludedRule) {\n                ruleId = _RuleFactory.getCompiledRuleId(localIncludedRule, helper, repository);\n              } else {\n              }\n              break;\n            case 3 /* TopLevelReference */:\n            case 4 /* TopLevelRepositoryReference */:\n              const externalGrammarName = reference.scopeName;\n              const externalGrammarInclude = reference.kind === 4 /* TopLevelRepositoryReference */ ? reference.ruleName : null;\n              const externalGrammar = helper.getExternalGrammar(externalGrammarName, repository);\n              if (externalGrammar) {\n                if (externalGrammarInclude) {\n                  let externalIncludedRule = externalGrammar.repository[externalGrammarInclude];\n                  if (externalIncludedRule) {\n                    ruleId = _RuleFactory.getCompiledRuleId(externalIncludedRule, helper, externalGrammar.repository);\n                  } else {\n                  }\n                } else {\n                  ruleId = _RuleFactory.getCompiledRuleId(externalGrammar.repository.$self, helper, externalGrammar.repository);\n                }\n              } else {\n              }\n              break;\n          }\n        } else {\n          ruleId = _RuleFactory.getCompiledRuleId(pattern, helper, repository);\n        }\n        if (ruleId !== -1) {\n          const rule = helper.getRule(ruleId);\n          let skipRule = false;\n          if (rule instanceof IncludeOnlyRule || rule instanceof BeginEndRule || rule instanceof BeginWhileRule) {\n            if (rule.hasMissingPatterns && rule.patterns.length === 0) {\n              skipRule = true;\n            }\n          }\n          if (skipRule) {\n            continue;\n          }\n          r.push(ruleId);\n        }\n      }\n    }\n    return {\n      patterns: r,\n      hasMissingPatterns: (patterns ? patterns.length : 0) !== r.length\n    };\n  }\n};\nvar RegExpSource = class _RegExpSource {\n  source;\n  ruleId;\n  hasAnchor;\n  hasBackReferences;\n  _anchorCache;\n  constructor(regExpSource, ruleId) {\n    if (regExpSource && typeof regExpSource === \"string\") {\n      const len = regExpSource.length;\n      let lastPushedPos = 0;\n      let output = [];\n      let hasAnchor = false;\n      for (let pos = 0; pos < len; pos++) {\n        const ch = regExpSource.charAt(pos);\n        if (ch === \"\\\\\") {\n          if (pos + 1 < len) {\n            const nextCh = regExpSource.charAt(pos + 1);\n            if (nextCh === \"z\") {\n              output.push(regExpSource.substring(lastPushedPos, pos));\n              output.push(\"$(?!\\\\n)(?<!\\\\n)\");\n              lastPushedPos = pos + 2;\n            } else if (nextCh === \"A\" || nextCh === \"G\") {\n              hasAnchor = true;\n            }\n            pos++;\n          }\n        }\n      }\n      this.hasAnchor = hasAnchor;\n      if (lastPushedPos === 0) {\n        this.source = regExpSource;\n      } else {\n        output.push(regExpSource.substring(lastPushedPos, len));\n        this.source = output.join(\"\");\n      }\n    } else {\n      this.hasAnchor = false;\n      this.source = regExpSource;\n    }\n    if (this.hasAnchor) {\n      this._anchorCache = this._buildAnchorCache();\n    } else {\n      this._anchorCache = null;\n    }\n    this.ruleId = ruleId;\n    if (typeof this.source === \"string\") {\n      this.hasBackReferences = HAS_BACK_REFERENCES.test(this.source);\n    } else {\n      this.hasBackReferences = false;\n    }\n  }\n  clone() {\n    return new _RegExpSource(this.source, this.ruleId);\n  }\n  setSource(newSource) {\n    if (this.source === newSource) {\n      return;\n    }\n    this.source = newSource;\n    if (this.hasAnchor) {\n      this._anchorCache = this._buildAnchorCache();\n    }\n  }\n  resolveBackReferences(lineText, captureIndices) {\n    if (typeof this.source !== \"string\") {\n      throw new Error(\"This method should only be called if the source is a string\");\n    }\n    let capturedValues = captureIndices.map((capture) => {\n      return lineText.substring(capture.start, capture.end);\n    });\n    BACK_REFERENCING_END.lastIndex = 0;\n    return this.source.replace(BACK_REFERENCING_END, (match, g1) => {\n      return escapeRegExpCharacters(capturedValues[parseInt(g1, 10)] || \"\");\n    });\n  }\n  _buildAnchorCache() {\n    if (typeof this.source !== \"string\") {\n      throw new Error(\"This method should only be called if the source is a string\");\n    }\n    let A0_G0_result = [];\n    let A0_G1_result = [];\n    let A1_G0_result = [];\n    let A1_G1_result = [];\n    let pos, len, ch, nextCh;\n    for (pos = 0, len = this.source.length; pos < len; pos++) {\n      ch = this.source.charAt(pos);\n      A0_G0_result[pos] = ch;\n      A0_G1_result[pos] = ch;\n      A1_G0_result[pos] = ch;\n      A1_G1_result[pos] = ch;\n      if (ch === \"\\\\\") {\n        if (pos + 1 < len) {\n          nextCh = this.source.charAt(pos + 1);\n          if (nextCh === \"A\") {\n            A0_G0_result[pos + 1] = \"\\uFFFF\";\n            A0_G1_result[pos + 1] = \"\\uFFFF\";\n            A1_G0_result[pos + 1] = \"A\";\n            A1_G1_result[pos + 1] = \"A\";\n          } else if (nextCh === \"G\") {\n            A0_G0_result[pos + 1] = \"\\uFFFF\";\n            A0_G1_result[pos + 1] = \"G\";\n            A1_G0_result[pos + 1] = \"\\uFFFF\";\n            A1_G1_result[pos + 1] = \"G\";\n          } else {\n            A0_G0_result[pos + 1] = nextCh;\n            A0_G1_result[pos + 1] = nextCh;\n            A1_G0_result[pos + 1] = nextCh;\n            A1_G1_result[pos + 1] = nextCh;\n          }\n          pos++;\n        }\n      }\n    }\n    return {\n      A0_G0: A0_G0_result.join(\"\"),\n      A0_G1: A0_G1_result.join(\"\"),\n      A1_G0: A1_G0_result.join(\"\"),\n      A1_G1: A1_G1_result.join(\"\")\n    };\n  }\n  resolveAnchors(allowA, allowG) {\n    if (!this.hasAnchor || !this._anchorCache || typeof this.source !== \"string\") {\n      return this.source;\n    }\n    if (allowA) {\n      if (allowG) {\n        return this._anchorCache.A1_G1;\n      } else {\n        return this._anchorCache.A1_G0;\n      }\n    } else {\n      if (allowG) {\n        return this._anchorCache.A0_G1;\n      } else {\n        return this._anchorCache.A0_G0;\n      }\n    }\n  }\n};\nvar RegExpSourceList = class {\n  _items;\n  _hasAnchors;\n  _cached;\n  _anchorCache;\n  constructor() {\n    this._items = [];\n    this._hasAnchors = false;\n    this._cached = null;\n    this._anchorCache = {\n      A0_G0: null,\n      A0_G1: null,\n      A1_G0: null,\n      A1_G1: null\n    };\n  }\n  dispose() {\n    this._disposeCaches();\n  }\n  _disposeCaches() {\n    if (this._cached) {\n      this._cached.dispose();\n      this._cached = null;\n    }\n    if (this._anchorCache.A0_G0) {\n      this._anchorCache.A0_G0.dispose();\n      this._anchorCache.A0_G0 = null;\n    }\n    if (this._anchorCache.A0_G1) {\n      this._anchorCache.A0_G1.dispose();\n      this._anchorCache.A0_G1 = null;\n    }\n    if (this._anchorCache.A1_G0) {\n      this._anchorCache.A1_G0.dispose();\n      this._anchorCache.A1_G0 = null;\n    }\n    if (this._anchorCache.A1_G1) {\n      this._anchorCache.A1_G1.dispose();\n      this._anchorCache.A1_G1 = null;\n    }\n  }\n  push(item) {\n    this._items.push(item);\n    this._hasAnchors = this._hasAnchors || item.hasAnchor;\n  }\n  unshift(item) {\n    this._items.unshift(item);\n    this._hasAnchors = this._hasAnchors || item.hasAnchor;\n  }\n  length() {\n    return this._items.length;\n  }\n  setSource(index, newSource) {\n    if (this._items[index].source !== newSource) {\n      this._disposeCaches();\n      this._items[index].setSource(newSource);\n    }\n  }\n  compile(onigLib) {\n    if (!this._cached) {\n      let regExps = this._items.map((e) => e.source);\n      this._cached = new CompiledRule(onigLib, regExps, this._items.map((e) => e.ruleId));\n    }\n    return this._cached;\n  }\n  compileAG(onigLib, allowA, allowG) {\n    if (!this._hasAnchors) {\n      return this.compile(onigLib);\n    } else {\n      if (allowA) {\n        if (allowG) {\n          if (!this._anchorCache.A1_G1) {\n            this._anchorCache.A1_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A1_G1;\n        } else {\n          if (!this._anchorCache.A1_G0) {\n            this._anchorCache.A1_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A1_G0;\n        }\n      } else {\n        if (allowG) {\n          if (!this._anchorCache.A0_G1) {\n            this._anchorCache.A0_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A0_G1;\n        } else {\n          if (!this._anchorCache.A0_G0) {\n            this._anchorCache.A0_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n          }\n          return this._anchorCache.A0_G0;\n        }\n      }\n    }\n  }\n  _resolveAnchors(onigLib, allowA, allowG) {\n    let regExps = this._items.map((e) => e.resolveAnchors(allowA, allowG));\n    return new CompiledRule(onigLib, regExps, this._items.map((e) => e.ruleId));\n  }\n};\nvar CompiledRule = class {\n  constructor(onigLib, regExps, rules) {\n    this.regExps = regExps;\n    this.rules = rules;\n    this.scanner = onigLib.createOnigScanner(regExps);\n  }\n  scanner;\n  dispose() {\n    if (typeof this.scanner.dispose === \"function\") {\n      this.scanner.dispose();\n    }\n  }\n  toString() {\n    const r = [];\n    for (let i = 0, len = this.rules.length; i < len; i++) {\n      r.push(\"   - \" + this.rules[i] + \": \" + this.regExps[i]);\n    }\n    return r.join(\"\\n\");\n  }\n  findNextMatchSync(string, startPosition, options) {\n    const result = this.scanner.findNextMatchSync(string, startPosition, options);\n    if (!result) {\n      return null;\n    }\n    return {\n      ruleId: this.rules[result.index],\n      captureIndices: result.captureIndices\n    };\n  }\n};\n\n// src/grammar/basicScopesAttributeProvider.ts\nvar BasicScopeAttributes = class {\n  constructor(languageId, tokenType) {\n    this.languageId = languageId;\n    this.tokenType = tokenType;\n  }\n};\nvar BasicScopeAttributesProvider = class _BasicScopeAttributesProvider {\n  _defaultAttributes;\n  _embeddedLanguagesMatcher;\n  constructor(initialLanguageId, embeddedLanguages) {\n    this._defaultAttributes = new BasicScopeAttributes(initialLanguageId, 8 /* NotSet */);\n    this._embeddedLanguagesMatcher = new ScopeMatcher(Object.entries(embeddedLanguages || {}));\n  }\n  getDefaultAttributes() {\n    return this._defaultAttributes;\n  }\n  getBasicScopeAttributes(scopeName) {\n    if (scopeName === null) {\n      return _BasicScopeAttributesProvider._NULL_SCOPE_METADATA;\n    }\n    return this._getBasicScopeAttributes.get(scopeName);\n  }\n  static _NULL_SCOPE_METADATA = new BasicScopeAttributes(0, 0);\n  _getBasicScopeAttributes = new CachedFn((scopeName) => {\n    const languageId = this._scopeToLanguage(scopeName);\n    const standardTokenType = this._toStandardTokenType(scopeName);\n    return new BasicScopeAttributes(languageId, standardTokenType);\n  });\n  /**\n   * Given a produced TM scope, return the language that token describes or null if unknown.\n   * e.g. source.html => html, source.css.embedded.html => css, punctuation.definition.tag.html => null\n   */\n  _scopeToLanguage(scope) {\n    return this._embeddedLanguagesMatcher.match(scope) || 0;\n  }\n  _toStandardTokenType(scopeName) {\n    const m = scopeName.match(_BasicScopeAttributesProvider.STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n      return 8 /* NotSet */;\n    }\n    switch (m[1]) {\n      case \"comment\":\n        return 1 /* Comment */;\n      case \"string\":\n        return 2 /* String */;\n      case \"regex\":\n        return 3 /* RegEx */;\n      case \"meta.embedded\":\n        return 0 /* Other */;\n    }\n    throw new Error(\"Unexpected match for standard token type!\");\n  }\n  static STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|meta\\.embedded)\\b/;\n};\nvar ScopeMatcher = class {\n  values;\n  scopesRegExp;\n  constructor(values) {\n    if (values.length === 0) {\n      this.values = null;\n      this.scopesRegExp = null;\n    } else {\n      this.values = new Map(values);\n      const escapedScopes = values.map(\n        ([scopeName, value]) => escapeRegExpCharacters(scopeName)\n      );\n      escapedScopes.sort();\n      escapedScopes.reverse();\n      this.scopesRegExp = new RegExp(\n        `^((${escapedScopes.join(\")|(\")}))($|\\\\.)`,\n        \"\"\n      );\n    }\n  }\n  match(scope) {\n    if (!this.scopesRegExp) {\n      return void 0;\n    }\n    const m = scope.match(this.scopesRegExp);\n    if (!m) {\n      return void 0;\n    }\n    return this.values.get(m[1]);\n  }\n};\n\n// src/debug.ts\nvar DebugFlags = {\n  InDebugMode: typeof process !== \"undefined\" && !!process.env[\"VSCODE_TEXTMATE_DEBUG\"]\n};\nvar UseOnigurumaFindOptions = false;\n\n// src/grammar/tokenizeString.ts\nvar TokenizeStringResult = class {\n  constructor(stack, stoppedEarly) {\n    this.stack = stack;\n    this.stoppedEarly = stoppedEarly;\n  }\n};\nfunction _tokenizeString(grammar, lineText, isFirstLine, linePos, stack, lineTokens, checkWhileConditions, timeLimit) {\n  const lineLength = lineText.content.length;\n  let STOP = false;\n  let anchorPosition = -1;\n  if (checkWhileConditions) {\n    const whileCheckResult = _checkWhileConditions(\n      grammar,\n      lineText,\n      isFirstLine,\n      linePos,\n      stack,\n      lineTokens\n    );\n    stack = whileCheckResult.stack;\n    linePos = whileCheckResult.linePos;\n    isFirstLine = whileCheckResult.isFirstLine;\n    anchorPosition = whileCheckResult.anchorPosition;\n  }\n  const startTime = Date.now();\n  while (!STOP) {\n    if (timeLimit !== 0) {\n      const elapsedTime = Date.now() - startTime;\n      if (elapsedTime > timeLimit) {\n        return new TokenizeStringResult(stack, true);\n      }\n    }\n    scanNext();\n  }\n  return new TokenizeStringResult(stack, false);\n  function scanNext() {\n    if (false) {}\n    const r = matchRuleOrInjections(\n      grammar,\n      lineText,\n      isFirstLine,\n      linePos,\n      stack,\n      anchorPosition\n    );\n    if (!r) {\n      lineTokens.produce(stack, lineLength);\n      STOP = true;\n      return;\n    }\n    const captureIndices = r.captureIndices;\n    const matchedRuleId = r.matchedRuleId;\n    const hasAdvanced = captureIndices && captureIndices.length > 0 ? captureIndices[0].end > linePos : false;\n    if (matchedRuleId === endRuleId) {\n      const poppedRule = stack.getRule(grammar);\n      if (false) {}\n      lineTokens.produce(stack, captureIndices[0].start);\n      stack = stack.withContentNameScopesList(stack.nameScopesList);\n      handleCaptures(\n        grammar,\n        lineText,\n        isFirstLine,\n        stack,\n        lineTokens,\n        poppedRule.endCaptures,\n        captureIndices\n      );\n      lineTokens.produce(stack, captureIndices[0].end);\n      const popped = stack;\n      stack = stack.parent;\n      anchorPosition = popped.getAnchorPos();\n      if (!hasAdvanced && popped.getEnterPos() === linePos) {\n        if (false) {}\n        stack = popped;\n        lineTokens.produce(stack, lineLength);\n        STOP = true;\n        return;\n      }\n    } else {\n      const _rule = grammar.getRule(matchedRuleId);\n      lineTokens.produce(stack, captureIndices[0].start);\n      const beforePush = stack;\n      const scopeName = _rule.getName(lineText.content, captureIndices);\n      const nameScopesList = stack.contentNameScopesList.pushAttributed(\n        scopeName,\n        grammar\n      );\n      stack = stack.push(\n        matchedRuleId,\n        linePos,\n        anchorPosition,\n        captureIndices[0].end === lineLength,\n        null,\n        nameScopesList,\n        nameScopesList\n      );\n      if (_rule instanceof BeginEndRule) {\n        const pushedRule = _rule;\n        if (false) {}\n        handleCaptures(\n          grammar,\n          lineText,\n          isFirstLine,\n          stack,\n          lineTokens,\n          pushedRule.beginCaptures,\n          captureIndices\n        );\n        lineTokens.produce(stack, captureIndices[0].end);\n        anchorPosition = captureIndices[0].end;\n        const contentName = pushedRule.getContentName(\n          lineText.content,\n          captureIndices\n        );\n        const contentNameScopesList = nameScopesList.pushAttributed(\n          contentName,\n          grammar\n        );\n        stack = stack.withContentNameScopesList(contentNameScopesList);\n        if (pushedRule.endHasBackReferences) {\n          stack = stack.withEndRule(\n            pushedRule.getEndWithResolvedBackReferences(\n              lineText.content,\n              captureIndices\n            )\n          );\n        }\n        if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n          if (false) {}\n          stack = stack.pop();\n          lineTokens.produce(stack, lineLength);\n          STOP = true;\n          return;\n        }\n      } else if (_rule instanceof BeginWhileRule) {\n        const pushedRule = _rule;\n        if (false) {}\n        handleCaptures(\n          grammar,\n          lineText,\n          isFirstLine,\n          stack,\n          lineTokens,\n          pushedRule.beginCaptures,\n          captureIndices\n        );\n        lineTokens.produce(stack, captureIndices[0].end);\n        anchorPosition = captureIndices[0].end;\n        const contentName = pushedRule.getContentName(\n          lineText.content,\n          captureIndices\n        );\n        const contentNameScopesList = nameScopesList.pushAttributed(\n          contentName,\n          grammar\n        );\n        stack = stack.withContentNameScopesList(contentNameScopesList);\n        if (pushedRule.whileHasBackReferences) {\n          stack = stack.withEndRule(\n            pushedRule.getWhileWithResolvedBackReferences(\n              lineText.content,\n              captureIndices\n            )\n          );\n        }\n        if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n          if (false) {}\n          stack = stack.pop();\n          lineTokens.produce(stack, lineLength);\n          STOP = true;\n          return;\n        }\n      } else {\n        const matchingRule = _rule;\n        if (false) {}\n        handleCaptures(\n          grammar,\n          lineText,\n          isFirstLine,\n          stack,\n          lineTokens,\n          matchingRule.captures,\n          captureIndices\n        );\n        lineTokens.produce(stack, captureIndices[0].end);\n        stack = stack.pop();\n        if (!hasAdvanced) {\n          if (false) {}\n          stack = stack.safePop();\n          lineTokens.produce(stack, lineLength);\n          STOP = true;\n          return;\n        }\n      }\n    }\n    if (captureIndices[0].end > linePos) {\n      linePos = captureIndices[0].end;\n      isFirstLine = false;\n    }\n  }\n}\nfunction _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens) {\n  let anchorPosition = stack.beginRuleCapturedEOL ? 0 : -1;\n  const whileRules = [];\n  for (let node = stack; node; node = node.pop()) {\n    const nodeRule = node.getRule(grammar);\n    if (nodeRule instanceof BeginWhileRule) {\n      whileRules.push({\n        rule: nodeRule,\n        stack: node\n      });\n    }\n  }\n  for (let whileRule = whileRules.pop(); whileRule; whileRule = whileRules.pop()) {\n    const { ruleScanner, findOptions } = prepareRuleWhileSearch(whileRule.rule, grammar, whileRule.stack.endRule, isFirstLine, linePos === anchorPosition);\n    const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (false) {}\n    if (r) {\n      const matchedRuleId = r.ruleId;\n      if (matchedRuleId !== whileRuleId) {\n        stack = whileRule.stack.pop();\n        break;\n      }\n      if (r.captureIndices && r.captureIndices.length) {\n        lineTokens.produce(whileRule.stack, r.captureIndices[0].start);\n        handleCaptures(grammar, lineText, isFirstLine, whileRule.stack, lineTokens, whileRule.rule.whileCaptures, r.captureIndices);\n        lineTokens.produce(whileRule.stack, r.captureIndices[0].end);\n        anchorPosition = r.captureIndices[0].end;\n        if (r.captureIndices[0].end > linePos) {\n          linePos = r.captureIndices[0].end;\n          isFirstLine = false;\n        }\n      }\n    } else {\n      if (false) {}\n      stack = whileRule.stack.pop();\n      break;\n    }\n  }\n  return { stack, linePos, anchorPosition, isFirstLine };\n}\nfunction matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n  const matchResult = matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n  const injections = grammar.getInjections();\n  if (injections.length === 0) {\n    return matchResult;\n  }\n  const injectionResult = matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n  if (!injectionResult) {\n    return matchResult;\n  }\n  if (!matchResult) {\n    return injectionResult;\n  }\n  const matchResultScore = matchResult.captureIndices[0].start;\n  const injectionResultScore = injectionResult.captureIndices[0].start;\n  if (injectionResultScore < matchResultScore || injectionResult.priorityMatch && injectionResultScore === matchResultScore) {\n    return injectionResult;\n  }\n  return matchResult;\n}\nfunction matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n  const rule = stack.getRule(grammar);\n  const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, stack.endRule, isFirstLine, linePos === anchorPosition);\n  const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n  if (r) {\n    return {\n      captureIndices: r.captureIndices,\n      matchedRuleId: r.ruleId\n    };\n  }\n  return null;\n}\nfunction matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n  let bestMatchRating = Number.MAX_VALUE;\n  let bestMatchCaptureIndices = null;\n  let bestMatchRuleId;\n  let bestMatchResultPriority = 0;\n  const scopes = stack.contentNameScopesList.getScopeNames();\n  for (let i = 0, len = injections.length; i < len; i++) {\n    const injection = injections[i];\n    if (!injection.matcher(scopes)) {\n      continue;\n    }\n    const rule = grammar.getRule(injection.ruleId);\n    const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, null, isFirstLine, linePos === anchorPosition);\n    const matchResult = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (!matchResult) {\n      continue;\n    }\n    if (false) {}\n    const matchRating = matchResult.captureIndices[0].start;\n    if (matchRating >= bestMatchRating) {\n      continue;\n    }\n    bestMatchRating = matchRating;\n    bestMatchCaptureIndices = matchResult.captureIndices;\n    bestMatchRuleId = matchResult.ruleId;\n    bestMatchResultPriority = injection.priority;\n    if (bestMatchRating === linePos) {\n      break;\n    }\n  }\n  if (bestMatchCaptureIndices) {\n    return {\n      priorityMatch: bestMatchResultPriority === -1,\n      captureIndices: bestMatchCaptureIndices,\n      matchedRuleId: bestMatchRuleId\n    };\n  }\n  return null;\n}\nfunction prepareRuleSearch(rule, grammar, endRegexSource, allowA, allowG) {\n  if (UseOnigurumaFindOptions) {\n    const ruleScanner2 = rule.compile(grammar, endRegexSource);\n    const findOptions = getFindOptions(allowA, allowG);\n    return { ruleScanner: ruleScanner2, findOptions };\n  }\n  const ruleScanner = rule.compileAG(grammar, endRegexSource, allowA, allowG);\n  return { ruleScanner, findOptions: 0 /* None */ };\n}\nfunction prepareRuleWhileSearch(rule, grammar, endRegexSource, allowA, allowG) {\n  if (UseOnigurumaFindOptions) {\n    const ruleScanner2 = rule.compileWhile(grammar, endRegexSource);\n    const findOptions = getFindOptions(allowA, allowG);\n    return { ruleScanner: ruleScanner2, findOptions };\n  }\n  const ruleScanner = rule.compileWhileAG(grammar, endRegexSource, allowA, allowG);\n  return { ruleScanner, findOptions: 0 /* None */ };\n}\nfunction getFindOptions(allowA, allowG) {\n  let options = 0 /* None */;\n  if (!allowA) {\n    options |= 1 /* NotBeginString */;\n  }\n  if (!allowG) {\n    options |= 4 /* NotBeginPosition */;\n  }\n  return options;\n}\nfunction handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, captures, captureIndices) {\n  if (captures.length === 0) {\n    return;\n  }\n  const lineTextContent = lineText.content;\n  const len = Math.min(captures.length, captureIndices.length);\n  const localStack = [];\n  const maxEnd = captureIndices[0].end;\n  for (let i = 0; i < len; i++) {\n    const captureRule = captures[i];\n    if (captureRule === null) {\n      continue;\n    }\n    const captureIndex = captureIndices[i];\n    if (captureIndex.length === 0) {\n      continue;\n    }\n    if (captureIndex.start > maxEnd) {\n      break;\n    }\n    while (localStack.length > 0 && localStack[localStack.length - 1].endPos <= captureIndex.start) {\n      lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n      localStack.pop();\n    }\n    if (localStack.length > 0) {\n      lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, captureIndex.start);\n    } else {\n      lineTokens.produce(stack, captureIndex.start);\n    }\n    if (captureRule.retokenizeCapturedWithRuleId) {\n      const scopeName = captureRule.getName(lineTextContent, captureIndices);\n      const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);\n      const contentName = captureRule.getContentName(lineTextContent, captureIndices);\n      const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);\n      const stackClone = stack.push(captureRule.retokenizeCapturedWithRuleId, captureIndex.start, -1, false, null, nameScopesList, contentNameScopesList);\n      const onigSubStr = grammar.createOnigString(lineTextContent.substring(0, captureIndex.end));\n      _tokenizeString(\n        grammar,\n        onigSubStr,\n        isFirstLine && captureIndex.start === 0,\n        captureIndex.start,\n        stackClone,\n        lineTokens,\n        false,\n        /* no time limit */\n        0\n      );\n      disposeOnigString(onigSubStr);\n      continue;\n    }\n    const captureRuleScopeName = captureRule.getName(lineTextContent, captureIndices);\n    if (captureRuleScopeName !== null) {\n      const base = localStack.length > 0 ? localStack[localStack.length - 1].scopes : stack.contentNameScopesList;\n      const captureRuleScopesList = base.pushAttributed(captureRuleScopeName, grammar);\n      localStack.push(new LocalStackElement(captureRuleScopesList, captureIndex.end));\n    }\n  }\n  while (localStack.length > 0) {\n    lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n    localStack.pop();\n  }\n}\nvar LocalStackElement = class {\n  scopes;\n  endPos;\n  constructor(scopes, endPos) {\n    this.scopes = scopes;\n    this.endPos = endPos;\n  }\n};\n\n// src/grammar/grammar.ts\nfunction createGrammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib) {\n  return new Grammar(\n    scopeName,\n    grammar,\n    initialLanguage,\n    embeddedLanguages,\n    tokenTypes,\n    balancedBracketSelectors,\n    grammarRepository,\n    onigLib\n  );\n}\nfunction collectInjections(result, selector, rule, ruleFactoryHelper, grammar) {\n  const matchers = createMatchers(selector, nameMatcher);\n  const ruleId = RuleFactory.getCompiledRuleId(rule, ruleFactoryHelper, grammar.repository);\n  for (const matcher of matchers) {\n    result.push({\n      debugSelector: selector,\n      matcher: matcher.matcher,\n      ruleId,\n      grammar,\n      priority: matcher.priority\n    });\n  }\n}\nfunction nameMatcher(identifers, scopes) {\n  if (scopes.length < identifers.length) {\n    return false;\n  }\n  let lastIndex = 0;\n  return identifers.every((identifier) => {\n    for (let i = lastIndex; i < scopes.length; i++) {\n      if (scopesAreMatching(scopes[i], identifier)) {\n        lastIndex = i + 1;\n        return true;\n      }\n    }\n    return false;\n  });\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n  if (!thisScopeName) {\n    return false;\n  }\n  if (thisScopeName === scopeName) {\n    return true;\n  }\n  const len = scopeName.length;\n  return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === \".\";\n}\nvar Grammar = class {\n  constructor(_rootScopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, _onigLib) {\n    this._rootScopeName = _rootScopeName;\n    this.balancedBracketSelectors = balancedBracketSelectors;\n    this._onigLib = _onigLib;\n    this._basicScopeAttributesProvider = new BasicScopeAttributesProvider(\n      initialLanguage,\n      embeddedLanguages\n    );\n    this._rootId = -1;\n    this._lastRuleId = 0;\n    this._ruleId2desc = [null];\n    this._includedGrammars = {};\n    this._grammarRepository = grammarRepository;\n    this._grammar = initGrammar(grammar, null);\n    this._injections = null;\n    this._tokenTypeMatchers = [];\n    if (tokenTypes) {\n      for (const selector of Object.keys(tokenTypes)) {\n        const matchers = createMatchers(selector, nameMatcher);\n        for (const matcher of matchers) {\n          this._tokenTypeMatchers.push({\n            matcher: matcher.matcher,\n            type: tokenTypes[selector]\n          });\n        }\n      }\n    }\n  }\n  _rootId;\n  _lastRuleId;\n  _ruleId2desc;\n  _includedGrammars;\n  _grammarRepository;\n  _grammar;\n  _injections;\n  _basicScopeAttributesProvider;\n  _tokenTypeMatchers;\n  get themeProvider() {\n    return this._grammarRepository;\n  }\n  dispose() {\n    for (const rule of this._ruleId2desc) {\n      if (rule) {\n        rule.dispose();\n      }\n    }\n  }\n  createOnigScanner(sources) {\n    return this._onigLib.createOnigScanner(sources);\n  }\n  createOnigString(sources) {\n    return this._onigLib.createOnigString(sources);\n  }\n  getMetadataForScope(scope) {\n    return this._basicScopeAttributesProvider.getBasicScopeAttributes(scope);\n  }\n  _collectInjections() {\n    const grammarRepository = {\n      lookup: (scopeName2) => {\n        if (scopeName2 === this._rootScopeName) {\n          return this._grammar;\n        }\n        return this.getExternalGrammar(scopeName2);\n      },\n      injections: (scopeName2) => {\n        return this._grammarRepository.injections(scopeName2);\n      }\n    };\n    const result = [];\n    const scopeName = this._rootScopeName;\n    const grammar = grammarRepository.lookup(scopeName);\n    if (grammar) {\n      const rawInjections = grammar.injections;\n      if (rawInjections) {\n        for (let expression in rawInjections) {\n          collectInjections(\n            result,\n            expression,\n            rawInjections[expression],\n            this,\n            grammar\n          );\n        }\n      }\n      const injectionScopeNames = this._grammarRepository.injections(scopeName);\n      if (injectionScopeNames) {\n        injectionScopeNames.forEach((injectionScopeName) => {\n          const injectionGrammar = this.getExternalGrammar(injectionScopeName);\n          if (injectionGrammar) {\n            const selector = injectionGrammar.injectionSelector;\n            if (selector) {\n              collectInjections(\n                result,\n                selector,\n                injectionGrammar,\n                this,\n                injectionGrammar\n              );\n            }\n          }\n        });\n      }\n    }\n    result.sort((i1, i2) => i1.priority - i2.priority);\n    return result;\n  }\n  getInjections() {\n    if (this._injections === null) {\n      this._injections = this._collectInjections();\n    }\n    return this._injections;\n  }\n  registerRule(factory) {\n    const id = ++this._lastRuleId;\n    const result = factory(ruleIdFromNumber(id));\n    this._ruleId2desc[id] = result;\n    return result;\n  }\n  getRule(ruleId) {\n    return this._ruleId2desc[ruleIdToNumber(ruleId)];\n  }\n  getExternalGrammar(scopeName, repository) {\n    if (this._includedGrammars[scopeName]) {\n      return this._includedGrammars[scopeName];\n    } else if (this._grammarRepository) {\n      const rawIncludedGrammar = this._grammarRepository.lookup(scopeName);\n      if (rawIncludedGrammar) {\n        this._includedGrammars[scopeName] = initGrammar(\n          rawIncludedGrammar,\n          repository && repository.$base\n        );\n        return this._includedGrammars[scopeName];\n      }\n    }\n    return void 0;\n  }\n  tokenizeLine(lineText, prevState, timeLimit = 0) {\n    const r = this._tokenize(lineText, prevState, false, timeLimit);\n    return {\n      tokens: r.lineTokens.getResult(r.ruleStack, r.lineLength),\n      ruleStack: r.ruleStack,\n      stoppedEarly: r.stoppedEarly\n    };\n  }\n  tokenizeLine2(lineText, prevState, timeLimit = 0) {\n    const r = this._tokenize(lineText, prevState, true, timeLimit);\n    return {\n      tokens: r.lineTokens.getBinaryResult(r.ruleStack, r.lineLength),\n      ruleStack: r.ruleStack,\n      stoppedEarly: r.stoppedEarly\n    };\n  }\n  _tokenize(lineText, prevState, emitBinaryTokens, timeLimit) {\n    if (this._rootId === -1) {\n      this._rootId = RuleFactory.getCompiledRuleId(\n        this._grammar.repository.$self,\n        this,\n        this._grammar.repository\n      );\n      this.getInjections();\n    }\n    let isFirstLine;\n    if (!prevState || prevState === StateStackImpl.NULL) {\n      isFirstLine = true;\n      const rawDefaultMetadata = this._basicScopeAttributesProvider.getDefaultAttributes();\n      const defaultStyle = this.themeProvider.getDefaults();\n      const defaultMetadata = EncodedTokenMetadata.set(\n        0,\n        rawDefaultMetadata.languageId,\n        rawDefaultMetadata.tokenType,\n        null,\n        defaultStyle.fontStyle,\n        defaultStyle.foregroundId,\n        defaultStyle.backgroundId\n      );\n      const rootScopeName = this.getRule(this._rootId).getName(\n        null,\n        null\n      );\n      let scopeList;\n      if (rootScopeName) {\n        scopeList = AttributedScopeStack.createRootAndLookUpScopeName(\n          rootScopeName,\n          defaultMetadata,\n          this\n        );\n      } else {\n        scopeList = AttributedScopeStack.createRoot(\n          \"unknown\",\n          defaultMetadata\n        );\n      }\n      prevState = new StateStackImpl(\n        null,\n        this._rootId,\n        -1,\n        -1,\n        false,\n        null,\n        scopeList,\n        scopeList\n      );\n    } else {\n      isFirstLine = false;\n      prevState.reset();\n    }\n    lineText = lineText + \"\\n\";\n    const onigLineText = this.createOnigString(lineText);\n    const lineLength = onigLineText.content.length;\n    const lineTokens = new LineTokens(\n      emitBinaryTokens,\n      lineText,\n      this._tokenTypeMatchers,\n      this.balancedBracketSelectors\n    );\n    const r = _tokenizeString(\n      this,\n      onigLineText,\n      isFirstLine,\n      0,\n      prevState,\n      lineTokens,\n      true,\n      timeLimit\n    );\n    disposeOnigString(onigLineText);\n    return {\n      lineLength,\n      lineTokens,\n      ruleStack: r.stack,\n      stoppedEarly: r.stoppedEarly\n    };\n  }\n};\nfunction initGrammar(grammar, base) {\n  grammar = clone(grammar);\n  grammar.repository = grammar.repository || {};\n  grammar.repository.$self = {\n    $vscodeTextmateLocation: grammar.$vscodeTextmateLocation,\n    patterns: grammar.patterns,\n    name: grammar.scopeName\n  };\n  grammar.repository.$base = base || grammar.repository.$self;\n  return grammar;\n}\nvar AttributedScopeStack = class _AttributedScopeStack {\n  /**\n   * Invariant:\n   * ```\n   * if (parent && !scopePath.extends(parent.scopePath)) {\n   * \tthrow new Error();\n   * }\n   * ```\n   */\n  constructor(parent, scopePath, tokenAttributes) {\n    this.parent = parent;\n    this.scopePath = scopePath;\n    this.tokenAttributes = tokenAttributes;\n  }\n  static fromExtension(namesScopeList, contentNameScopesList) {\n    let current = namesScopeList;\n    let scopeNames = namesScopeList?.scopePath ?? null;\n    for (const frame of contentNameScopesList) {\n      scopeNames = ScopeStack.push(scopeNames, frame.scopeNames);\n      current = new _AttributedScopeStack(current, scopeNames, frame.encodedTokenAttributes);\n    }\n    return current;\n  }\n  static createRoot(scopeName, tokenAttributes) {\n    return new _AttributedScopeStack(null, new ScopeStack(null, scopeName), tokenAttributes);\n  }\n  static createRootAndLookUpScopeName(scopeName, tokenAttributes, grammar) {\n    const rawRootMetadata = grammar.getMetadataForScope(scopeName);\n    const scopePath = new ScopeStack(null, scopeName);\n    const rootStyle = grammar.themeProvider.themeMatch(scopePath);\n    const resolvedTokenAttributes = _AttributedScopeStack.mergeAttributes(\n      tokenAttributes,\n      rawRootMetadata,\n      rootStyle\n    );\n    return new _AttributedScopeStack(null, scopePath, resolvedTokenAttributes);\n  }\n  get scopeName() {\n    return this.scopePath.scopeName;\n  }\n  toString() {\n    return this.getScopeNames().join(\" \");\n  }\n  equals(other) {\n    return _AttributedScopeStack.equals(this, other);\n  }\n  static equals(a, b) {\n    do {\n      if (a === b) {\n        return true;\n      }\n      if (!a && !b) {\n        return true;\n      }\n      if (!a || !b) {\n        return false;\n      }\n      if (a.scopeName !== b.scopeName || a.tokenAttributes !== b.tokenAttributes) {\n        return false;\n      }\n      a = a.parent;\n      b = b.parent;\n    } while (true);\n  }\n  static mergeAttributes(existingTokenAttributes, basicScopeAttributes, styleAttributes) {\n    let fontStyle = -1 /* NotSet */;\n    let foreground = 0;\n    let background = 0;\n    if (styleAttributes !== null) {\n      fontStyle = styleAttributes.fontStyle;\n      foreground = styleAttributes.foregroundId;\n      background = styleAttributes.backgroundId;\n    }\n    return EncodedTokenMetadata.set(\n      existingTokenAttributes,\n      basicScopeAttributes.languageId,\n      basicScopeAttributes.tokenType,\n      null,\n      fontStyle,\n      foreground,\n      background\n    );\n  }\n  pushAttributed(scopePath, grammar) {\n    if (scopePath === null) {\n      return this;\n    }\n    if (scopePath.indexOf(\" \") === -1) {\n      return _AttributedScopeStack._pushAttributed(this, scopePath, grammar);\n    }\n    const scopes = scopePath.split(/ /g);\n    let result = this;\n    for (const scope of scopes) {\n      result = _AttributedScopeStack._pushAttributed(result, scope, grammar);\n    }\n    return result;\n  }\n  static _pushAttributed(target, scopeName, grammar) {\n    const rawMetadata = grammar.getMetadataForScope(scopeName);\n    const newPath = target.scopePath.push(scopeName);\n    const scopeThemeMatchResult = grammar.themeProvider.themeMatch(newPath);\n    const metadata = _AttributedScopeStack.mergeAttributes(\n      target.tokenAttributes,\n      rawMetadata,\n      scopeThemeMatchResult\n    );\n    return new _AttributedScopeStack(target, newPath, metadata);\n  }\n  getScopeNames() {\n    return this.scopePath.getSegments();\n  }\n  getExtensionIfDefined(base) {\n    const result = [];\n    let self = this;\n    while (self && self !== base) {\n      result.push({\n        encodedTokenAttributes: self.tokenAttributes,\n        scopeNames: self.scopePath.getExtensionIfDefined(self.parent?.scopePath ?? null)\n      });\n      self = self.parent;\n    }\n    return self === base ? result.reverse() : void 0;\n  }\n};\nvar StateStackImpl = class _StateStackImpl {\n  /**\n   * Invariant:\n   * ```\n   * if (contentNameScopesList !== nameScopesList && contentNameScopesList?.parent !== nameScopesList) {\n   * \tthrow new Error();\n   * }\n   * if (this.parent && !nameScopesList.extends(this.parent.contentNameScopesList)) {\n   * \tthrow new Error();\n   * }\n   * ```\n   */\n  constructor(parent, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n    this.parent = parent;\n    this.ruleId = ruleId;\n    this.beginRuleCapturedEOL = beginRuleCapturedEOL;\n    this.endRule = endRule;\n    this.nameScopesList = nameScopesList;\n    this.contentNameScopesList = contentNameScopesList;\n    this.depth = this.parent ? this.parent.depth + 1 : 1;\n    this._enterPos = enterPos;\n    this._anchorPos = anchorPos;\n  }\n  _stackElementBrand = void 0;\n  // TODO remove me\n  static NULL = new _StateStackImpl(\n    null,\n    0,\n    0,\n    0,\n    false,\n    null,\n    null,\n    null\n  );\n  /**\n   * The position on the current line where this state was pushed.\n   * This is relevant only while tokenizing a line, to detect endless loops.\n   * Its value is meaningless across lines.\n   */\n  _enterPos;\n  /**\n   * The captured anchor position when this stack element was pushed.\n   * This is relevant only while tokenizing a line, to restore the anchor position when popping.\n   * Its value is meaningless across lines.\n   */\n  _anchorPos;\n  /**\n   * The depth of the stack.\n   */\n  depth;\n  equals(other) {\n    if (other === null) {\n      return false;\n    }\n    return _StateStackImpl._equals(this, other);\n  }\n  static _equals(a, b) {\n    if (a === b) {\n      return true;\n    }\n    if (!this._structuralEquals(a, b)) {\n      return false;\n    }\n    return AttributedScopeStack.equals(a.contentNameScopesList, b.contentNameScopesList);\n  }\n  /**\n   * A structural equals check. Does not take into account `scopes`.\n   */\n  static _structuralEquals(a, b) {\n    do {\n      if (a === b) {\n        return true;\n      }\n      if (!a && !b) {\n        return true;\n      }\n      if (!a || !b) {\n        return false;\n      }\n      if (a.depth !== b.depth || a.ruleId !== b.ruleId || a.endRule !== b.endRule) {\n        return false;\n      }\n      a = a.parent;\n      b = b.parent;\n    } while (true);\n  }\n  clone() {\n    return this;\n  }\n  static _reset(el) {\n    while (el) {\n      el._enterPos = -1;\n      el._anchorPos = -1;\n      el = el.parent;\n    }\n  }\n  reset() {\n    _StateStackImpl._reset(this);\n  }\n  pop() {\n    return this.parent;\n  }\n  safePop() {\n    if (this.parent) {\n      return this.parent;\n    }\n    return this;\n  }\n  push(ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n    return new _StateStackImpl(\n      this,\n      ruleId,\n      enterPos,\n      anchorPos,\n      beginRuleCapturedEOL,\n      endRule,\n      nameScopesList,\n      contentNameScopesList\n    );\n  }\n  getEnterPos() {\n    return this._enterPos;\n  }\n  getAnchorPos() {\n    return this._anchorPos;\n  }\n  getRule(grammar) {\n    return grammar.getRule(this.ruleId);\n  }\n  toString() {\n    const r = [];\n    this._writeString(r, 0);\n    return \"[\" + r.join(\",\") + \"]\";\n  }\n  _writeString(res, outIndex) {\n    if (this.parent) {\n      outIndex = this.parent._writeString(res, outIndex);\n    }\n    res[outIndex++] = `(${this.ruleId}, ${this.nameScopesList?.toString()}, ${this.contentNameScopesList?.toString()})`;\n    return outIndex;\n  }\n  withContentNameScopesList(contentNameScopeStack) {\n    if (this.contentNameScopesList === contentNameScopeStack) {\n      return this;\n    }\n    return this.parent.push(\n      this.ruleId,\n      this._enterPos,\n      this._anchorPos,\n      this.beginRuleCapturedEOL,\n      this.endRule,\n      this.nameScopesList,\n      contentNameScopeStack\n    );\n  }\n  withEndRule(endRule) {\n    if (this.endRule === endRule) {\n      return this;\n    }\n    return new _StateStackImpl(\n      this.parent,\n      this.ruleId,\n      this._enterPos,\n      this._anchorPos,\n      this.beginRuleCapturedEOL,\n      endRule,\n      this.nameScopesList,\n      this.contentNameScopesList\n    );\n  }\n  // Used to warn of endless loops\n  hasSameRuleAs(other) {\n    let el = this;\n    while (el && el._enterPos === other._enterPos) {\n      if (el.ruleId === other.ruleId) {\n        return true;\n      }\n      el = el.parent;\n    }\n    return false;\n  }\n  toStateStackFrame() {\n    return {\n      ruleId: ruleIdToNumber(this.ruleId),\n      beginRuleCapturedEOL: this.beginRuleCapturedEOL,\n      endRule: this.endRule,\n      nameScopesList: this.nameScopesList?.getExtensionIfDefined(this.parent?.nameScopesList ?? null) ?? [],\n      contentNameScopesList: this.contentNameScopesList?.getExtensionIfDefined(this.nameScopesList) ?? []\n    };\n  }\n  static pushFrame(self, frame) {\n    const namesScopeList = AttributedScopeStack.fromExtension(self?.nameScopesList ?? null, frame.nameScopesList);\n    return new _StateStackImpl(\n      self,\n      ruleIdFromNumber(frame.ruleId),\n      frame.enterPos ?? -1,\n      frame.anchorPos ?? -1,\n      frame.beginRuleCapturedEOL,\n      frame.endRule,\n      namesScopeList,\n      AttributedScopeStack.fromExtension(namesScopeList, frame.contentNameScopesList)\n    );\n  }\n};\nvar BalancedBracketSelectors = class {\n  balancedBracketScopes;\n  unbalancedBracketScopes;\n  allowAny = false;\n  constructor(balancedBracketScopes, unbalancedBracketScopes) {\n    this.balancedBracketScopes = balancedBracketScopes.flatMap(\n      (selector) => {\n        if (selector === \"*\") {\n          this.allowAny = true;\n          return [];\n        }\n        return createMatchers(selector, nameMatcher).map((m) => m.matcher);\n      }\n    );\n    this.unbalancedBracketScopes = unbalancedBracketScopes.flatMap(\n      (selector) => createMatchers(selector, nameMatcher).map((m) => m.matcher)\n    );\n  }\n  get matchesAlways() {\n    return this.allowAny && this.unbalancedBracketScopes.length === 0;\n  }\n  get matchesNever() {\n    return this.balancedBracketScopes.length === 0 && !this.allowAny;\n  }\n  match(scopes) {\n    for (const excluder of this.unbalancedBracketScopes) {\n      if (excluder(scopes)) {\n        return false;\n      }\n    }\n    for (const includer of this.balancedBracketScopes) {\n      if (includer(scopes)) {\n        return true;\n      }\n    }\n    return this.allowAny;\n  }\n};\nvar LineTokens = class {\n  constructor(emitBinaryTokens, lineText, tokenTypeOverrides, balancedBracketSelectors) {\n    this.balancedBracketSelectors = balancedBracketSelectors;\n    this._emitBinaryTokens = emitBinaryTokens;\n    this._tokenTypeOverrides = tokenTypeOverrides;\n    if (false) {} else {\n      this._lineText = null;\n    }\n    this._tokens = [];\n    this._binaryTokens = [];\n    this._lastTokenEndIndex = 0;\n  }\n  _emitBinaryTokens;\n  /**\n   * defined only if `false`.\n   */\n  _lineText;\n  /**\n   * used only if `_emitBinaryTokens` is false.\n   */\n  _tokens;\n  /**\n   * used only if `_emitBinaryTokens` is true.\n   */\n  _binaryTokens;\n  _lastTokenEndIndex;\n  _tokenTypeOverrides;\n  produce(stack, endIndex) {\n    this.produceFromScopes(stack.contentNameScopesList, endIndex);\n  }\n  produceFromScopes(scopesList, endIndex) {\n    if (this._lastTokenEndIndex >= endIndex) {\n      return;\n    }\n    if (this._emitBinaryTokens) {\n      let metadata = scopesList?.tokenAttributes ?? 0;\n      let containsBalancedBrackets = false;\n      if (this.balancedBracketSelectors?.matchesAlways) {\n        containsBalancedBrackets = true;\n      }\n      if (this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {\n        const scopes2 = scopesList?.getScopeNames() ?? [];\n        for (const tokenType of this._tokenTypeOverrides) {\n          if (tokenType.matcher(scopes2)) {\n            metadata = EncodedTokenMetadata.set(\n              metadata,\n              0,\n              toOptionalTokenType(tokenType.type),\n              null,\n              -1 /* NotSet */,\n              0,\n              0\n            );\n          }\n        }\n        if (this.balancedBracketSelectors) {\n          containsBalancedBrackets = this.balancedBracketSelectors.match(scopes2);\n        }\n      }\n      if (containsBalancedBrackets) {\n        metadata = EncodedTokenMetadata.set(\n          metadata,\n          0,\n          8 /* NotSet */,\n          containsBalancedBrackets,\n          -1 /* NotSet */,\n          0,\n          0\n        );\n      }\n      if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === metadata) {\n        this._lastTokenEndIndex = endIndex;\n        return;\n      }\n      this._binaryTokens.push(this._lastTokenEndIndex);\n      this._binaryTokens.push(metadata);\n      this._lastTokenEndIndex = endIndex;\n      return;\n    }\n    const scopes = scopesList?.getScopeNames() ?? [];\n    this._tokens.push({\n      startIndex: this._lastTokenEndIndex,\n      endIndex,\n      // value: lineText.substring(lastTokenEndIndex, endIndex),\n      scopes\n    });\n    this._lastTokenEndIndex = endIndex;\n  }\n  getResult(stack, lineLength) {\n    if (this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === lineLength - 1) {\n      this._tokens.pop();\n    }\n    if (this._tokens.length === 0) {\n      this._lastTokenEndIndex = -1;\n      this.produce(stack, lineLength);\n      this._tokens[this._tokens.length - 1].startIndex = 0;\n    }\n    return this._tokens;\n  }\n  getBinaryResult(stack, lineLength) {\n    if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === lineLength - 1) {\n      this._binaryTokens.pop();\n      this._binaryTokens.pop();\n    }\n    if (this._binaryTokens.length === 0) {\n      this._lastTokenEndIndex = -1;\n      this.produce(stack, lineLength);\n      this._binaryTokens[this._binaryTokens.length - 2] = 0;\n    }\n    const result = new Uint32Array(this._binaryTokens.length);\n    for (let i = 0, len = this._binaryTokens.length; i < len; i++) {\n      result[i] = this._binaryTokens[i];\n    }\n    return result;\n  }\n};\n\n// src/registry.ts\nvar SyncRegistry = class {\n  constructor(theme, _onigLib) {\n    this._onigLib = _onigLib;\n    this._theme = theme;\n  }\n  _grammars = /* @__PURE__ */ new Map();\n  _rawGrammars = /* @__PURE__ */ new Map();\n  _injectionGrammars = /* @__PURE__ */ new Map();\n  _theme;\n  dispose() {\n    for (const grammar of this._grammars.values()) {\n      grammar.dispose();\n    }\n  }\n  setTheme(theme) {\n    this._theme = theme;\n  }\n  getColorMap() {\n    return this._theme.getColorMap();\n  }\n  /**\n   * Add `grammar` to registry and return a list of referenced scope names\n   */\n  addGrammar(grammar, injectionScopeNames) {\n    this._rawGrammars.set(grammar.scopeName, grammar);\n    if (injectionScopeNames) {\n      this._injectionGrammars.set(grammar.scopeName, injectionScopeNames);\n    }\n  }\n  /**\n   * Lookup a raw grammar.\n   */\n  lookup(scopeName) {\n    return this._rawGrammars.get(scopeName);\n  }\n  /**\n   * Returns the injections for the given grammar\n   */\n  injections(targetScope) {\n    return this._injectionGrammars.get(targetScope);\n  }\n  /**\n   * Get the default theme settings\n   */\n  getDefaults() {\n    return this._theme.getDefaults();\n  }\n  /**\n   * Match a scope in the theme.\n   */\n  themeMatch(scopePath) {\n    return this._theme.match(scopePath);\n  }\n  /**\n   * Lookup a grammar.\n   */\n  grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n    if (!this._grammars.has(scopeName)) {\n      let rawGrammar = this._rawGrammars.get(scopeName);\n      if (!rawGrammar) {\n        return null;\n      }\n      this._grammars.set(scopeName, createGrammar(\n        scopeName,\n        rawGrammar,\n        initialLanguage,\n        embeddedLanguages,\n        tokenTypes,\n        balancedBracketSelectors,\n        this,\n        this._onigLib\n      ));\n    }\n    return this._grammars.get(scopeName);\n  }\n};\n\n// src/index.ts\nvar Registry = class {\n  _options;\n  _syncRegistry;\n  _ensureGrammarCache;\n  constructor(options) {\n    this._options = options;\n    this._syncRegistry = new SyncRegistry(\n      Theme.createFromRawTheme(options.theme, options.colorMap),\n      options.onigLib\n    );\n    this._ensureGrammarCache = /* @__PURE__ */ new Map();\n  }\n  dispose() {\n    this._syncRegistry.dispose();\n  }\n  /**\n   * Change the theme. Once called, no previous `ruleStack` should be used anymore.\n   */\n  setTheme(theme, colorMap) {\n    this._syncRegistry.setTheme(Theme.createFromRawTheme(theme, colorMap));\n  }\n  /**\n   * Returns a lookup array for color ids.\n   */\n  getColorMap() {\n    return this._syncRegistry.getColorMap();\n  }\n  /**\n   * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n   * Please do not use language id 0.\n   */\n  loadGrammarWithEmbeddedLanguages(initialScopeName, initialLanguage, embeddedLanguages) {\n    return this.loadGrammarWithConfiguration(initialScopeName, initialLanguage, { embeddedLanguages });\n  }\n  /**\n   * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n   * Please do not use language id 0.\n   */\n  loadGrammarWithConfiguration(initialScopeName, initialLanguage, configuration) {\n    return this._loadGrammar(\n      initialScopeName,\n      initialLanguage,\n      configuration.embeddedLanguages,\n      configuration.tokenTypes,\n      new BalancedBracketSelectors(\n        configuration.balancedBracketSelectors || [],\n        configuration.unbalancedBracketSelectors || []\n      )\n    );\n  }\n  /**\n   * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n   */\n  loadGrammar(initialScopeName) {\n    return this._loadGrammar(initialScopeName, 0, null, null, null);\n  }\n  _loadGrammar(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {\n    const dependencyProcessor = new ScopeDependencyProcessor(this._syncRegistry, initialScopeName);\n    while (dependencyProcessor.Q.length > 0) {\n      dependencyProcessor.Q.map((request) => this._loadSingleGrammar(request.scopeName));\n      dependencyProcessor.processQueue();\n    }\n    return this._grammarForScopeName(\n      initialScopeName,\n      initialLanguage,\n      embeddedLanguages,\n      tokenTypes,\n      balancedBracketSelectors\n    );\n  }\n  _loadSingleGrammar(scopeName) {\n    if (!this._ensureGrammarCache.has(scopeName)) {\n      this._doLoadSingleGrammar(scopeName);\n      this._ensureGrammarCache.set(scopeName, true);\n    }\n  }\n  _doLoadSingleGrammar(scopeName) {\n    const grammar = this._options.loadGrammar(scopeName);\n    if (grammar) {\n      const injections = typeof this._options.getInjections === \"function\" ? this._options.getInjections(scopeName) : void 0;\n      this._syncRegistry.addGrammar(grammar, injections);\n    }\n  }\n  /**\n   * Adds a rawGrammar.\n   */\n  addGrammar(rawGrammar, injections = [], initialLanguage = 0, embeddedLanguages = null) {\n    this._syncRegistry.addGrammar(rawGrammar, injections);\n    return this._grammarForScopeName(rawGrammar.scopeName, initialLanguage, embeddedLanguages);\n  }\n  /**\n   * Get the grammar for `scopeName`. The grammar must first be created via `loadGrammar` or `addGrammar`.\n   */\n  _grammarForScopeName(scopeName, initialLanguage = 0, embeddedLanguages = null, tokenTypes = null, balancedBracketSelectors = null) {\n    return this._syncRegistry.grammarForScopeName(\n      scopeName,\n      initialLanguage,\n      embeddedLanguages,\n      tokenTypes,\n      balancedBracketSelectors\n    );\n  }\n};\nvar INITIAL = StateStackImpl.NULL;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2hpa2lqcyt2c2NvZGUtdGV4dG1hdGVAMTAuMC4yL25vZGVfbW9kdWxlcy9Ac2hpa2lqcy92c2NvZGUtdGV4dG1hdGUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsMEJBQTBCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLEVBQUU7QUFDcEI7QUFDQTtBQUNBLGtCQUFrQixFQUFFO0FBQ3BCO0FBQ0E7QUFDQSxrQkFBa0IsRUFBRTtBQUNwQjtBQUNBO0FBQ0Esa0JBQWtCLEVBQUU7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixFQUFFO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFNBQVM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFVBQVU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxpQkFBaUI7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsU0FBUztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxNQUFNO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELFNBQVM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtCQUFrQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZUFBZSxHQUFHLGNBQWM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHFCQUFxQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDBCQUEwQjtBQUN4RSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFFBQVEsOERBQThEO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHdEQUF3RDtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHdEQUF3RDtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBLHdEQUF3RCwyQ0FBMkM7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCw4Q0FBOEM7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRiwyQ0FBMkM7QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxrQ0FBa0MsR0FBRyxvQkFBb0I7QUFDbEcsY0FBYyxzQkFBc0IsR0FBRyxTQUFTLElBQUksU0FBUztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQW1CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQW1CO0FBQ2pDO0FBQ0E7QUFDQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix1QkFBdUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsV0FBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsV0FBVztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEY7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLE9BQU8sc0JBQXNCLE9BQU87QUFDMUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsS0FBSyxFQUFFLEVBS1Y7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLEtBQUssRUFBRSxFQUlWO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEtBQUssRUFBRSxFQUlWO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksS0FBSyxFQUFFLEVBSVY7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxLQUFLLEVBQUUsRUFJVjtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxZQUFZLEtBQUssRUFBRSxFQUVWO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSyxFQUFFLEVBSVY7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsWUFBWSxLQUFLLEVBQUUsRUFJVjtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSyxFQUFFLEVBSVY7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixNQUFNO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLHlDQUF5QyxXQUFXO0FBQ3BELFlBQVksMkJBQTJCO0FBQ3ZDO0FBQ0EsUUFBUSxLQUFLLEVBQUUsRUFHVjtBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLFVBQVUsS0FBSyxFQUFFLEVBRVY7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwyQkFBMkI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkJBQTJCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxLQUFLLEVBQUUsRUFHVjtBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixZQUFZLElBQUksZ0NBQWdDLElBQUksdUNBQXVDO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsS0FBSyxFQUFFLEVBRVYsQ0FBQztBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxTQUFTO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsbUJBQW1CO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTRSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaGlraWpzK3ZzY29kZS10ZXh0bWF0ZUAxMC4wLjIvbm9kZV9tb2R1bGVzL0BzaGlraWpzL3ZzY29kZS10ZXh0bWF0ZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy50c1xuZnVuY3Rpb24gY2xvbmUoc29tZXRoaW5nKSB7XG4gIHJldHVybiBkb0Nsb25lKHNvbWV0aGluZyk7XG59XG5mdW5jdGlvbiBkb0Nsb25lKHNvbWV0aGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShzb21ldGhpbmcpKSB7XG4gICAgcmV0dXJuIGNsb25lQXJyYXkoc29tZXRoaW5nKTtcbiAgfVxuICBpZiAoc29tZXRoaW5nIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHNvbWV0aGluZztcbiAgfVxuICBpZiAodHlwZW9mIHNvbWV0aGluZyA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBjbG9uZU9iaihzb21ldGhpbmcpO1xuICB9XG4gIHJldHVybiBzb21ldGhpbmc7XG59XG5mdW5jdGlvbiBjbG9uZUFycmF5KGFycikge1xuICBsZXQgciA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcltpXSA9IGRvQ2xvbmUoYXJyW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIGNsb25lT2JqKG9iaikge1xuICBsZXQgciA9IHt9O1xuICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgcltrZXldID0gZG9DbG9uZShvYmpba2V5XSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5mdW5jdGlvbiBtZXJnZU9iamVjdHModGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlKSA9PiB7XG4gICAgZm9yIChsZXQga2V5IGluIHNvdXJjZSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gYmFzZW5hbWUocGF0aCkge1xuICBjb25zdCBpZHggPSB+cGF0aC5sYXN0SW5kZXhPZihcIi9cIikgfHwgfnBhdGgubGFzdEluZGV4T2YoXCJcXFxcXCIpO1xuICBpZiAoaWR4ID09PSAwKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0gZWxzZSBpZiAofmlkeCA9PT0gcGF0aC5sZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lKHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGVuZ3RoIC0gMSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXRoLnN1YnN0cih+aWR4ICsgMSk7XG4gIH1cbn1cbnZhciBDQVBUVVJJTkdfUkVHRVhfU09VUkNFID0gL1xcJChcXGQrKXxcXCR7KFxcZCspOlxcLyhkb3duY2FzZXx1cGNhc2UpfS9nO1xudmFyIFJlZ2V4U291cmNlID0gY2xhc3Mge1xuICBzdGF0aWMgaGFzQ2FwdHVyZXMocmVnZXhTb3VyY2UpIHtcbiAgICBpZiAocmVnZXhTb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgQ0FQVFVSSU5HX1JFR0VYX1NPVVJDRS5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBDQVBUVVJJTkdfUkVHRVhfU09VUkNFLnRlc3QocmVnZXhTb3VyY2UpO1xuICB9XG4gIHN0YXRpYyByZXBsYWNlQ2FwdHVyZXMocmVnZXhTb3VyY2UsIGNhcHR1cmVTb3VyY2UsIGNhcHR1cmVJbmRpY2VzKSB7XG4gICAgcmV0dXJuIHJlZ2V4U291cmNlLnJlcGxhY2UoQ0FQVFVSSU5HX1JFR0VYX1NPVVJDRSwgKG1hdGNoLCBpbmRleCwgY29tbWFuZEluZGV4LCBjb21tYW5kKSA9PiB7XG4gICAgICBsZXQgY2FwdHVyZSA9IGNhcHR1cmVJbmRpY2VzW3BhcnNlSW50KGluZGV4IHx8IGNvbW1hbmRJbmRleCwgMTApXTtcbiAgICAgIGlmIChjYXB0dXJlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBjYXB0dXJlU291cmNlLnN1YnN0cmluZyhjYXB0dXJlLnN0YXJ0LCBjYXB0dXJlLmVuZCk7XG4gICAgICAgIHdoaWxlIChyZXN1bHRbMF0gPT09IFwiLlwiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICBjYXNlIFwiZG93bmNhc2VcIjpcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBjYXNlIFwidXBjYXNlXCI6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHN0cmNtcChhLCBiKSB7XG4gIGlmIChhIDwgYikge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYSA+IGIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIHN0ckFyckNtcChhLCBiKSB7XG4gIGlmIChhID09PSBudWxsICYmIGIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAoIWEpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKCFiKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgbGV0IGxlbjEgPSBhLmxlbmd0aDtcbiAgbGV0IGxlbjIgPSBiLmxlbmd0aDtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjE7IGkrKykge1xuICAgICAgbGV0IHJlcyA9IHN0cmNtcChhW2ldLCBiW2ldKTtcbiAgICAgIGlmIChyZXMgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIGxlbjEgLSBsZW4yO1xufVxuZnVuY3Rpb24gaXNWYWxpZEhleENvbG9yKGhleCkge1xuICBpZiAoL14jWzAtOWEtZl17Nn0kL2kudGVzdChoZXgpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKC9eI1swLTlhLWZdezh9JC9pLnRlc3QoaGV4KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICgvXiNbMC05YS1mXXszfSQvaS50ZXN0KGhleCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoL14jWzAtOWEtZl17NH0kL2kudGVzdChoZXgpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcXFxcXHtcXH1cXCpcXCtcXD9cXHxcXF5cXCRcXC5cXCxcXFtcXF1cXChcXClcXCNcXHNdL2csIFwiXFxcXCQmXCIpO1xufVxudmFyIENhY2hlZEZuID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihmbikge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgfVxuICBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGdldChrZXkpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5mbihrZXkpO1xuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuLy8gc3JjL3RoZW1lLnRzXG52YXIgVGhlbWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF9jb2xvck1hcCwgX2RlZmF1bHRzLCBfcm9vdCkge1xuICAgIHRoaXMuX2NvbG9yTWFwID0gX2NvbG9yTWFwO1xuICAgIHRoaXMuX2RlZmF1bHRzID0gX2RlZmF1bHRzO1xuICAgIHRoaXMuX3Jvb3QgPSBfcm9vdDtcbiAgfVxuICBzdGF0aWMgY3JlYXRlRnJvbVJhd1RoZW1lKHNvdXJjZSwgY29sb3JNYXApIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tUGFyc2VkVGhlbWUocGFyc2VUaGVtZShzb3VyY2UpLCBjb2xvck1hcCk7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZUZyb21QYXJzZWRUaGVtZShzb3VyY2UsIGNvbG9yTWFwKSB7XG4gICAgcmV0dXJuIHJlc29sdmVQYXJzZWRUaGVtZVJ1bGVzKHNvdXJjZSwgY29sb3JNYXApO1xuICB9XG4gIF9jYWNoZWRNYXRjaFJvb3QgPSBuZXcgQ2FjaGVkRm4oXG4gICAgKHNjb3BlTmFtZSkgPT4gdGhpcy5fcm9vdC5tYXRjaChzY29wZU5hbWUpXG4gICk7XG4gIGdldENvbG9yTWFwKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2xvck1hcC5nZXRDb2xvck1hcCgpO1xuICB9XG4gIGdldERlZmF1bHRzKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0cztcbiAgfVxuICBtYXRjaChzY29wZVBhdGgpIHtcbiAgICBpZiAoc2NvcGVQYXRoID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdHM7XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlTmFtZSA9IHNjb3BlUGF0aC5zY29wZU5hbWU7XG4gICAgY29uc3QgbWF0Y2hpbmdUcmllRWxlbWVudHMgPSB0aGlzLl9jYWNoZWRNYXRjaFJvb3QuZ2V0KHNjb3BlTmFtZSk7XG4gICAgY29uc3QgZWZmZWN0aXZlUnVsZSA9IG1hdGNoaW5nVHJpZUVsZW1lbnRzLmZpbmQoXG4gICAgICAodikgPT4gX3Njb3BlUGF0aE1hdGNoZXNQYXJlbnRTY29wZXMoc2NvcGVQYXRoLnBhcmVudCwgdi5wYXJlbnRTY29wZXMpXG4gICAgKTtcbiAgICBpZiAoIWVmZmVjdGl2ZVJ1bGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0eWxlQXR0cmlidXRlcyhcbiAgICAgIGVmZmVjdGl2ZVJ1bGUuZm9udFN0eWxlLFxuICAgICAgZWZmZWN0aXZlUnVsZS5mb3JlZ3JvdW5kLFxuICAgICAgZWZmZWN0aXZlUnVsZS5iYWNrZ3JvdW5kXG4gICAgKTtcbiAgfVxufTtcbnZhciBTY29wZVN0YWNrID0gY2xhc3MgX1Njb3BlU3RhY2sge1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHNjb3BlTmFtZSkge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuc2NvcGVOYW1lID0gc2NvcGVOYW1lO1xuICB9XG4gIHN0YXRpYyBwdXNoKHBhdGgsIHNjb3BlTmFtZXMpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygc2NvcGVOYW1lcykge1xuICAgICAgcGF0aCA9IG5ldyBfU2NvcGVTdGFjayhwYXRoLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgc3RhdGljIGZyb20oLi4uc2VnbWVudHMpIHtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgPSBuZXcgX1Njb3BlU3RhY2socmVzdWx0LCBzZWdtZW50c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcHVzaChzY29wZU5hbWUpIHtcbiAgICByZXR1cm4gbmV3IF9TY29wZVN0YWNrKHRoaXMsIHNjb3BlTmFtZSk7XG4gIH1cbiAgZ2V0U2VnbWVudHMoKSB7XG4gICAgbGV0IGl0ZW0gPSB0aGlzO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlIChpdGVtKSB7XG4gICAgICByZXN1bHQucHVzaChpdGVtLnNjb3BlTmFtZSk7XG4gICAgICBpdGVtID0gaXRlbS5wYXJlbnQ7XG4gICAgfVxuICAgIHJlc3VsdC5yZXZlcnNlKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWdtZW50cygpLmpvaW4oXCIgXCIpO1xuICB9XG4gIGV4dGVuZHMob3RoZXIpIHtcbiAgICBpZiAodGhpcyA9PT0gb3RoZXIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGFyZW50LmV4dGVuZHMob3RoZXIpO1xuICB9XG4gIGdldEV4dGVuc2lvbklmRGVmaW5lZChiYXNlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGl0ZW0gPSB0aGlzO1xuICAgIHdoaWxlIChpdGVtICYmIGl0ZW0gIT09IGJhc2UpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGl0ZW0uc2NvcGVOYW1lKTtcbiAgICAgIGl0ZW0gPSBpdGVtLnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW0gPT09IGJhc2UgPyByZXN1bHQucmV2ZXJzZSgpIDogdm9pZCAwO1xuICB9XG59O1xuZnVuY3Rpb24gX3Njb3BlUGF0aE1hdGNoZXNQYXJlbnRTY29wZXMoc2NvcGVQYXRoLCBwYXJlbnRTY29wZXMpIHtcbiAgaWYgKHBhcmVudFNjb3Blcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcGFyZW50U2NvcGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCBzY29wZVBhdHRlcm4gPSBwYXJlbnRTY29wZXNbaW5kZXhdO1xuICAgIGxldCBzY29wZU11c3RNYXRjaCA9IGZhbHNlO1xuICAgIGlmIChzY29wZVBhdHRlcm4gPT09IFwiPlwiKSB7XG4gICAgICBpZiAoaW5kZXggPT09IHBhcmVudFNjb3Blcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHNjb3BlUGF0dGVybiA9IHBhcmVudFNjb3Blc1srK2luZGV4XTtcbiAgICAgIHNjb3BlTXVzdE1hdGNoID0gdHJ1ZTtcbiAgICB9XG4gICAgd2hpbGUgKHNjb3BlUGF0aCkge1xuICAgICAgaWYgKF9tYXRjaGVzU2NvcGUoc2NvcGVQYXRoLnNjb3BlTmFtZSwgc2NvcGVQYXR0ZXJuKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzY29wZU11c3RNYXRjaCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzY29wZVBhdGggPSBzY29wZVBhdGgucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIXNjb3BlUGF0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzY29wZVBhdGggPSBzY29wZVBhdGgucGFyZW50O1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gX21hdGNoZXNTY29wZShzY29wZU5hbWUsIHNjb3BlUGF0dGVybikge1xuICByZXR1cm4gc2NvcGVQYXR0ZXJuID09PSBzY29wZU5hbWUgfHwgc2NvcGVOYW1lLnN0YXJ0c1dpdGgoc2NvcGVQYXR0ZXJuKSAmJiBzY29wZU5hbWVbc2NvcGVQYXR0ZXJuLmxlbmd0aF0gPT09IFwiLlwiO1xufVxudmFyIFN0eWxlQXR0cmlidXRlcyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoZm9udFN0eWxlLCBmb3JlZ3JvdW5kSWQsIGJhY2tncm91bmRJZCkge1xuICAgIHRoaXMuZm9udFN0eWxlID0gZm9udFN0eWxlO1xuICAgIHRoaXMuZm9yZWdyb3VuZElkID0gZm9yZWdyb3VuZElkO1xuICAgIHRoaXMuYmFja2dyb3VuZElkID0gYmFja2dyb3VuZElkO1xuICB9XG59O1xuZnVuY3Rpb24gcGFyc2VUaGVtZShzb3VyY2UpIHtcbiAgaWYgKCFzb3VyY2UpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKCFzb3VyY2Uuc2V0dGluZ3MgfHwgIUFycmF5LmlzQXJyYXkoc291cmNlLnNldHRpbmdzKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBsZXQgc2V0dGluZ3MgPSBzb3VyY2Uuc2V0dGluZ3M7XG4gIGxldCByZXN1bHQgPSBbXSwgcmVzdWx0TGVuID0gMDtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNldHRpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbGV0IGVudHJ5ID0gc2V0dGluZ3NbaV07XG4gICAgaWYgKCFlbnRyeS5zZXR0aW5ncykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldCBzY29wZXM7XG4gICAgaWYgKHR5cGVvZiBlbnRyeS5zY29wZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbGV0IF9zY29wZSA9IGVudHJ5LnNjb3BlO1xuICAgICAgX3Njb3BlID0gX3Njb3BlLnJlcGxhY2UoL15bLF0rLywgXCJcIik7XG4gICAgICBfc2NvcGUgPSBfc2NvcGUucmVwbGFjZSgvWyxdKyQvLCBcIlwiKTtcbiAgICAgIHNjb3BlcyA9IF9zY29wZS5zcGxpdChcIixcIik7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVudHJ5LnNjb3BlKSkge1xuICAgICAgc2NvcGVzID0gZW50cnkuc2NvcGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjb3BlcyA9IFtcIlwiXTtcbiAgICB9XG4gICAgbGV0IGZvbnRTdHlsZSA9IC0xIC8qIE5vdFNldCAqLztcbiAgICBpZiAodHlwZW9mIGVudHJ5LnNldHRpbmdzLmZvbnRTdHlsZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZm9udFN0eWxlID0gMCAvKiBOb25lICovO1xuICAgICAgbGV0IHNlZ21lbnRzID0gZW50cnkuc2V0dGluZ3MuZm9udFN0eWxlLnNwbGl0KFwiIFwiKTtcbiAgICAgIGZvciAobGV0IGogPSAwLCBsZW5KID0gc2VnbWVudHMubGVuZ3RoOyBqIDwgbGVuSjsgaisrKSB7XG4gICAgICAgIGxldCBzZWdtZW50ID0gc2VnbWVudHNbal07XG4gICAgICAgIHN3aXRjaCAoc2VnbWVudCkge1xuICAgICAgICAgIGNhc2UgXCJpdGFsaWNcIjpcbiAgICAgICAgICAgIGZvbnRTdHlsZSA9IGZvbnRTdHlsZSB8IDEgLyogSXRhbGljICovO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImJvbGRcIjpcbiAgICAgICAgICAgIGZvbnRTdHlsZSA9IGZvbnRTdHlsZSB8IDIgLyogQm9sZCAqLztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ1bmRlcmxpbmVcIjpcbiAgICAgICAgICAgIGZvbnRTdHlsZSA9IGZvbnRTdHlsZSB8IDQgLyogVW5kZXJsaW5lICovO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInN0cmlrZXRocm91Z2hcIjpcbiAgICAgICAgICAgIGZvbnRTdHlsZSA9IGZvbnRTdHlsZSB8IDggLyogU3RyaWtldGhyb3VnaCAqLztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBmb3JlZ3JvdW5kID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIGVudHJ5LnNldHRpbmdzLmZvcmVncm91bmQgPT09IFwic3RyaW5nXCIgJiYgaXNWYWxpZEhleENvbG9yKGVudHJ5LnNldHRpbmdzLmZvcmVncm91bmQpKSB7XG4gICAgICBmb3JlZ3JvdW5kID0gZW50cnkuc2V0dGluZ3MuZm9yZWdyb3VuZDtcbiAgICB9XG4gICAgbGV0IGJhY2tncm91bmQgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgZW50cnkuc2V0dGluZ3MuYmFja2dyb3VuZCA9PT0gXCJzdHJpbmdcIiAmJiBpc1ZhbGlkSGV4Q29sb3IoZW50cnkuc2V0dGluZ3MuYmFja2dyb3VuZCkpIHtcbiAgICAgIGJhY2tncm91bmQgPSBlbnRyeS5zZXR0aW5ncy5iYWNrZ3JvdW5kO1xuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMCwgbGVuSiA9IHNjb3Blcy5sZW5ndGg7IGogPCBsZW5KOyBqKyspIHtcbiAgICAgIGxldCBfc2NvcGUgPSBzY29wZXNbal0udHJpbSgpO1xuICAgICAgbGV0IHNlZ21lbnRzID0gX3Njb3BlLnNwbGl0KFwiIFwiKTtcbiAgICAgIGxldCBzY29wZSA9IHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgbGV0IHBhcmVudFNjb3BlcyA9IG51bGw7XG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBwYXJlbnRTY29wZXMgPSBzZWdtZW50cy5zbGljZSgwLCBzZWdtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgICAgcGFyZW50U2NvcGVzLnJldmVyc2UoKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBuZXcgUGFyc2VkVGhlbWVSdWxlKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgcGFyZW50U2NvcGVzLFxuICAgICAgICBpLFxuICAgICAgICBmb250U3R5bGUsXG4gICAgICAgIGZvcmVncm91bmQsXG4gICAgICAgIGJhY2tncm91bmRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG52YXIgUGFyc2VkVGhlbWVSdWxlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzY29wZSwgcGFyZW50U2NvcGVzLCBpbmRleCwgZm9udFN0eWxlLCBmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMucGFyZW50U2NvcGVzID0gcGFyZW50U2NvcGVzO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmZvbnRTdHlsZSA9IGZvbnRTdHlsZTtcbiAgICB0aGlzLmZvcmVncm91bmQgPSBmb3JlZ3JvdW5kO1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG4gIH1cbn07XG52YXIgRm9udFN0eWxlID0gLyogQF9fUFVSRV9fICovICgoRm9udFN0eWxlMikgPT4ge1xuICBGb250U3R5bGUyW0ZvbnRTdHlsZTJbXCJOb3RTZXRcIl0gPSAtMV0gPSBcIk5vdFNldFwiO1xuICBGb250U3R5bGUyW0ZvbnRTdHlsZTJbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgRm9udFN0eWxlMltGb250U3R5bGUyW1wiSXRhbGljXCJdID0gMV0gPSBcIkl0YWxpY1wiO1xuICBGb250U3R5bGUyW0ZvbnRTdHlsZTJbXCJCb2xkXCJdID0gMl0gPSBcIkJvbGRcIjtcbiAgRm9udFN0eWxlMltGb250U3R5bGUyW1wiVW5kZXJsaW5lXCJdID0gNF0gPSBcIlVuZGVybGluZVwiO1xuICBGb250U3R5bGUyW0ZvbnRTdHlsZTJbXCJTdHJpa2V0aHJvdWdoXCJdID0gOF0gPSBcIlN0cmlrZXRocm91Z2hcIjtcbiAgcmV0dXJuIEZvbnRTdHlsZTI7XG59KShGb250U3R5bGUgfHwge30pO1xuZnVuY3Rpb24gcmVzb2x2ZVBhcnNlZFRoZW1lUnVsZXMocGFyc2VkVGhlbWVSdWxlcywgX2NvbG9yTWFwKSB7XG4gIHBhcnNlZFRoZW1lUnVsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgIGxldCByID0gc3RyY21wKGEuc2NvcGUsIGIuc2NvcGUpO1xuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgciA9IHN0ckFyckNtcChhLnBhcmVudFNjb3BlcywgYi5wYXJlbnRTY29wZXMpO1xuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICB9KTtcbiAgbGV0IGRlZmF1bHRGb250U3R5bGUgPSAwIC8qIE5vbmUgKi87XG4gIGxldCBkZWZhdWx0Rm9yZWdyb3VuZCA9IFwiIzAwMDAwMFwiO1xuICBsZXQgZGVmYXVsdEJhY2tncm91bmQgPSBcIiNmZmZmZmZcIjtcbiAgd2hpbGUgKHBhcnNlZFRoZW1lUnVsZXMubGVuZ3RoID49IDEgJiYgcGFyc2VkVGhlbWVSdWxlc1swXS5zY29wZSA9PT0gXCJcIikge1xuICAgIGxldCBpbmNvbWluZ0RlZmF1bHRzID0gcGFyc2VkVGhlbWVSdWxlcy5zaGlmdCgpO1xuICAgIGlmIChpbmNvbWluZ0RlZmF1bHRzLmZvbnRTdHlsZSAhPT0gLTEgLyogTm90U2V0ICovKSB7XG4gICAgICBkZWZhdWx0Rm9udFN0eWxlID0gaW5jb21pbmdEZWZhdWx0cy5mb250U3R5bGU7XG4gICAgfVxuICAgIGlmIChpbmNvbWluZ0RlZmF1bHRzLmZvcmVncm91bmQgIT09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRGb3JlZ3JvdW5kID0gaW5jb21pbmdEZWZhdWx0cy5mb3JlZ3JvdW5kO1xuICAgIH1cbiAgICBpZiAoaW5jb21pbmdEZWZhdWx0cy5iYWNrZ3JvdW5kICE9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0QmFja2dyb3VuZCA9IGluY29taW5nRGVmYXVsdHMuYmFja2dyb3VuZDtcbiAgICB9XG4gIH1cbiAgbGV0IGNvbG9yTWFwID0gbmV3IENvbG9yTWFwKF9jb2xvck1hcCk7XG4gIGxldCBkZWZhdWx0cyA9IG5ldyBTdHlsZUF0dHJpYnV0ZXMoZGVmYXVsdEZvbnRTdHlsZSwgY29sb3JNYXAuZ2V0SWQoZGVmYXVsdEZvcmVncm91bmQpLCBjb2xvck1hcC5nZXRJZChkZWZhdWx0QmFja2dyb3VuZCkpO1xuICBsZXQgcm9vdCA9IG5ldyBUaGVtZVRyaWVFbGVtZW50KG5ldyBUaGVtZVRyaWVFbGVtZW50UnVsZSgwLCBudWxsLCAtMSAvKiBOb3RTZXQgKi8sIDAsIDApLCBbXSk7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJzZWRUaGVtZVJ1bGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbGV0IHJ1bGUgPSBwYXJzZWRUaGVtZVJ1bGVzW2ldO1xuICAgIHJvb3QuaW5zZXJ0KDAsIHJ1bGUuc2NvcGUsIHJ1bGUucGFyZW50U2NvcGVzLCBydWxlLmZvbnRTdHlsZSwgY29sb3JNYXAuZ2V0SWQocnVsZS5mb3JlZ3JvdW5kKSwgY29sb3JNYXAuZ2V0SWQocnVsZS5iYWNrZ3JvdW5kKSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBUaGVtZShjb2xvck1hcCwgZGVmYXVsdHMsIHJvb3QpO1xufVxudmFyIENvbG9yTWFwID0gY2xhc3Mge1xuICBfaXNGcm96ZW47XG4gIF9sYXN0Q29sb3JJZDtcbiAgX2lkMmNvbG9yO1xuICBfY29sb3IyaWQ7XG4gIGNvbnN0cnVjdG9yKF9jb2xvck1hcCkge1xuICAgIHRoaXMuX2xhc3RDb2xvcklkID0gMDtcbiAgICB0aGlzLl9pZDJjb2xvciA9IFtdO1xuICAgIHRoaXMuX2NvbG9yMmlkID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoX2NvbG9yTWFwKSkge1xuICAgICAgdGhpcy5faXNGcm96ZW4gPSB0cnVlO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IF9jb2xvck1hcC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLl9jb2xvcjJpZFtfY29sb3JNYXBbaV1dID0gaTtcbiAgICAgICAgdGhpcy5faWQyY29sb3JbaV0gPSBfY29sb3JNYXBbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2lzRnJvemVuID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGdldElkKGNvbG9yKSB7XG4gICAgaWYgKGNvbG9yID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29sb3IgPSBjb2xvci50b1VwcGVyQ2FzZSgpO1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuX2NvbG9yMmlkW2NvbG9yXTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2lzRnJvemVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgY29sb3IgaW4gY29sb3IgbWFwIC0gJHtjb2xvcn1gKTtcbiAgICB9XG4gICAgdmFsdWUgPSArK3RoaXMuX2xhc3RDb2xvcklkO1xuICAgIHRoaXMuX2NvbG9yMmlkW2NvbG9yXSA9IHZhbHVlO1xuICAgIHRoaXMuX2lkMmNvbG9yW3ZhbHVlXSA9IGNvbG9yO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBnZXRDb2xvck1hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5faWQyY29sb3Iuc2xpY2UoMCk7XG4gIH1cbn07XG52YXIgZW1wdHlQYXJlbnRTY29wZXMgPSBPYmplY3QuZnJlZXplKFtdKTtcbnZhciBUaGVtZVRyaWVFbGVtZW50UnVsZSA9IGNsYXNzIF9UaGVtZVRyaWVFbGVtZW50UnVsZSB7XG4gIHNjb3BlRGVwdGg7XG4gIHBhcmVudFNjb3BlcztcbiAgZm9udFN0eWxlO1xuICBmb3JlZ3JvdW5kO1xuICBiYWNrZ3JvdW5kO1xuICBjb25zdHJ1Y3RvcihzY29wZURlcHRoLCBwYXJlbnRTY29wZXMsIGZvbnRTdHlsZSwgZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICAgIHRoaXMuc2NvcGVEZXB0aCA9IHNjb3BlRGVwdGg7XG4gICAgdGhpcy5wYXJlbnRTY29wZXMgPSBwYXJlbnRTY29wZXMgfHwgZW1wdHlQYXJlbnRTY29wZXM7XG4gICAgdGhpcy5mb250U3R5bGUgPSBmb250U3R5bGU7XG4gICAgdGhpcy5mb3JlZ3JvdW5kID0gZm9yZWdyb3VuZDtcbiAgICB0aGlzLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgX1RoZW1lVHJpZUVsZW1lbnRSdWxlKHRoaXMuc2NvcGVEZXB0aCwgdGhpcy5wYXJlbnRTY29wZXMsIHRoaXMuZm9udFN0eWxlLCB0aGlzLmZvcmVncm91bmQsIHRoaXMuYmFja2dyb3VuZCk7XG4gIH1cbiAgc3RhdGljIGNsb25lQXJyKGFycikge1xuICAgIGxldCByID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcltpXSA9IGFycltpXS5jbG9uZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICBhY2NlcHRPdmVyd3JpdGUoc2NvcGVEZXB0aCwgZm9udFN0eWxlLCBmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gICAgaWYgKHRoaXMuc2NvcGVEZXB0aCA+IHNjb3BlRGVwdGgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiaG93IGRpZCB0aGlzIGhhcHBlbj9cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2NvcGVEZXB0aCA9IHNjb3BlRGVwdGg7XG4gICAgfVxuICAgIGlmIChmb250U3R5bGUgIT09IC0xIC8qIE5vdFNldCAqLykge1xuICAgICAgdGhpcy5mb250U3R5bGUgPSBmb250U3R5bGU7XG4gICAgfVxuICAgIGlmIChmb3JlZ3JvdW5kICE9PSAwKSB7XG4gICAgICB0aGlzLmZvcmVncm91bmQgPSBmb3JlZ3JvdW5kO1xuICAgIH1cbiAgICBpZiAoYmFja2dyb3VuZCAhPT0gMCkge1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcbiAgICB9XG4gIH1cbn07XG52YXIgVGhlbWVUcmllRWxlbWVudCA9IGNsYXNzIF9UaGVtZVRyaWVFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoX21haW5SdWxlLCBydWxlc1dpdGhQYXJlbnRTY29wZXMgPSBbXSwgX2NoaWxkcmVuID0ge30pIHtcbiAgICB0aGlzLl9tYWluUnVsZSA9IF9tYWluUnVsZTtcbiAgICB0aGlzLl9jaGlsZHJlbiA9IF9jaGlsZHJlbjtcbiAgICB0aGlzLl9ydWxlc1dpdGhQYXJlbnRTY29wZXMgPSBydWxlc1dpdGhQYXJlbnRTY29wZXM7XG4gIH1cbiAgX3J1bGVzV2l0aFBhcmVudFNjb3BlcztcbiAgc3RhdGljIF9jbXBCeVNwZWNpZmljaXR5KGEsIGIpIHtcbiAgICBpZiAoYS5zY29wZURlcHRoICE9PSBiLnNjb3BlRGVwdGgpIHtcbiAgICAgIHJldHVybiBiLnNjb3BlRGVwdGggLSBhLnNjb3BlRGVwdGg7XG4gICAgfVxuICAgIGxldCBhUGFyZW50SW5kZXggPSAwO1xuICAgIGxldCBiUGFyZW50SW5kZXggPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoYS5wYXJlbnRTY29wZXNbYVBhcmVudEluZGV4XSA9PT0gXCI+XCIpIHtcbiAgICAgICAgYVBhcmVudEluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAoYi5wYXJlbnRTY29wZXNbYlBhcmVudEluZGV4XSA9PT0gXCI+XCIpIHtcbiAgICAgICAgYlBhcmVudEluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAoYVBhcmVudEluZGV4ID49IGEucGFyZW50U2NvcGVzLmxlbmd0aCB8fCBiUGFyZW50SW5kZXggPj0gYi5wYXJlbnRTY29wZXMubGVuZ3RoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50U2NvcGVMZW5ndGhEaWZmID0gYi5wYXJlbnRTY29wZXNbYlBhcmVudEluZGV4XS5sZW5ndGggLSBhLnBhcmVudFNjb3Blc1thUGFyZW50SW5kZXhdLmxlbmd0aDtcbiAgICAgIGlmIChwYXJlbnRTY29wZUxlbmd0aERpZmYgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudFNjb3BlTGVuZ3RoRGlmZjtcbiAgICAgIH1cbiAgICAgIGFQYXJlbnRJbmRleCsrO1xuICAgICAgYlBhcmVudEluZGV4Kys7XG4gICAgfVxuICAgIHJldHVybiBiLnBhcmVudFNjb3Blcy5sZW5ndGggLSBhLnBhcmVudFNjb3Blcy5sZW5ndGg7XG4gIH1cbiAgbWF0Y2goc2NvcGUpIHtcbiAgICBpZiAoc2NvcGUgIT09IFwiXCIpIHtcbiAgICAgIGxldCBkb3RJbmRleCA9IHNjb3BlLmluZGV4T2YoXCIuXCIpO1xuICAgICAgbGV0IGhlYWQ7XG4gICAgICBsZXQgdGFpbDtcbiAgICAgIGlmIChkb3RJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgaGVhZCA9IHNjb3BlO1xuICAgICAgICB0YWlsID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlYWQgPSBzY29wZS5zdWJzdHJpbmcoMCwgZG90SW5kZXgpO1xuICAgICAgICB0YWlsID0gc2NvcGUuc3Vic3RyaW5nKGRvdEluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoaGVhZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2hlYWRdLm1hdGNoKHRhaWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBydWxlcyA9IHRoaXMuX3J1bGVzV2l0aFBhcmVudFNjb3Blcy5jb25jYXQodGhpcy5fbWFpblJ1bGUpO1xuICAgIHJ1bGVzLnNvcnQoX1RoZW1lVHJpZUVsZW1lbnQuX2NtcEJ5U3BlY2lmaWNpdHkpO1xuICAgIHJldHVybiBydWxlcztcbiAgfVxuICBpbnNlcnQoc2NvcGVEZXB0aCwgc2NvcGUsIHBhcmVudFNjb3BlcywgZm9udFN0eWxlLCBmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gICAgaWYgKHNjb3BlID09PSBcIlwiKSB7XG4gICAgICB0aGlzLl9kb0luc2VydEhlcmUoc2NvcGVEZXB0aCwgcGFyZW50U2NvcGVzLCBmb250U3R5bGUsIGZvcmVncm91bmQsIGJhY2tncm91bmQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZG90SW5kZXggPSBzY29wZS5pbmRleE9mKFwiLlwiKTtcbiAgICBsZXQgaGVhZDtcbiAgICBsZXQgdGFpbDtcbiAgICBpZiAoZG90SW5kZXggPT09IC0xKSB7XG4gICAgICBoZWFkID0gc2NvcGU7XG4gICAgICB0YWlsID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZCA9IHNjb3BlLnN1YnN0cmluZygwLCBkb3RJbmRleCk7XG4gICAgICB0YWlsID0gc2NvcGUuc3Vic3RyaW5nKGRvdEluZGV4ICsgMSk7XG4gICAgfVxuICAgIGxldCBjaGlsZDtcbiAgICBpZiAodGhpcy5fY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoaGVhZCkpIHtcbiAgICAgIGNoaWxkID0gdGhpcy5fY2hpbGRyZW5baGVhZF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gbmV3IF9UaGVtZVRyaWVFbGVtZW50KHRoaXMuX21haW5SdWxlLmNsb25lKCksIFRoZW1lVHJpZUVsZW1lbnRSdWxlLmNsb25lQXJyKHRoaXMuX3J1bGVzV2l0aFBhcmVudFNjb3BlcykpO1xuICAgICAgdGhpcy5fY2hpbGRyZW5baGVhZF0gPSBjaGlsZDtcbiAgICB9XG4gICAgY2hpbGQuaW5zZXJ0KHNjb3BlRGVwdGggKyAxLCB0YWlsLCBwYXJlbnRTY29wZXMsIGZvbnRTdHlsZSwgZm9yZWdyb3VuZCwgYmFja2dyb3VuZCk7XG4gIH1cbiAgX2RvSW5zZXJ0SGVyZShzY29wZURlcHRoLCBwYXJlbnRTY29wZXMsIGZvbnRTdHlsZSwgZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICAgIGlmIChwYXJlbnRTY29wZXMgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX21haW5SdWxlLmFjY2VwdE92ZXJ3cml0ZShzY29wZURlcHRoLCBmb250U3R5bGUsIGZvcmVncm91bmQsIGJhY2tncm91bmQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5fcnVsZXNXaXRoUGFyZW50U2NvcGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgcnVsZSA9IHRoaXMuX3J1bGVzV2l0aFBhcmVudFNjb3Blc1tpXTtcbiAgICAgIGlmIChzdHJBcnJDbXAocnVsZS5wYXJlbnRTY29wZXMsIHBhcmVudFNjb3BlcykgPT09IDApIHtcbiAgICAgICAgcnVsZS5hY2NlcHRPdmVyd3JpdGUoc2NvcGVEZXB0aCwgZm9udFN0eWxlLCBmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZm9udFN0eWxlID09PSAtMSAvKiBOb3RTZXQgKi8pIHtcbiAgICAgIGZvbnRTdHlsZSA9IHRoaXMuX21haW5SdWxlLmZvbnRTdHlsZTtcbiAgICB9XG4gICAgaWYgKGZvcmVncm91bmQgPT09IDApIHtcbiAgICAgIGZvcmVncm91bmQgPSB0aGlzLl9tYWluUnVsZS5mb3JlZ3JvdW5kO1xuICAgIH1cbiAgICBpZiAoYmFja2dyb3VuZCA9PT0gMCkge1xuICAgICAgYmFja2dyb3VuZCA9IHRoaXMuX21haW5SdWxlLmJhY2tncm91bmQ7XG4gICAgfVxuICAgIHRoaXMuX3J1bGVzV2l0aFBhcmVudFNjb3Blcy5wdXNoKG5ldyBUaGVtZVRyaWVFbGVtZW50UnVsZShzY29wZURlcHRoLCBwYXJlbnRTY29wZXMsIGZvbnRTdHlsZSwgZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkpO1xuICB9XG59O1xuXG4vLyBzcmMvZW5jb2RlZFRva2VuQXR0cmlidXRlcy50c1xudmFyIEVuY29kZWRUb2tlbk1ldGFkYXRhID0gY2xhc3MgX0VuY29kZWRUb2tlbk1ldGFkYXRhIHtcbiAgc3RhdGljIHRvQmluYXJ5U3RyKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gZW5jb2RlZFRva2VuQXR0cmlidXRlcy50b1N0cmluZygyKS5wYWRTdGFydCgzMiwgXCIwXCIpO1xuICB9XG4gIHN0YXRpYyBwcmludChlbmNvZGVkVG9rZW5BdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgbGFuZ3VhZ2VJZCA9IF9FbmNvZGVkVG9rZW5NZXRhZGF0YS5nZXRMYW5ndWFnZUlkKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpO1xuICAgIGNvbnN0IHRva2VuVHlwZSA9IF9FbmNvZGVkVG9rZW5NZXRhZGF0YS5nZXRUb2tlblR5cGUoZW5jb2RlZFRva2VuQXR0cmlidXRlcyk7XG4gICAgY29uc3QgZm9udFN0eWxlID0gX0VuY29kZWRUb2tlbk1ldGFkYXRhLmdldEZvbnRTdHlsZShlbmNvZGVkVG9rZW5BdHRyaWJ1dGVzKTtcbiAgICBjb25zdCBmb3JlZ3JvdW5kID0gX0VuY29kZWRUb2tlbk1ldGFkYXRhLmdldEZvcmVncm91bmQoZW5jb2RlZFRva2VuQXR0cmlidXRlcyk7XG4gICAgY29uc3QgYmFja2dyb3VuZCA9IF9FbmNvZGVkVG9rZW5NZXRhZGF0YS5nZXRCYWNrZ3JvdW5kKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpO1xuICAgIGNvbnNvbGUubG9nKHtcbiAgICAgIGxhbmd1YWdlSWQsXG4gICAgICB0b2tlblR5cGUsXG4gICAgICBmb250U3R5bGUsXG4gICAgICBmb3JlZ3JvdW5kLFxuICAgICAgYmFja2dyb3VuZFxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBnZXRMYW5ndWFnZUlkKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMgJiAyNTUgLyogTEFOR1VBR0VJRF9NQVNLICovKSA+Pj4gMCAvKiBMQU5HVUFHRUlEX09GRlNFVCAqLztcbiAgfVxuICBzdGF0aWMgZ2V0VG9rZW5UeXBlKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMgJiA3NjggLyogVE9LRU5fVFlQRV9NQVNLICovKSA+Pj4gOCAvKiBUT0tFTl9UWVBFX09GRlNFVCAqLztcbiAgfVxuICBzdGF0aWMgY29udGFpbnNCYWxhbmNlZEJyYWNrZXRzKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMgJiAxMDI0IC8qIEJBTEFOQ0VEX0JSQUNLRVRTX01BU0sgKi8pICE9PSAwO1xuICB9XG4gIHN0YXRpYyBnZXRGb250U3R5bGUoZW5jb2RlZFRva2VuQXR0cmlidXRlcykge1xuICAgIHJldHVybiAoZW5jb2RlZFRva2VuQXR0cmlidXRlcyAmIDMwNzIwIC8qIEZPTlRfU1RZTEVfTUFTSyAqLykgPj4+IDExIC8qIEZPTlRfU1RZTEVfT0ZGU0VUICovO1xuICB9XG4gIHN0YXRpYyBnZXRGb3JlZ3JvdW5kKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMgJiAxNjc0NDQ0OCAvKiBGT1JFR1JPVU5EX01BU0sgKi8pID4+PiAxNSAvKiBGT1JFR1JPVU5EX09GRlNFVCAqLztcbiAgfVxuICBzdGF0aWMgZ2V0QmFja2dyb3VuZChlbmNvZGVkVG9rZW5BdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIChlbmNvZGVkVG9rZW5BdHRyaWJ1dGVzICYgNDI3ODE5MDA4MCAvKiBCQUNLR1JPVU5EX01BU0sgKi8pID4+PiAyNCAvKiBCQUNLR1JPVU5EX09GRlNFVCAqLztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZmllbGRzIGluIGBtZXRhZGF0YWAuXG4gICAqIEEgdmFsdWUgb2YgYDBgLCBgTm90U2V0YCBvciBgbnVsbGAgaW5kaWNhdGVzIHRoYXQgdGhlIGNvcnJlc3BvbmRpbmcgZmllbGQgc2hvdWxkIGJlIGxlZnQgYXMgaXMuXG4gICAqL1xuICBzdGF0aWMgc2V0KGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMsIGxhbmd1YWdlSWQsIHRva2VuVHlwZSwgY29udGFpbnNCYWxhbmNlZEJyYWNrZXRzLCBmb250U3R5bGUsIGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgICBsZXQgX2xhbmd1YWdlSWQgPSBfRW5jb2RlZFRva2VuTWV0YWRhdGEuZ2V0TGFuZ3VhZ2VJZChlbmNvZGVkVG9rZW5BdHRyaWJ1dGVzKTtcbiAgICBsZXQgX3Rva2VuVHlwZSA9IF9FbmNvZGVkVG9rZW5NZXRhZGF0YS5nZXRUb2tlblR5cGUoZW5jb2RlZFRva2VuQXR0cmlidXRlcyk7XG4gICAgbGV0IF9jb250YWluc0JhbGFuY2VkQnJhY2tldHNCaXQgPSBfRW5jb2RlZFRva2VuTWV0YWRhdGEuY29udGFpbnNCYWxhbmNlZEJyYWNrZXRzKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpID8gMSA6IDA7XG4gICAgbGV0IF9mb250U3R5bGUgPSBfRW5jb2RlZFRva2VuTWV0YWRhdGEuZ2V0Rm9udFN0eWxlKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpO1xuICAgIGxldCBfZm9yZWdyb3VuZCA9IF9FbmNvZGVkVG9rZW5NZXRhZGF0YS5nZXRGb3JlZ3JvdW5kKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpO1xuICAgIGxldCBfYmFja2dyb3VuZCA9IF9FbmNvZGVkVG9rZW5NZXRhZGF0YS5nZXRCYWNrZ3JvdW5kKGVuY29kZWRUb2tlbkF0dHJpYnV0ZXMpO1xuICAgIGlmIChsYW5ndWFnZUlkICE9PSAwKSB7XG4gICAgICBfbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgfVxuICAgIGlmICh0b2tlblR5cGUgIT09IDggLyogTm90U2V0ICovKSB7XG4gICAgICBfdG9rZW5UeXBlID0gZnJvbU9wdGlvbmFsVG9rZW5UeXBlKHRva2VuVHlwZSk7XG4gICAgfVxuICAgIGlmIChjb250YWluc0JhbGFuY2VkQnJhY2tldHMgIT09IG51bGwpIHtcbiAgICAgIF9jb250YWluc0JhbGFuY2VkQnJhY2tldHNCaXQgPSBjb250YWluc0JhbGFuY2VkQnJhY2tldHMgPyAxIDogMDtcbiAgICB9XG4gICAgaWYgKGZvbnRTdHlsZSAhPT0gLTEgLyogTm90U2V0ICovKSB7XG4gICAgICBfZm9udFN0eWxlID0gZm9udFN0eWxlO1xuICAgIH1cbiAgICBpZiAoZm9yZWdyb3VuZCAhPT0gMCkge1xuICAgICAgX2ZvcmVncm91bmQgPSBmb3JlZ3JvdW5kO1xuICAgIH1cbiAgICBpZiAoYmFja2dyb3VuZCAhPT0gMCkge1xuICAgICAgX2JhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuICAgIH1cbiAgICByZXR1cm4gKF9sYW5ndWFnZUlkIDw8IDAgLyogTEFOR1VBR0VJRF9PRkZTRVQgKi8gfCBfdG9rZW5UeXBlIDw8IDggLyogVE9LRU5fVFlQRV9PRkZTRVQgKi8gfCBfY29udGFpbnNCYWxhbmNlZEJyYWNrZXRzQml0IDw8IDEwIC8qIEJBTEFOQ0VEX0JSQUNLRVRTX09GRlNFVCAqLyB8IF9mb250U3R5bGUgPDwgMTEgLyogRk9OVF9TVFlMRV9PRkZTRVQgKi8gfCBfZm9yZWdyb3VuZCA8PCAxNSAvKiBGT1JFR1JPVU5EX09GRlNFVCAqLyB8IF9iYWNrZ3JvdW5kIDw8IDI0IC8qIEJBQ0tHUk9VTkRfT0ZGU0VUICovKSA+Pj4gMDtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvT3B0aW9uYWxUb2tlblR5cGUoc3RhbmRhcmRUeXBlKSB7XG4gIHJldHVybiBzdGFuZGFyZFR5cGU7XG59XG5mdW5jdGlvbiBmcm9tT3B0aW9uYWxUb2tlblR5cGUoc3RhbmRhcmRUeXBlKSB7XG4gIHJldHVybiBzdGFuZGFyZFR5cGU7XG59XG5cbi8vIHNyYy9tYXRjaGVyLnRzXG5mdW5jdGlvbiBjcmVhdGVNYXRjaGVycyhzZWxlY3RvciwgbWF0Y2hlc05hbWUpIHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBjb25zdCB0b2tlbml6ZXIgPSBuZXdUb2tlbml6ZXIoc2VsZWN0b3IpO1xuICBsZXQgdG9rZW4gPSB0b2tlbml6ZXIubmV4dCgpO1xuICB3aGlsZSAodG9rZW4gIT09IG51bGwpIHtcbiAgICBsZXQgcHJpb3JpdHkgPSAwO1xuICAgIGlmICh0b2tlbi5sZW5ndGggPT09IDIgJiYgdG9rZW4uY2hhckF0KDEpID09PSBcIjpcIikge1xuICAgICAgc3dpdGNoICh0b2tlbi5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSBcIlJcIjpcbiAgICAgICAgICBwcmlvcml0eSA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgcHJpb3JpdHkgPSAtMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBwcmlvcml0eSAke3Rva2VufSBpbiBzY29wZSBzZWxlY3RvcmApO1xuICAgICAgfVxuICAgICAgdG9rZW4gPSB0b2tlbml6ZXIubmV4dCgpO1xuICAgIH1cbiAgICBsZXQgbWF0Y2hlciA9IHBhcnNlQ29uanVuY3Rpb24oKTtcbiAgICByZXN1bHRzLnB1c2goeyBtYXRjaGVyLCBwcmlvcml0eSB9KTtcbiAgICBpZiAodG9rZW4gIT09IFwiLFwiKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdG9rZW4gPSB0b2tlbml6ZXIubmV4dCgpO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xuICBmdW5jdGlvbiBwYXJzZU9wZXJhbmQoKSB7XG4gICAgaWYgKHRva2VuID09PSBcIi1cIikge1xuICAgICAgdG9rZW4gPSB0b2tlbml6ZXIubmV4dCgpO1xuICAgICAgY29uc3QgZXhwcmVzc2lvblRvTmVnYXRlID0gcGFyc2VPcGVyYW5kKCk7XG4gICAgICByZXR1cm4gKG1hdGNoZXJJbnB1dCkgPT4gISFleHByZXNzaW9uVG9OZWdhdGUgJiYgIWV4cHJlc3Npb25Ub05lZ2F0ZShtYXRjaGVySW5wdXQpO1xuICAgIH1cbiAgICBpZiAodG9rZW4gPT09IFwiKFwiKSB7XG4gICAgICB0b2tlbiA9IHRva2VuaXplci5uZXh0KCk7XG4gICAgICBjb25zdCBleHByZXNzaW9uSW5QYXJlbnRzID0gcGFyc2VJbm5lckV4cHJlc3Npb24oKTtcbiAgICAgIGlmICh0b2tlbiA9PT0gXCIpXCIpIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIubmV4dCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4cHJlc3Npb25JblBhcmVudHM7XG4gICAgfVxuICAgIGlmIChpc0lkZW50aWZpZXIodG9rZW4pKSB7XG4gICAgICBjb25zdCBpZGVudGlmaWVycyA9IFtdO1xuICAgICAgZG8ge1xuICAgICAgICBpZGVudGlmaWVycy5wdXNoKHRva2VuKTtcbiAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIubmV4dCgpO1xuICAgICAgfSB3aGlsZSAoaXNJZGVudGlmaWVyKHRva2VuKSk7XG4gICAgICByZXR1cm4gKG1hdGNoZXJJbnB1dCkgPT4gbWF0Y2hlc05hbWUoaWRlbnRpZmllcnMsIG1hdGNoZXJJbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlQ29uanVuY3Rpb24oKSB7XG4gICAgY29uc3QgbWF0Y2hlcnMgPSBbXTtcbiAgICBsZXQgbWF0Y2hlciA9IHBhcnNlT3BlcmFuZCgpO1xuICAgIHdoaWxlIChtYXRjaGVyKSB7XG4gICAgICBtYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgbWF0Y2hlciA9IHBhcnNlT3BlcmFuZCgpO1xuICAgIH1cbiAgICByZXR1cm4gKG1hdGNoZXJJbnB1dCkgPT4gbWF0Y2hlcnMuZXZlcnkoKG1hdGNoZXIyKSA9PiBtYXRjaGVyMihtYXRjaGVySW5wdXQpKTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZUlubmVyRXhwcmVzc2lvbigpIHtcbiAgICBjb25zdCBtYXRjaGVycyA9IFtdO1xuICAgIGxldCBtYXRjaGVyID0gcGFyc2VDb25qdW5jdGlvbigpO1xuICAgIHdoaWxlIChtYXRjaGVyKSB7XG4gICAgICBtYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgaWYgKHRva2VuID09PSBcInxcIiB8fCB0b2tlbiA9PT0gXCIsXCIpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLm5leHQoKTtcbiAgICAgICAgfSB3aGlsZSAodG9rZW4gPT09IFwifFwiIHx8IHRva2VuID09PSBcIixcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG1hdGNoZXIgPSBwYXJzZUNvbmp1bmN0aW9uKCk7XG4gICAgfVxuICAgIHJldHVybiAobWF0Y2hlcklucHV0KSA9PiBtYXRjaGVycy5zb21lKChtYXRjaGVyMikgPT4gbWF0Y2hlcjIobWF0Y2hlcklucHV0KSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzSWRlbnRpZmllcih0b2tlbikge1xuICByZXR1cm4gISF0b2tlbiAmJiAhIXRva2VuLm1hdGNoKC9bXFx3XFwuOl0rLyk7XG59XG5mdW5jdGlvbiBuZXdUb2tlbml6ZXIoaW5wdXQpIHtcbiAgbGV0IHJlZ2V4ID0gLyhbTFJdOnxbXFx3XFwuOl1bXFx3XFwuOlxcLV0qfFtcXCxcXHxcXC1cXChcXCldKS9nO1xuICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKGlucHV0KTtcbiAgcmV0dXJuIHtcbiAgICBuZXh0OiAoKSA9PiB7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gbWF0Y2hbMF07XG4gICAgICBtYXRjaCA9IHJlZ2V4LmV4ZWMoaW5wdXQpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gIH07XG59XG5cbi8vIHNyYy9vbmlnTGliLnRzXG52YXIgRmluZE9wdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyAoKEZpbmRPcHRpb24yKSA9PiB7XG4gIEZpbmRPcHRpb24yW0ZpbmRPcHRpb24yW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gIEZpbmRPcHRpb24yW0ZpbmRPcHRpb24yW1wiTm90QmVnaW5TdHJpbmdcIl0gPSAxXSA9IFwiTm90QmVnaW5TdHJpbmdcIjtcbiAgRmluZE9wdGlvbjJbRmluZE9wdGlvbjJbXCJOb3RFbmRTdHJpbmdcIl0gPSAyXSA9IFwiTm90RW5kU3RyaW5nXCI7XG4gIEZpbmRPcHRpb24yW0ZpbmRPcHRpb24yW1wiTm90QmVnaW5Qb3NpdGlvblwiXSA9IDRdID0gXCJOb3RCZWdpblBvc2l0aW9uXCI7XG4gIEZpbmRPcHRpb24yW0ZpbmRPcHRpb24yW1wiRGVidWdDYWxsXCJdID0gOF0gPSBcIkRlYnVnQ2FsbFwiO1xuICByZXR1cm4gRmluZE9wdGlvbjI7XG59KShGaW5kT3B0aW9uIHx8IHt9KTtcbmZ1bmN0aW9uIGRpc3Bvc2VPbmlnU3RyaW5nKHN0cikge1xuICBpZiAodHlwZW9mIHN0ci5kaXNwb3NlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBzdHIuZGlzcG9zZSgpO1xuICB9XG59XG5cbi8vIHNyYy9ncmFtbWFyL2dyYW1tYXJEZXBlbmRlbmNpZXMudHNcbnZhciBUb3BMZXZlbFJ1bGVSZWZlcmVuY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlTmFtZSkge1xuICAgIHRoaXMuc2NvcGVOYW1lID0gc2NvcGVOYW1lO1xuICB9XG4gIHRvS2V5KCkge1xuICAgIHJldHVybiB0aGlzLnNjb3BlTmFtZTtcbiAgfVxufTtcbnZhciBUb3BMZXZlbFJlcG9zaXRvcnlSdWxlUmVmZXJlbmNlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzY29wZU5hbWUsIHJ1bGVOYW1lKSB7XG4gICAgdGhpcy5zY29wZU5hbWUgPSBzY29wZU5hbWU7XG4gICAgdGhpcy5ydWxlTmFtZSA9IHJ1bGVOYW1lO1xuICB9XG4gIHRvS2V5KCkge1xuICAgIHJldHVybiBgJHt0aGlzLnNjb3BlTmFtZX0jJHt0aGlzLnJ1bGVOYW1lfWA7XG4gIH1cbn07XG52YXIgRXh0ZXJuYWxSZWZlcmVuY2VDb2xsZWN0b3IgPSBjbGFzcyB7XG4gIF9yZWZlcmVuY2VzID0gW107XG4gIF9zZWVuUmVmZXJlbmNlS2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGdldCByZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWZlcmVuY2VzO1xuICB9XG4gIHZpc2l0ZWRSdWxlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgYWRkKHJlZmVyZW5jZSkge1xuICAgIGNvbnN0IGtleSA9IHJlZmVyZW5jZS50b0tleSgpO1xuICAgIGlmICh0aGlzLl9zZWVuUmVmZXJlbmNlS2V5cy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9zZWVuUmVmZXJlbmNlS2V5cy5hZGQoa2V5KTtcbiAgICB0aGlzLl9yZWZlcmVuY2VzLnB1c2gocmVmZXJlbmNlKTtcbiAgfVxufTtcbnZhciBTY29wZURlcGVuZGVuY3lQcm9jZXNzb3IgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHJlcG8sIGluaXRpYWxTY29wZU5hbWUpIHtcbiAgICB0aGlzLnJlcG8gPSByZXBvO1xuICAgIHRoaXMuaW5pdGlhbFNjb3BlTmFtZSA9IGluaXRpYWxTY29wZU5hbWU7XG4gICAgdGhpcy5zZWVuRnVsbFNjb3BlUmVxdWVzdHMuYWRkKHRoaXMuaW5pdGlhbFNjb3BlTmFtZSk7XG4gICAgdGhpcy5RID0gW25ldyBUb3BMZXZlbFJ1bGVSZWZlcmVuY2UodGhpcy5pbml0aWFsU2NvcGVOYW1lKV07XG4gIH1cbiAgc2VlbkZ1bGxTY29wZVJlcXVlc3RzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgc2VlblBhcnRpYWxTY29wZVJlcXVlc3RzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgUTtcbiAgcHJvY2Vzc1F1ZXVlKCkge1xuICAgIGNvbnN0IHEgPSB0aGlzLlE7XG4gICAgdGhpcy5RID0gW107XG4gICAgY29uc3QgZGVwcyA9IG5ldyBFeHRlcm5hbFJlZmVyZW5jZUNvbGxlY3RvcigpO1xuICAgIGZvciAoY29uc3QgZGVwIG9mIHEpIHtcbiAgICAgIGNvbGxlY3RSZWZlcmVuY2VzT2ZSZWZlcmVuY2UoZGVwLCB0aGlzLmluaXRpYWxTY29wZU5hbWUsIHRoaXMucmVwbywgZGVwcyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGVwIG9mIGRlcHMucmVmZXJlbmNlcykge1xuICAgICAgaWYgKGRlcCBpbnN0YW5jZW9mIFRvcExldmVsUnVsZVJlZmVyZW5jZSkge1xuICAgICAgICBpZiAodGhpcy5zZWVuRnVsbFNjb3BlUmVxdWVzdHMuaGFzKGRlcC5zY29wZU5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWVuRnVsbFNjb3BlUmVxdWVzdHMuYWRkKGRlcC5zY29wZU5hbWUpO1xuICAgICAgICB0aGlzLlEucHVzaChkZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuc2VlbkZ1bGxTY29wZVJlcXVlc3RzLmhhcyhkZXAuc2NvcGVOYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlZW5QYXJ0aWFsU2NvcGVSZXF1ZXN0cy5oYXMoZGVwLnRvS2V5KCkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWVuUGFydGlhbFNjb3BlUmVxdWVzdHMuYWRkKGRlcC50b0tleSgpKTtcbiAgICAgICAgdGhpcy5RLnB1c2goZGVwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBjb2xsZWN0UmVmZXJlbmNlc09mUmVmZXJlbmNlKHJlZmVyZW5jZSwgYmFzZUdyYW1tYXJTY29wZU5hbWUsIHJlcG8sIHJlc3VsdCkge1xuICBjb25zdCBzZWxmR3JhbW1hciA9IHJlcG8ubG9va3VwKHJlZmVyZW5jZS5zY29wZU5hbWUpO1xuICBpZiAoIXNlbGZHcmFtbWFyKSB7XG4gICAgaWYgKHJlZmVyZW5jZS5zY29wZU5hbWUgPT09IGJhc2VHcmFtbWFyU2NvcGVOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGdyYW1tYXIgcHJvdmlkZWQgZm9yIDwke2Jhc2VHcmFtbWFyU2NvcGVOYW1lfT5gKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGJhc2VHcmFtbWFyID0gcmVwby5sb29rdXAoYmFzZUdyYW1tYXJTY29wZU5hbWUpO1xuICBpZiAocmVmZXJlbmNlIGluc3RhbmNlb2YgVG9wTGV2ZWxSdWxlUmVmZXJlbmNlKSB7XG4gICAgY29sbGVjdEV4dGVybmFsUmVmZXJlbmNlc0luVG9wTGV2ZWxSdWxlKHsgYmFzZUdyYW1tYXIsIHNlbGZHcmFtbWFyIH0sIHJlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgY29sbGVjdEV4dGVybmFsUmVmZXJlbmNlc0luVG9wTGV2ZWxSZXBvc2l0b3J5UnVsZShcbiAgICAgIHJlZmVyZW5jZS5ydWxlTmFtZSxcbiAgICAgIHsgYmFzZUdyYW1tYXIsIHNlbGZHcmFtbWFyLCByZXBvc2l0b3J5OiBzZWxmR3JhbW1hci5yZXBvc2l0b3J5IH0sXG4gICAgICByZXN1bHRcbiAgICApO1xuICB9XG4gIGNvbnN0IGluamVjdGlvbnMgPSByZXBvLmluamVjdGlvbnMocmVmZXJlbmNlLnNjb3BlTmFtZSk7XG4gIGlmIChpbmplY3Rpb25zKSB7XG4gICAgZm9yIChjb25zdCBpbmplY3Rpb24gb2YgaW5qZWN0aW9ucykge1xuICAgICAgcmVzdWx0LmFkZChuZXcgVG9wTGV2ZWxSdWxlUmVmZXJlbmNlKGluamVjdGlvbikpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY29sbGVjdEV4dGVybmFsUmVmZXJlbmNlc0luVG9wTGV2ZWxSZXBvc2l0b3J5UnVsZShydWxlTmFtZSwgY29udGV4dCwgcmVzdWx0KSB7XG4gIGlmIChjb250ZXh0LnJlcG9zaXRvcnkgJiYgY29udGV4dC5yZXBvc2l0b3J5W3J1bGVOYW1lXSkge1xuICAgIGNvbnN0IHJ1bGUgPSBjb250ZXh0LnJlcG9zaXRvcnlbcnVsZU5hbWVdO1xuICAgIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblJ1bGVzKFtydWxlXSwgY29udGV4dCwgcmVzdWx0KTtcbiAgfVxufVxuZnVuY3Rpb24gY29sbGVjdEV4dGVybmFsUmVmZXJlbmNlc0luVG9wTGV2ZWxSdWxlKGNvbnRleHQsIHJlc3VsdCkge1xuICBpZiAoY29udGV4dC5zZWxmR3JhbW1hci5wYXR0ZXJucyAmJiBBcnJheS5pc0FycmF5KGNvbnRleHQuc2VsZkdyYW1tYXIucGF0dGVybnMpKSB7XG4gICAgY29sbGVjdEV4dGVybmFsUmVmZXJlbmNlc0luUnVsZXMoXG4gICAgICBjb250ZXh0LnNlbGZHcmFtbWFyLnBhdHRlcm5zLFxuICAgICAgeyAuLi5jb250ZXh0LCByZXBvc2l0b3J5OiBjb250ZXh0LnNlbGZHcmFtbWFyLnJlcG9zaXRvcnkgfSxcbiAgICAgIHJlc3VsdFxuICAgICk7XG4gIH1cbiAgaWYgKGNvbnRleHQuc2VsZkdyYW1tYXIuaW5qZWN0aW9ucykge1xuICAgIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblJ1bGVzKFxuICAgICAgT2JqZWN0LnZhbHVlcyhjb250ZXh0LnNlbGZHcmFtbWFyLmluamVjdGlvbnMpLFxuICAgICAgeyAuLi5jb250ZXh0LCByZXBvc2l0b3J5OiBjb250ZXh0LnNlbGZHcmFtbWFyLnJlcG9zaXRvcnkgfSxcbiAgICAgIHJlc3VsdFxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblJ1bGVzKHJ1bGVzLCBjb250ZXh0LCByZXN1bHQpIHtcbiAgZm9yIChjb25zdCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgaWYgKHJlc3VsdC52aXNpdGVkUnVsZS5oYXMocnVsZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQudmlzaXRlZFJ1bGUuYWRkKHJ1bGUpO1xuICAgIGNvbnN0IHBhdHRlcm5SZXBvc2l0b3J5ID0gcnVsZS5yZXBvc2l0b3J5ID8gbWVyZ2VPYmplY3RzKHt9LCBjb250ZXh0LnJlcG9zaXRvcnksIHJ1bGUucmVwb3NpdG9yeSkgOiBjb250ZXh0LnJlcG9zaXRvcnk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocnVsZS5wYXR0ZXJucykpIHtcbiAgICAgIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblJ1bGVzKHJ1bGUucGF0dGVybnMsIHsgLi4uY29udGV4dCwgcmVwb3NpdG9yeTogcGF0dGVyblJlcG9zaXRvcnkgfSwgcmVzdWx0KTtcbiAgICB9XG4gICAgY29uc3QgaW5jbHVkZSA9IHJ1bGUuaW5jbHVkZTtcbiAgICBpZiAoIWluY2x1ZGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCByZWZlcmVuY2UgPSBwYXJzZUluY2x1ZGUoaW5jbHVkZSk7XG4gICAgc3dpdGNoIChyZWZlcmVuY2Uua2luZCkge1xuICAgICAgY2FzZSAwIC8qIEJhc2UgKi86XG4gICAgICAgIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblRvcExldmVsUnVsZSh7IC4uLmNvbnRleHQsIHNlbGZHcmFtbWFyOiBjb250ZXh0LmJhc2VHcmFtbWFyIH0sIHJlc3VsdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxIC8qIFNlbGYgKi86XG4gICAgICAgIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblRvcExldmVsUnVsZShjb250ZXh0LCByZXN1bHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMiAvKiBSZWxhdGl2ZVJlZmVyZW5jZSAqLzpcbiAgICAgICAgY29sbGVjdEV4dGVybmFsUmVmZXJlbmNlc0luVG9wTGV2ZWxSZXBvc2l0b3J5UnVsZShyZWZlcmVuY2UucnVsZU5hbWUsIHsgLi4uY29udGV4dCwgcmVwb3NpdG9yeTogcGF0dGVyblJlcG9zaXRvcnkgfSwgcmVzdWx0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMgLyogVG9wTGV2ZWxSZWZlcmVuY2UgKi86XG4gICAgICBjYXNlIDQgLyogVG9wTGV2ZWxSZXBvc2l0b3J5UmVmZXJlbmNlICovOlxuICAgICAgICBjb25zdCBzZWxmR3JhbW1hciA9IHJlZmVyZW5jZS5zY29wZU5hbWUgPT09IGNvbnRleHQuc2VsZkdyYW1tYXIuc2NvcGVOYW1lID8gY29udGV4dC5zZWxmR3JhbW1hciA6IHJlZmVyZW5jZS5zY29wZU5hbWUgPT09IGNvbnRleHQuYmFzZUdyYW1tYXIuc2NvcGVOYW1lID8gY29udGV4dC5iYXNlR3JhbW1hciA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHNlbGZHcmFtbWFyKSB7XG4gICAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IHsgYmFzZUdyYW1tYXI6IGNvbnRleHQuYmFzZUdyYW1tYXIsIHNlbGZHcmFtbWFyLCByZXBvc2l0b3J5OiBwYXR0ZXJuUmVwb3NpdG9yeSB9O1xuICAgICAgICAgIGlmIChyZWZlcmVuY2Uua2luZCA9PT0gNCAvKiBUb3BMZXZlbFJlcG9zaXRvcnlSZWZlcmVuY2UgKi8pIHtcbiAgICAgICAgICAgIGNvbGxlY3RFeHRlcm5hbFJlZmVyZW5jZXNJblRvcExldmVsUmVwb3NpdG9yeVJ1bGUocmVmZXJlbmNlLnJ1bGVOYW1lLCBuZXdDb250ZXh0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xsZWN0RXh0ZXJuYWxSZWZlcmVuY2VzSW5Ub3BMZXZlbFJ1bGUobmV3Q29udGV4dCwgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlZmVyZW5jZS5raW5kID09PSA0IC8qIFRvcExldmVsUmVwb3NpdG9yeVJlZmVyZW5jZSAqLykge1xuICAgICAgICAgICAgcmVzdWx0LmFkZChuZXcgVG9wTGV2ZWxSZXBvc2l0b3J5UnVsZVJlZmVyZW5jZShyZWZlcmVuY2Uuc2NvcGVOYW1lLCByZWZlcmVuY2UucnVsZU5hbWUpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LmFkZChuZXcgVG9wTGV2ZWxSdWxlUmVmZXJlbmNlKHJlZmVyZW5jZS5zY29wZU5hbWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG52YXIgQmFzZVJlZmVyZW5jZSA9IGNsYXNzIHtcbiAga2luZCA9IDAgLyogQmFzZSAqLztcbn07XG52YXIgU2VsZlJlZmVyZW5jZSA9IGNsYXNzIHtcbiAga2luZCA9IDEgLyogU2VsZiAqLztcbn07XG52YXIgUmVsYXRpdmVSZWZlcmVuY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHJ1bGVOYW1lKSB7XG4gICAgdGhpcy5ydWxlTmFtZSA9IHJ1bGVOYW1lO1xuICB9XG4gIGtpbmQgPSAyIC8qIFJlbGF0aXZlUmVmZXJlbmNlICovO1xufTtcbnZhciBUb3BMZXZlbFJlZmVyZW5jZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Ioc2NvcGVOYW1lKSB7XG4gICAgdGhpcy5zY29wZU5hbWUgPSBzY29wZU5hbWU7XG4gIH1cbiAga2luZCA9IDMgLyogVG9wTGV2ZWxSZWZlcmVuY2UgKi87XG59O1xudmFyIFRvcExldmVsUmVwb3NpdG9yeVJlZmVyZW5jZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Ioc2NvcGVOYW1lLCBydWxlTmFtZSkge1xuICAgIHRoaXMuc2NvcGVOYW1lID0gc2NvcGVOYW1lO1xuICAgIHRoaXMucnVsZU5hbWUgPSBydWxlTmFtZTtcbiAgfVxuICBraW5kID0gNCAvKiBUb3BMZXZlbFJlcG9zaXRvcnlSZWZlcmVuY2UgKi87XG59O1xuZnVuY3Rpb24gcGFyc2VJbmNsdWRlKGluY2x1ZGUpIHtcbiAgaWYgKGluY2x1ZGUgPT09IFwiJGJhc2VcIikge1xuICAgIHJldHVybiBuZXcgQmFzZVJlZmVyZW5jZSgpO1xuICB9IGVsc2UgaWYgKGluY2x1ZGUgPT09IFwiJHNlbGZcIikge1xuICAgIHJldHVybiBuZXcgU2VsZlJlZmVyZW5jZSgpO1xuICB9XG4gIGNvbnN0IGluZGV4T2ZTaGFycCA9IGluY2x1ZGUuaW5kZXhPZihcIiNcIik7XG4gIGlmIChpbmRleE9mU2hhcnAgPT09IC0xKSB7XG4gICAgcmV0dXJuIG5ldyBUb3BMZXZlbFJlZmVyZW5jZShpbmNsdWRlKTtcbiAgfSBlbHNlIGlmIChpbmRleE9mU2hhcnAgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IFJlbGF0aXZlUmVmZXJlbmNlKGluY2x1ZGUuc3Vic3RyaW5nKDEpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzY29wZU5hbWUgPSBpbmNsdWRlLnN1YnN0cmluZygwLCBpbmRleE9mU2hhcnApO1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gaW5jbHVkZS5zdWJzdHJpbmcoaW5kZXhPZlNoYXJwICsgMSk7XG4gICAgcmV0dXJuIG5ldyBUb3BMZXZlbFJlcG9zaXRvcnlSZWZlcmVuY2Uoc2NvcGVOYW1lLCBydWxlTmFtZSk7XG4gIH1cbn1cblxuLy8gc3JjL3J1bGUudHNcbnZhciBIQVNfQkFDS19SRUZFUkVOQ0VTID0gL1xcXFwoXFxkKykvO1xudmFyIEJBQ0tfUkVGRVJFTkNJTkdfRU5EID0gL1xcXFwoXFxkKykvZztcbnZhciBydWxlSWRTeW1ib2wgPSBTeW1ib2woXCJSdWxlSWRcIik7XG52YXIgZW5kUnVsZUlkID0gLTE7XG52YXIgd2hpbGVSdWxlSWQgPSAtMjtcbmZ1bmN0aW9uIHJ1bGVJZEZyb21OdW1iZXIoaWQpIHtcbiAgcmV0dXJuIGlkO1xufVxuZnVuY3Rpb24gcnVsZUlkVG9OdW1iZXIoaWQpIHtcbiAgcmV0dXJuIGlkO1xufVxudmFyIFJ1bGUgPSBjbGFzcyB7XG4gICRsb2NhdGlvbjtcbiAgaWQ7XG4gIF9uYW1lSXNDYXB0dXJpbmc7XG4gIF9uYW1lO1xuICBfY29udGVudE5hbWVJc0NhcHR1cmluZztcbiAgX2NvbnRlbnROYW1lO1xuICBjb25zdHJ1Y3RvcigkbG9jYXRpb24sIGlkLCBuYW1lLCBjb250ZW50TmFtZSkge1xuICAgIHRoaXMuJGxvY2F0aW9uID0gJGxvY2F0aW9uO1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLl9uYW1lID0gbmFtZSB8fCBudWxsO1xuICAgIHRoaXMuX25hbWVJc0NhcHR1cmluZyA9IFJlZ2V4U291cmNlLmhhc0NhcHR1cmVzKHRoaXMuX25hbWUpO1xuICAgIHRoaXMuX2NvbnRlbnROYW1lID0gY29udGVudE5hbWUgfHwgbnVsbDtcbiAgICB0aGlzLl9jb250ZW50TmFtZUlzQ2FwdHVyaW5nID0gUmVnZXhTb3VyY2UuaGFzQ2FwdHVyZXModGhpcy5fY29udGVudE5hbWUpO1xuICB9XG4gIGdldCBkZWJ1Z05hbWUoKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLiRsb2NhdGlvbiA/IGAke2Jhc2VuYW1lKHRoaXMuJGxvY2F0aW9uLmZpbGVuYW1lKX06JHt0aGlzLiRsb2NhdGlvbi5saW5lfWAgOiBcInVua25vd25cIjtcbiAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSMke3RoaXMuaWR9IEAgJHtsb2NhdGlvbn1gO1xuICB9XG4gIGdldE5hbWUobGluZVRleHQsIGNhcHR1cmVJbmRpY2VzKSB7XG4gICAgaWYgKCF0aGlzLl9uYW1lSXNDYXB0dXJpbmcgfHwgdGhpcy5fbmFtZSA9PT0gbnVsbCB8fCBsaW5lVGV4dCA9PT0gbnVsbCB8fCBjYXB0dXJlSW5kaWNlcyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuICAgIHJldHVybiBSZWdleFNvdXJjZS5yZXBsYWNlQ2FwdHVyZXModGhpcy5fbmFtZSwgbGluZVRleHQsIGNhcHR1cmVJbmRpY2VzKTtcbiAgfVxuICBnZXRDb250ZW50TmFtZShsaW5lVGV4dCwgY2FwdHVyZUluZGljZXMpIHtcbiAgICBpZiAoIXRoaXMuX2NvbnRlbnROYW1lSXNDYXB0dXJpbmcgfHwgdGhpcy5fY29udGVudE5hbWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlZ2V4U291cmNlLnJlcGxhY2VDYXB0dXJlcyh0aGlzLl9jb250ZW50TmFtZSwgbGluZVRleHQsIGNhcHR1cmVJbmRpY2VzKTtcbiAgfVxufTtcbnZhciBDYXB0dXJlUnVsZSA9IGNsYXNzIGV4dGVuZHMgUnVsZSB7XG4gIHJldG9rZW5pemVDYXB0dXJlZFdpdGhSdWxlSWQ7XG4gIGNvbnN0cnVjdG9yKCRsb2NhdGlvbiwgaWQsIG5hbWUsIGNvbnRlbnROYW1lLCByZXRva2VuaXplQ2FwdHVyZWRXaXRoUnVsZUlkKSB7XG4gICAgc3VwZXIoJGxvY2F0aW9uLCBpZCwgbmFtZSwgY29udGVudE5hbWUpO1xuICAgIHRoaXMucmV0b2tlbml6ZUNhcHR1cmVkV2l0aFJ1bGVJZCA9IHJldG9rZW5pemVDYXB0dXJlZFdpdGhSdWxlSWQ7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgfVxuICBjb2xsZWN0UGF0dGVybnMoZ3JhbW1hciwgb3V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IHN1cHBvcnRlZCFcIik7XG4gIH1cbiAgY29tcGlsZShncmFtbWFyLCBlbmRSZWdleFNvdXJjZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBzdXBwb3J0ZWQhXCIpO1xuICB9XG4gIGNvbXBpbGVBRyhncmFtbWFyLCBlbmRSZWdleFNvdXJjZSwgYWxsb3dBLCBhbGxvd0cpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIVwiKTtcbiAgfVxufTtcbnZhciBNYXRjaFJ1bGUgPSBjbGFzcyBleHRlbmRzIFJ1bGUge1xuICBfbWF0Y2g7XG4gIGNhcHR1cmVzO1xuICBfY2FjaGVkQ29tcGlsZWRQYXR0ZXJucztcbiAgY29uc3RydWN0b3IoJGxvY2F0aW9uLCBpZCwgbmFtZSwgbWF0Y2gsIGNhcHR1cmVzKSB7XG4gICAgc3VwZXIoJGxvY2F0aW9uLCBpZCwgbmFtZSwgbnVsbCk7XG4gICAgdGhpcy5fbWF0Y2ggPSBuZXcgUmVnRXhwU291cmNlKG1hdGNoLCB0aGlzLmlkKTtcbiAgICB0aGlzLmNhcHR1cmVzID0gY2FwdHVyZXM7XG4gICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyA9IG51bGw7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucykge1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucy5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgZ2V0IGRlYnVnTWF0Y2hSZWdFeHAoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuX21hdGNoLnNvdXJjZX1gO1xuICB9XG4gIGNvbGxlY3RQYXR0ZXJucyhncmFtbWFyLCBvdXQpIHtcbiAgICBvdXQucHVzaCh0aGlzLl9tYXRjaCk7XG4gIH1cbiAgY29tcGlsZShncmFtbWFyLCBlbmRSZWdleFNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIpLmNvbXBpbGUoZ3JhbW1hcik7XG4gIH1cbiAgY29tcGlsZUFHKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlLCBhbGxvd0EsIGFsbG93Rykge1xuICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIpLmNvbXBpbGVBRyhncmFtbWFyLCBhbGxvd0EsIGFsbG93Ryk7XG4gIH1cbiAgX2dldENhY2hlZENvbXBpbGVkUGF0dGVybnMoZ3JhbW1hcikge1xuICAgIGlmICghdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucykge1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyA9IG5ldyBSZWdFeHBTb3VyY2VMaXN0KCk7XG4gICAgICB0aGlzLmNvbGxlY3RQYXR0ZXJucyhncmFtbWFyLCB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZENvbXBpbGVkUGF0dGVybnM7XG4gIH1cbn07XG52YXIgSW5jbHVkZU9ubHlSdWxlID0gY2xhc3MgZXh0ZW5kcyBSdWxlIHtcbiAgaGFzTWlzc2luZ1BhdHRlcm5zO1xuICBwYXR0ZXJucztcbiAgX2NhY2hlZENvbXBpbGVkUGF0dGVybnM7XG4gIGNvbnN0cnVjdG9yKCRsb2NhdGlvbiwgaWQsIG5hbWUsIGNvbnRlbnROYW1lLCBwYXR0ZXJucykge1xuICAgIHN1cGVyKCRsb2NhdGlvbiwgaWQsIG5hbWUsIGNvbnRlbnROYW1lKTtcbiAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnMucGF0dGVybnM7XG4gICAgdGhpcy5oYXNNaXNzaW5nUGF0dGVybnMgPSBwYXR0ZXJucy5oYXNNaXNzaW5nUGF0dGVybnM7XG4gICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyA9IG51bGw7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucykge1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucy5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgY29sbGVjdFBhdHRlcm5zKGdyYW1tYXIsIG91dCkge1xuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiB0aGlzLnBhdHRlcm5zKSB7XG4gICAgICBjb25zdCBydWxlID0gZ3JhbW1hci5nZXRSdWxlKHBhdHRlcm4pO1xuICAgICAgcnVsZS5jb2xsZWN0UGF0dGVybnMoZ3JhbW1hciwgb3V0KTtcbiAgICB9XG4gIH1cbiAgY29tcGlsZShncmFtbWFyLCBlbmRSZWdleFNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIpLmNvbXBpbGUoZ3JhbW1hcik7XG4gIH1cbiAgY29tcGlsZUFHKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlLCBhbGxvd0EsIGFsbG93Rykge1xuICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIpLmNvbXBpbGVBRyhncmFtbWFyLCBhbGxvd0EsIGFsbG93Ryk7XG4gIH1cbiAgX2dldENhY2hlZENvbXBpbGVkUGF0dGVybnMoZ3JhbW1hcikge1xuICAgIGlmICghdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucykge1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyA9IG5ldyBSZWdFeHBTb3VyY2VMaXN0KCk7XG4gICAgICB0aGlzLmNvbGxlY3RQYXR0ZXJucyhncmFtbWFyLCB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZENvbXBpbGVkUGF0dGVybnM7XG4gIH1cbn07XG52YXIgQmVnaW5FbmRSdWxlID0gY2xhc3MgZXh0ZW5kcyBSdWxlIHtcbiAgX2JlZ2luO1xuICBiZWdpbkNhcHR1cmVzO1xuICBfZW5kO1xuICBlbmRIYXNCYWNrUmVmZXJlbmNlcztcbiAgZW5kQ2FwdHVyZXM7XG4gIGFwcGx5RW5kUGF0dGVybkxhc3Q7XG4gIGhhc01pc3NpbmdQYXR0ZXJucztcbiAgcGF0dGVybnM7XG4gIF9jYWNoZWRDb21waWxlZFBhdHRlcm5zO1xuICBjb25zdHJ1Y3RvcigkbG9jYXRpb24sIGlkLCBuYW1lLCBjb250ZW50TmFtZSwgYmVnaW4sIGJlZ2luQ2FwdHVyZXMsIGVuZCwgZW5kQ2FwdHVyZXMsIGFwcGx5RW5kUGF0dGVybkxhc3QsIHBhdHRlcm5zKSB7XG4gICAgc3VwZXIoJGxvY2F0aW9uLCBpZCwgbmFtZSwgY29udGVudE5hbWUpO1xuICAgIHRoaXMuX2JlZ2luID0gbmV3IFJlZ0V4cFNvdXJjZShiZWdpbiwgdGhpcy5pZCk7XG4gICAgdGhpcy5iZWdpbkNhcHR1cmVzID0gYmVnaW5DYXB0dXJlcztcbiAgICB0aGlzLl9lbmQgPSBuZXcgUmVnRXhwU291cmNlKGVuZCA/IGVuZCA6IFwiXFx1RkZGRlwiLCAtMSk7XG4gICAgdGhpcy5lbmRIYXNCYWNrUmVmZXJlbmNlcyA9IHRoaXMuX2VuZC5oYXNCYWNrUmVmZXJlbmNlcztcbiAgICB0aGlzLmVuZENhcHR1cmVzID0gZW5kQ2FwdHVyZXM7XG4gICAgdGhpcy5hcHBseUVuZFBhdHRlcm5MYXN0ID0gYXBwbHlFbmRQYXR0ZXJuTGFzdCB8fCBmYWxzZTtcbiAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnMucGF0dGVybnM7XG4gICAgdGhpcy5oYXNNaXNzaW5nUGF0dGVybnMgPSBwYXR0ZXJucy5oYXNNaXNzaW5nUGF0dGVybnM7XG4gICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyA9IG51bGw7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucykge1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucy5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgZ2V0IGRlYnVnQmVnaW5SZWdFeHAoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuX2JlZ2luLnNvdXJjZX1gO1xuICB9XG4gIGdldCBkZWJ1Z0VuZFJlZ0V4cCgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5fZW5kLnNvdXJjZX1gO1xuICB9XG4gIGdldEVuZFdpdGhSZXNvbHZlZEJhY2tSZWZlcmVuY2VzKGxpbmVUZXh0LCBjYXB0dXJlSW5kaWNlcykge1xuICAgIHJldHVybiB0aGlzLl9lbmQucmVzb2x2ZUJhY2tSZWZlcmVuY2VzKGxpbmVUZXh0LCBjYXB0dXJlSW5kaWNlcyk7XG4gIH1cbiAgY29sbGVjdFBhdHRlcm5zKGdyYW1tYXIsIG91dCkge1xuICAgIG91dC5wdXNoKHRoaXMuX2JlZ2luKTtcbiAgfVxuICBjb21waWxlKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldENhY2hlZENvbXBpbGVkUGF0dGVybnMoZ3JhbW1hciwgZW5kUmVnZXhTb3VyY2UpLmNvbXBpbGUoZ3JhbW1hcik7XG4gIH1cbiAgY29tcGlsZUFHKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlLCBhbGxvd0EsIGFsbG93Rykge1xuICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlKS5jb21waWxlQUcoZ3JhbW1hciwgYWxsb3dBLCBhbGxvd0cpO1xuICB9XG4gIF9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlKSB7XG4gICAgaWYgKCF0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zKSB7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zID0gbmV3IFJlZ0V4cFNvdXJjZUxpc3QoKTtcbiAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiB0aGlzLnBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IHJ1bGUgPSBncmFtbWFyLmdldFJ1bGUocGF0dGVybik7XG4gICAgICAgIHJ1bGUuY29sbGVjdFBhdHRlcm5zKGdyYW1tYXIsIHRoaXMuX2NhY2hlZENvbXBpbGVkUGF0dGVybnMpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYXBwbHlFbmRQYXR0ZXJuTGFzdCkge1xuICAgICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zLnB1c2godGhpcy5fZW5kLmhhc0JhY2tSZWZlcmVuY2VzID8gdGhpcy5fZW5kLmNsb25lKCkgOiB0aGlzLl9lbmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucy51bnNoaWZ0KHRoaXMuX2VuZC5oYXNCYWNrUmVmZXJlbmNlcyA/IHRoaXMuX2VuZC5jbG9uZSgpIDogdGhpcy5fZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuX2VuZC5oYXNCYWNrUmVmZXJlbmNlcykge1xuICAgICAgaWYgKHRoaXMuYXBwbHlFbmRQYXR0ZXJuTGFzdCkge1xuICAgICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zLnNldFNvdXJjZSh0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zLmxlbmd0aCgpIC0gMSwgZW5kUmVnZXhTb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucy5zZXRTb3VyY2UoMCwgZW5kUmVnZXhTb3VyY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucztcbiAgfVxufTtcbnZhciBCZWdpbldoaWxlUnVsZSA9IGNsYXNzIGV4dGVuZHMgUnVsZSB7XG4gIF9iZWdpbjtcbiAgYmVnaW5DYXB0dXJlcztcbiAgd2hpbGVDYXB0dXJlcztcbiAgX3doaWxlO1xuICB3aGlsZUhhc0JhY2tSZWZlcmVuY2VzO1xuICBoYXNNaXNzaW5nUGF0dGVybnM7XG4gIHBhdHRlcm5zO1xuICBfY2FjaGVkQ29tcGlsZWRQYXR0ZXJucztcbiAgX2NhY2hlZENvbXBpbGVkV2hpbGVQYXR0ZXJucztcbiAgY29uc3RydWN0b3IoJGxvY2F0aW9uLCBpZCwgbmFtZSwgY29udGVudE5hbWUsIGJlZ2luLCBiZWdpbkNhcHR1cmVzLCBfd2hpbGUsIHdoaWxlQ2FwdHVyZXMsIHBhdHRlcm5zKSB7XG4gICAgc3VwZXIoJGxvY2F0aW9uLCBpZCwgbmFtZSwgY29udGVudE5hbWUpO1xuICAgIHRoaXMuX2JlZ2luID0gbmV3IFJlZ0V4cFNvdXJjZShiZWdpbiwgdGhpcy5pZCk7XG4gICAgdGhpcy5iZWdpbkNhcHR1cmVzID0gYmVnaW5DYXB0dXJlcztcbiAgICB0aGlzLndoaWxlQ2FwdHVyZXMgPSB3aGlsZUNhcHR1cmVzO1xuICAgIHRoaXMuX3doaWxlID0gbmV3IFJlZ0V4cFNvdXJjZShfd2hpbGUsIHdoaWxlUnVsZUlkKTtcbiAgICB0aGlzLndoaWxlSGFzQmFja1JlZmVyZW5jZXMgPSB0aGlzLl93aGlsZS5oYXNCYWNrUmVmZXJlbmNlcztcbiAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnMucGF0dGVybnM7XG4gICAgdGhpcy5oYXNNaXNzaW5nUGF0dGVybnMgPSBwYXR0ZXJucy5oYXNNaXNzaW5nUGF0dGVybnM7XG4gICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyA9IG51bGw7XG4gICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRXaGlsZVBhdHRlcm5zID0gbnVsbDtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zKSB7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX2NhY2hlZENvbXBpbGVkUGF0dGVybnMgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY2FjaGVkQ29tcGlsZWRXaGlsZVBhdHRlcm5zKSB7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFdoaWxlUGF0dGVybnMuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRXaGlsZVBhdHRlcm5zID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgZ2V0IGRlYnVnQmVnaW5SZWdFeHAoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuX2JlZ2luLnNvdXJjZX1gO1xuICB9XG4gIGdldCBkZWJ1Z1doaWxlUmVnRXhwKCkge1xuICAgIHJldHVybiBgJHt0aGlzLl93aGlsZS5zb3VyY2V9YDtcbiAgfVxuICBnZXRXaGlsZVdpdGhSZXNvbHZlZEJhY2tSZWZlcmVuY2VzKGxpbmVUZXh0LCBjYXB0dXJlSW5kaWNlcykge1xuICAgIHJldHVybiB0aGlzLl93aGlsZS5yZXNvbHZlQmFja1JlZmVyZW5jZXMobGluZVRleHQsIGNhcHR1cmVJbmRpY2VzKTtcbiAgfVxuICBjb2xsZWN0UGF0dGVybnMoZ3JhbW1hciwgb3V0KSB7XG4gICAgb3V0LnB1c2godGhpcy5fYmVnaW4pO1xuICB9XG4gIGNvbXBpbGUoZ3JhbW1hciwgZW5kUmVnZXhTb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGVkQ29tcGlsZWRQYXR0ZXJucyhncmFtbWFyKS5jb21waWxlKGdyYW1tYXIpO1xuICB9XG4gIGNvbXBpbGVBRyhncmFtbWFyLCBlbmRSZWdleFNvdXJjZSwgYWxsb3dBLCBhbGxvd0cpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2FjaGVkQ29tcGlsZWRQYXR0ZXJucyhncmFtbWFyKS5jb21waWxlQUcoZ3JhbW1hciwgYWxsb3dBLCBhbGxvd0cpO1xuICB9XG4gIF9nZXRDYWNoZWRDb21waWxlZFBhdHRlcm5zKGdyYW1tYXIpIHtcbiAgICBpZiAoIXRoaXMuX2NhY2hlZENvbXBpbGVkUGF0dGVybnMpIHtcbiAgICAgIHRoaXMuX2NhY2hlZENvbXBpbGVkUGF0dGVybnMgPSBuZXcgUmVnRXhwU291cmNlTGlzdCgpO1xuICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHRoaXMucGF0dGVybnMpIHtcbiAgICAgICAgY29uc3QgcnVsZSA9IGdyYW1tYXIuZ2V0UnVsZShwYXR0ZXJuKTtcbiAgICAgICAgcnVsZS5jb2xsZWN0UGF0dGVybnMoZ3JhbW1hciwgdGhpcy5fY2FjaGVkQ29tcGlsZWRQYXR0ZXJucyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jYWNoZWRDb21waWxlZFBhdHRlcm5zO1xuICB9XG4gIGNvbXBpbGVXaGlsZShncmFtbWFyLCBlbmRSZWdleFNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLl9nZXRDYWNoZWRDb21waWxlZFdoaWxlUGF0dGVybnMoZ3JhbW1hciwgZW5kUmVnZXhTb3VyY2UpLmNvbXBpbGUoZ3JhbW1hcik7XG4gIH1cbiAgY29tcGlsZVdoaWxlQUcoZ3JhbW1hciwgZW5kUmVnZXhTb3VyY2UsIGFsbG93QSwgYWxsb3dHKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldENhY2hlZENvbXBpbGVkV2hpbGVQYXR0ZXJucyhncmFtbWFyLCBlbmRSZWdleFNvdXJjZSkuY29tcGlsZUFHKGdyYW1tYXIsIGFsbG93QSwgYWxsb3dHKTtcbiAgfVxuICBfZ2V0Q2FjaGVkQ29tcGlsZWRXaGlsZVBhdHRlcm5zKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlKSB7XG4gICAgaWYgKCF0aGlzLl9jYWNoZWRDb21waWxlZFdoaWxlUGF0dGVybnMpIHtcbiAgICAgIHRoaXMuX2NhY2hlZENvbXBpbGVkV2hpbGVQYXR0ZXJucyA9IG5ldyBSZWdFeHBTb3VyY2VMaXN0KCk7XG4gICAgICB0aGlzLl9jYWNoZWRDb21waWxlZFdoaWxlUGF0dGVybnMucHVzaCh0aGlzLl93aGlsZS5oYXNCYWNrUmVmZXJlbmNlcyA/IHRoaXMuX3doaWxlLmNsb25lKCkgOiB0aGlzLl93aGlsZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl93aGlsZS5oYXNCYWNrUmVmZXJlbmNlcykge1xuICAgICAgdGhpcy5fY2FjaGVkQ29tcGlsZWRXaGlsZVBhdHRlcm5zLnNldFNvdXJjZSgwLCBlbmRSZWdleFNvdXJjZSA/IGVuZFJlZ2V4U291cmNlIDogXCJcXHVGRkZGXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkQ29tcGlsZWRXaGlsZVBhdHRlcm5zO1xuICB9XG59O1xudmFyIFJ1bGVGYWN0b3J5ID0gY2xhc3MgX1J1bGVGYWN0b3J5IHtcbiAgc3RhdGljIGNyZWF0ZUNhcHR1cmVSdWxlKGhlbHBlciwgJGxvY2F0aW9uLCBuYW1lLCBjb250ZW50TmFtZSwgcmV0b2tlbml6ZUNhcHR1cmVkV2l0aFJ1bGVJZCkge1xuICAgIHJldHVybiBoZWxwZXIucmVnaXN0ZXJSdWxlKChpZCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBDYXB0dXJlUnVsZSgkbG9jYXRpb24sIGlkLCBuYW1lLCBjb250ZW50TmFtZSwgcmV0b2tlbml6ZUNhcHR1cmVkV2l0aFJ1bGVJZCk7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGdldENvbXBpbGVkUnVsZUlkKGRlc2MsIGhlbHBlciwgcmVwb3NpdG9yeSkge1xuICAgIGlmICghZGVzYy5pZCkge1xuICAgICAgaGVscGVyLnJlZ2lzdGVyUnVsZSgoaWQpID0+IHtcbiAgICAgICAgZGVzYy5pZCA9IGlkO1xuICAgICAgICBpZiAoZGVzYy5tYXRjaCkge1xuICAgICAgICAgIHJldHVybiBuZXcgTWF0Y2hSdWxlKFxuICAgICAgICAgICAgZGVzYy4kdnNjb2RlVGV4dG1hdGVMb2NhdGlvbixcbiAgICAgICAgICAgIGRlc2MuaWQsXG4gICAgICAgICAgICBkZXNjLm5hbWUsXG4gICAgICAgICAgICBkZXNjLm1hdGNoLFxuICAgICAgICAgICAgX1J1bGVGYWN0b3J5Ll9jb21waWxlQ2FwdHVyZXMoZGVzYy5jYXB0dXJlcywgaGVscGVyLCByZXBvc2l0b3J5KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkZXNjLmJlZ2luID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaWYgKGRlc2MucmVwb3NpdG9yeSkge1xuICAgICAgICAgICAgcmVwb3NpdG9yeSA9IG1lcmdlT2JqZWN0cyh7fSwgcmVwb3NpdG9yeSwgZGVzYy5yZXBvc2l0b3J5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHBhdHRlcm5zID0gZGVzYy5wYXR0ZXJucztcbiAgICAgICAgICBpZiAodHlwZW9mIHBhdHRlcm5zID09PSBcInVuZGVmaW5lZFwiICYmIGRlc2MuaW5jbHVkZSkge1xuICAgICAgICAgICAgcGF0dGVybnMgPSBbeyBpbmNsdWRlOiBkZXNjLmluY2x1ZGUgfV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgSW5jbHVkZU9ubHlSdWxlKFxuICAgICAgICAgICAgZGVzYy4kdnNjb2RlVGV4dG1hdGVMb2NhdGlvbixcbiAgICAgICAgICAgIGRlc2MuaWQsXG4gICAgICAgICAgICBkZXNjLm5hbWUsXG4gICAgICAgICAgICBkZXNjLmNvbnRlbnROYW1lLFxuICAgICAgICAgICAgX1J1bGVGYWN0b3J5Ll9jb21waWxlUGF0dGVybnMocGF0dGVybnMsIGhlbHBlciwgcmVwb3NpdG9yeSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXNjLndoaWxlKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBCZWdpbldoaWxlUnVsZShcbiAgICAgICAgICAgIGRlc2MuJHZzY29kZVRleHRtYXRlTG9jYXRpb24sXG4gICAgICAgICAgICBkZXNjLmlkLFxuICAgICAgICAgICAgZGVzYy5uYW1lLFxuICAgICAgICAgICAgZGVzYy5jb250ZW50TmFtZSxcbiAgICAgICAgICAgIGRlc2MuYmVnaW4sXG4gICAgICAgICAgICBfUnVsZUZhY3RvcnkuX2NvbXBpbGVDYXB0dXJlcyhkZXNjLmJlZ2luQ2FwdHVyZXMgfHwgZGVzYy5jYXB0dXJlcywgaGVscGVyLCByZXBvc2l0b3J5KSxcbiAgICAgICAgICAgIGRlc2Mud2hpbGUsXG4gICAgICAgICAgICBfUnVsZUZhY3RvcnkuX2NvbXBpbGVDYXB0dXJlcyhkZXNjLndoaWxlQ2FwdHVyZXMgfHwgZGVzYy5jYXB0dXJlcywgaGVscGVyLCByZXBvc2l0b3J5KSxcbiAgICAgICAgICAgIF9SdWxlRmFjdG9yeS5fY29tcGlsZVBhdHRlcm5zKGRlc2MucGF0dGVybnMsIGhlbHBlciwgcmVwb3NpdG9yeSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQmVnaW5FbmRSdWxlKFxuICAgICAgICAgIGRlc2MuJHZzY29kZVRleHRtYXRlTG9jYXRpb24sXG4gICAgICAgICAgZGVzYy5pZCxcbiAgICAgICAgICBkZXNjLm5hbWUsXG4gICAgICAgICAgZGVzYy5jb250ZW50TmFtZSxcbiAgICAgICAgICBkZXNjLmJlZ2luLFxuICAgICAgICAgIF9SdWxlRmFjdG9yeS5fY29tcGlsZUNhcHR1cmVzKGRlc2MuYmVnaW5DYXB0dXJlcyB8fCBkZXNjLmNhcHR1cmVzLCBoZWxwZXIsIHJlcG9zaXRvcnkpLFxuICAgICAgICAgIGRlc2MuZW5kLFxuICAgICAgICAgIF9SdWxlRmFjdG9yeS5fY29tcGlsZUNhcHR1cmVzKGRlc2MuZW5kQ2FwdHVyZXMgfHwgZGVzYy5jYXB0dXJlcywgaGVscGVyLCByZXBvc2l0b3J5KSxcbiAgICAgICAgICBkZXNjLmFwcGx5RW5kUGF0dGVybkxhc3QsXG4gICAgICAgICAgX1J1bGVGYWN0b3J5Ll9jb21waWxlUGF0dGVybnMoZGVzYy5wYXR0ZXJucywgaGVscGVyLCByZXBvc2l0b3J5KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjLmlkO1xuICB9XG4gIHN0YXRpYyBfY29tcGlsZUNhcHR1cmVzKGNhcHR1cmVzLCBoZWxwZXIsIHJlcG9zaXRvcnkpIHtcbiAgICBsZXQgciA9IFtdO1xuICAgIGlmIChjYXB0dXJlcykge1xuICAgICAgbGV0IG1heGltdW1DYXB0dXJlSWQgPSAwO1xuICAgICAgZm9yIChjb25zdCBjYXB0dXJlSWQgaW4gY2FwdHVyZXMpIHtcbiAgICAgICAgaWYgKGNhcHR1cmVJZCA9PT0gXCIkdnNjb2RlVGV4dG1hdGVMb2NhdGlvblwiKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtZXJpY0NhcHR1cmVJZCA9IHBhcnNlSW50KGNhcHR1cmVJZCwgMTApO1xuICAgICAgICBpZiAobnVtZXJpY0NhcHR1cmVJZCA+IG1heGltdW1DYXB0dXJlSWQpIHtcbiAgICAgICAgICBtYXhpbXVtQ2FwdHVyZUlkID0gbnVtZXJpY0NhcHR1cmVJZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4aW11bUNhcHR1cmVJZDsgaSsrKSB7XG4gICAgICAgIHJbaV0gPSBudWxsO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBjYXB0dXJlSWQgaW4gY2FwdHVyZXMpIHtcbiAgICAgICAgaWYgKGNhcHR1cmVJZCA9PT0gXCIkdnNjb2RlVGV4dG1hdGVMb2NhdGlvblwiKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtZXJpY0NhcHR1cmVJZCA9IHBhcnNlSW50KGNhcHR1cmVJZCwgMTApO1xuICAgICAgICBsZXQgcmV0b2tlbml6ZUNhcHR1cmVkV2l0aFJ1bGVJZCA9IDA7XG4gICAgICAgIGlmIChjYXB0dXJlc1tjYXB0dXJlSWRdLnBhdHRlcm5zKSB7XG4gICAgICAgICAgcmV0b2tlbml6ZUNhcHR1cmVkV2l0aFJ1bGVJZCA9IF9SdWxlRmFjdG9yeS5nZXRDb21waWxlZFJ1bGVJZChjYXB0dXJlc1tjYXB0dXJlSWRdLCBoZWxwZXIsIHJlcG9zaXRvcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJbbnVtZXJpY0NhcHR1cmVJZF0gPSBfUnVsZUZhY3RvcnkuY3JlYXRlQ2FwdHVyZVJ1bGUoaGVscGVyLCBjYXB0dXJlc1tjYXB0dXJlSWRdLiR2c2NvZGVUZXh0bWF0ZUxvY2F0aW9uLCBjYXB0dXJlc1tjYXB0dXJlSWRdLm5hbWUsIGNhcHR1cmVzW2NhcHR1cmVJZF0uY29udGVudE5hbWUsIHJldG9rZW5pemVDYXB0dXJlZFdpdGhSdWxlSWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICBzdGF0aWMgX2NvbXBpbGVQYXR0ZXJucyhwYXR0ZXJucywgaGVscGVyLCByZXBvc2l0b3J5KSB7XG4gICAgbGV0IHIgPSBbXTtcbiAgICBpZiAocGF0dGVybnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXR0ZXJucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gcGF0dGVybnNbaV07XG4gICAgICAgIGxldCBydWxlSWQgPSAtMTtcbiAgICAgICAgaWYgKHBhdHRlcm4uaW5jbHVkZSkge1xuICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9IHBhcnNlSW5jbHVkZShwYXR0ZXJuLmluY2x1ZGUpO1xuICAgICAgICAgIHN3aXRjaCAocmVmZXJlbmNlLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBCYXNlICovOlxuICAgICAgICAgICAgY2FzZSAxIC8qIFNlbGYgKi86XG4gICAgICAgICAgICAgIHJ1bGVJZCA9IF9SdWxlRmFjdG9yeS5nZXRDb21waWxlZFJ1bGVJZChyZXBvc2l0b3J5W3BhdHRlcm4uaW5jbHVkZV0sIGhlbHBlciwgcmVwb3NpdG9yeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyIC8qIFJlbGF0aXZlUmVmZXJlbmNlICovOlxuICAgICAgICAgICAgICBsZXQgbG9jYWxJbmNsdWRlZFJ1bGUgPSByZXBvc2l0b3J5W3JlZmVyZW5jZS5ydWxlTmFtZV07XG4gICAgICAgICAgICAgIGlmIChsb2NhbEluY2x1ZGVkUnVsZSkge1xuICAgICAgICAgICAgICAgIHJ1bGVJZCA9IF9SdWxlRmFjdG9yeS5nZXRDb21waWxlZFJ1bGVJZChsb2NhbEluY2x1ZGVkUnVsZSwgaGVscGVyLCByZXBvc2l0b3J5KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMyAvKiBUb3BMZXZlbFJlZmVyZW5jZSAqLzpcbiAgICAgICAgICAgIGNhc2UgNCAvKiBUb3BMZXZlbFJlcG9zaXRvcnlSZWZlcmVuY2UgKi86XG4gICAgICAgICAgICAgIGNvbnN0IGV4dGVybmFsR3JhbW1hck5hbWUgPSByZWZlcmVuY2Uuc2NvcGVOYW1lO1xuICAgICAgICAgICAgICBjb25zdCBleHRlcm5hbEdyYW1tYXJJbmNsdWRlID0gcmVmZXJlbmNlLmtpbmQgPT09IDQgLyogVG9wTGV2ZWxSZXBvc2l0b3J5UmVmZXJlbmNlICovID8gcmVmZXJlbmNlLnJ1bGVOYW1lIDogbnVsbDtcbiAgICAgICAgICAgICAgY29uc3QgZXh0ZXJuYWxHcmFtbWFyID0gaGVscGVyLmdldEV4dGVybmFsR3JhbW1hcihleHRlcm5hbEdyYW1tYXJOYW1lLCByZXBvc2l0b3J5KTtcbiAgICAgICAgICAgICAgaWYgKGV4dGVybmFsR3JhbW1hcikge1xuICAgICAgICAgICAgICAgIGlmIChleHRlcm5hbEdyYW1tYXJJbmNsdWRlKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZXh0ZXJuYWxJbmNsdWRlZFJ1bGUgPSBleHRlcm5hbEdyYW1tYXIucmVwb3NpdG9yeVtleHRlcm5hbEdyYW1tYXJJbmNsdWRlXTtcbiAgICAgICAgICAgICAgICAgIGlmIChleHRlcm5hbEluY2x1ZGVkUnVsZSkge1xuICAgICAgICAgICAgICAgICAgICBydWxlSWQgPSBfUnVsZUZhY3RvcnkuZ2V0Q29tcGlsZWRSdWxlSWQoZXh0ZXJuYWxJbmNsdWRlZFJ1bGUsIGhlbHBlciwgZXh0ZXJuYWxHcmFtbWFyLnJlcG9zaXRvcnkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcnVsZUlkID0gX1J1bGVGYWN0b3J5LmdldENvbXBpbGVkUnVsZUlkKGV4dGVybmFsR3JhbW1hci5yZXBvc2l0b3J5LiRzZWxmLCBoZWxwZXIsIGV4dGVybmFsR3JhbW1hci5yZXBvc2l0b3J5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ1bGVJZCA9IF9SdWxlRmFjdG9yeS5nZXRDb21waWxlZFJ1bGVJZChwYXR0ZXJuLCBoZWxwZXIsIHJlcG9zaXRvcnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydWxlSWQgIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgcnVsZSA9IGhlbHBlci5nZXRSdWxlKHJ1bGVJZCk7XG4gICAgICAgICAgbGV0IHNraXBSdWxlID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBJbmNsdWRlT25seVJ1bGUgfHwgcnVsZSBpbnN0YW5jZW9mIEJlZ2luRW5kUnVsZSB8fCBydWxlIGluc3RhbmNlb2YgQmVnaW5XaGlsZVJ1bGUpIHtcbiAgICAgICAgICAgIGlmIChydWxlLmhhc01pc3NpbmdQYXR0ZXJucyAmJiBydWxlLnBhdHRlcm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBza2lwUnVsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChza2lwUnVsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHIucHVzaChydWxlSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXR0ZXJuczogcixcbiAgICAgIGhhc01pc3NpbmdQYXR0ZXJuczogKHBhdHRlcm5zID8gcGF0dGVybnMubGVuZ3RoIDogMCkgIT09IHIubGVuZ3RoXG4gICAgfTtcbiAgfVxufTtcbnZhciBSZWdFeHBTb3VyY2UgPSBjbGFzcyBfUmVnRXhwU291cmNlIHtcbiAgc291cmNlO1xuICBydWxlSWQ7XG4gIGhhc0FuY2hvcjtcbiAgaGFzQmFja1JlZmVyZW5jZXM7XG4gIF9hbmNob3JDYWNoZTtcbiAgY29uc3RydWN0b3IocmVnRXhwU291cmNlLCBydWxlSWQpIHtcbiAgICBpZiAocmVnRXhwU291cmNlICYmIHR5cGVvZiByZWdFeHBTb3VyY2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGxlbiA9IHJlZ0V4cFNvdXJjZS5sZW5ndGg7XG4gICAgICBsZXQgbGFzdFB1c2hlZFBvcyA9IDA7XG4gICAgICBsZXQgb3V0cHV0ID0gW107XG4gICAgICBsZXQgaGFzQW5jaG9yID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBsZW47IHBvcysrKSB7XG4gICAgICAgIGNvbnN0IGNoID0gcmVnRXhwU291cmNlLmNoYXJBdChwb3MpO1xuICAgICAgICBpZiAoY2ggPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgaWYgKHBvcyArIDEgPCBsZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRDaCA9IHJlZ0V4cFNvdXJjZS5jaGFyQXQocG9zICsgMSk7XG4gICAgICAgICAgICBpZiAobmV4dENoID09PSBcInpcIikge1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChyZWdFeHBTb3VyY2Uuc3Vic3RyaW5nKGxhc3RQdXNoZWRQb3MsIHBvcykpO1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChcIiQoPyFcXFxcbikoPzwhXFxcXG4pXCIpO1xuICAgICAgICAgICAgICBsYXN0UHVzaGVkUG9zID0gcG9zICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dENoID09PSBcIkFcIiB8fCBuZXh0Q2ggPT09IFwiR1wiKSB7XG4gICAgICAgICAgICAgIGhhc0FuY2hvciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaGFzQW5jaG9yID0gaGFzQW5jaG9yO1xuICAgICAgaWYgKGxhc3RQdXNoZWRQb3MgPT09IDApIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSByZWdFeHBTb3VyY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQucHVzaChyZWdFeHBTb3VyY2Uuc3Vic3RyaW5nKGxhc3RQdXNoZWRQb3MsIGxlbikpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IG91dHB1dC5qb2luKFwiXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhc0FuY2hvciA9IGZhbHNlO1xuICAgICAgdGhpcy5zb3VyY2UgPSByZWdFeHBTb3VyY2U7XG4gICAgfVxuICAgIGlmICh0aGlzLmhhc0FuY2hvcikge1xuICAgICAgdGhpcy5fYW5jaG9yQ2FjaGUgPSB0aGlzLl9idWlsZEFuY2hvckNhY2hlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FuY2hvckNhY2hlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5ydWxlSWQgPSBydWxlSWQ7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnNvdXJjZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5oYXNCYWNrUmVmZXJlbmNlcyA9IEhBU19CQUNLX1JFRkVSRU5DRVMudGVzdCh0aGlzLnNvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGFzQmFja1JlZmVyZW5jZXMgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBfUmVnRXhwU291cmNlKHRoaXMuc291cmNlLCB0aGlzLnJ1bGVJZCk7XG4gIH1cbiAgc2V0U291cmNlKG5ld1NvdXJjZSkge1xuICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gbmV3U291cmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gbmV3U291cmNlO1xuICAgIGlmICh0aGlzLmhhc0FuY2hvcikge1xuICAgICAgdGhpcy5fYW5jaG9yQ2FjaGUgPSB0aGlzLl9idWlsZEFuY2hvckNhY2hlKCk7XG4gICAgfVxuICB9XG4gIHJlc29sdmVCYWNrUmVmZXJlbmNlcyhsaW5lVGV4dCwgY2FwdHVyZUluZGljZXMpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuc291cmNlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZ1wiKTtcbiAgICB9XG4gICAgbGV0IGNhcHR1cmVkVmFsdWVzID0gY2FwdHVyZUluZGljZXMubWFwKChjYXB0dXJlKSA9PiB7XG4gICAgICByZXR1cm4gbGluZVRleHQuc3Vic3RyaW5nKGNhcHR1cmUuc3RhcnQsIGNhcHR1cmUuZW5kKTtcbiAgICB9KTtcbiAgICBCQUNLX1JFRkVSRU5DSU5HX0VORC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5yZXBsYWNlKEJBQ0tfUkVGRVJFTkNJTkdfRU5ELCAobWF0Y2gsIGcxKSA9PiB7XG4gICAgICByZXR1cm4gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyhjYXB0dXJlZFZhbHVlc1twYXJzZUludChnMSwgMTApXSB8fCBcIlwiKTtcbiAgICB9KTtcbiAgfVxuICBfYnVpbGRBbmNob3JDYWNoZSgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuc291cmNlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZ1wiKTtcbiAgICB9XG4gICAgbGV0IEEwX0cwX3Jlc3VsdCA9IFtdO1xuICAgIGxldCBBMF9HMV9yZXN1bHQgPSBbXTtcbiAgICBsZXQgQTFfRzBfcmVzdWx0ID0gW107XG4gICAgbGV0IEExX0cxX3Jlc3VsdCA9IFtdO1xuICAgIGxldCBwb3MsIGxlbiwgY2gsIG5leHRDaDtcbiAgICBmb3IgKHBvcyA9IDAsIGxlbiA9IHRoaXMuc291cmNlLmxlbmd0aDsgcG9zIDwgbGVuOyBwb3MrKykge1xuICAgICAgY2ggPSB0aGlzLnNvdXJjZS5jaGFyQXQocG9zKTtcbiAgICAgIEEwX0cwX3Jlc3VsdFtwb3NdID0gY2g7XG4gICAgICBBMF9HMV9yZXN1bHRbcG9zXSA9IGNoO1xuICAgICAgQTFfRzBfcmVzdWx0W3Bvc10gPSBjaDtcbiAgICAgIEExX0cxX3Jlc3VsdFtwb3NdID0gY2g7XG4gICAgICBpZiAoY2ggPT09IFwiXFxcXFwiKSB7XG4gICAgICAgIGlmIChwb3MgKyAxIDwgbGVuKSB7XG4gICAgICAgICAgbmV4dENoID0gdGhpcy5zb3VyY2UuY2hhckF0KHBvcyArIDEpO1xuICAgICAgICAgIGlmIChuZXh0Q2ggPT09IFwiQVwiKSB7XG4gICAgICAgICAgICBBMF9HMF9yZXN1bHRbcG9zICsgMV0gPSBcIlxcdUZGRkZcIjtcbiAgICAgICAgICAgIEEwX0cxX3Jlc3VsdFtwb3MgKyAxXSA9IFwiXFx1RkZGRlwiO1xuICAgICAgICAgICAgQTFfRzBfcmVzdWx0W3BvcyArIDFdID0gXCJBXCI7XG4gICAgICAgICAgICBBMV9HMV9yZXN1bHRbcG9zICsgMV0gPSBcIkFcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRDaCA9PT0gXCJHXCIpIHtcbiAgICAgICAgICAgIEEwX0cwX3Jlc3VsdFtwb3MgKyAxXSA9IFwiXFx1RkZGRlwiO1xuICAgICAgICAgICAgQTBfRzFfcmVzdWx0W3BvcyArIDFdID0gXCJHXCI7XG4gICAgICAgICAgICBBMV9HMF9yZXN1bHRbcG9zICsgMV0gPSBcIlxcdUZGRkZcIjtcbiAgICAgICAgICAgIEExX0cxX3Jlc3VsdFtwb3MgKyAxXSA9IFwiR1wiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBMF9HMF9yZXN1bHRbcG9zICsgMV0gPSBuZXh0Q2g7XG4gICAgICAgICAgICBBMF9HMV9yZXN1bHRbcG9zICsgMV0gPSBuZXh0Q2g7XG4gICAgICAgICAgICBBMV9HMF9yZXN1bHRbcG9zICsgMV0gPSBuZXh0Q2g7XG4gICAgICAgICAgICBBMV9HMV9yZXN1bHRbcG9zICsgMV0gPSBuZXh0Q2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBBMF9HMDogQTBfRzBfcmVzdWx0LmpvaW4oXCJcIiksXG4gICAgICBBMF9HMTogQTBfRzFfcmVzdWx0LmpvaW4oXCJcIiksXG4gICAgICBBMV9HMDogQTFfRzBfcmVzdWx0LmpvaW4oXCJcIiksXG4gICAgICBBMV9HMTogQTFfRzFfcmVzdWx0LmpvaW4oXCJcIilcbiAgICB9O1xuICB9XG4gIHJlc29sdmVBbmNob3JzKGFsbG93QSwgYWxsb3dHKSB7XG4gICAgaWYgKCF0aGlzLmhhc0FuY2hvciB8fCAhdGhpcy5fYW5jaG9yQ2FjaGUgfHwgdHlwZW9mIHRoaXMuc291cmNlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gICAgfVxuICAgIGlmIChhbGxvd0EpIHtcbiAgICAgIGlmIChhbGxvd0cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuY2hvckNhY2hlLkExX0cxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuY2hvckNhY2hlLkExX0cwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYWxsb3dHKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbmNob3JDYWNoZS5BMF9HMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbmNob3JDYWNoZS5BMF9HMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG52YXIgUmVnRXhwU291cmNlTGlzdCA9IGNsYXNzIHtcbiAgX2l0ZW1zO1xuICBfaGFzQW5jaG9ycztcbiAgX2NhY2hlZDtcbiAgX2FuY2hvckNhY2hlO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pdGVtcyA9IFtdO1xuICAgIHRoaXMuX2hhc0FuY2hvcnMgPSBmYWxzZTtcbiAgICB0aGlzLl9jYWNoZWQgPSBudWxsO1xuICAgIHRoaXMuX2FuY2hvckNhY2hlID0ge1xuICAgICAgQTBfRzA6IG51bGwsXG4gICAgICBBMF9HMTogbnVsbCxcbiAgICAgIEExX0cwOiBudWxsLFxuICAgICAgQTFfRzE6IG51bGxcbiAgICB9O1xuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fZGlzcG9zZUNhY2hlcygpO1xuICB9XG4gIF9kaXNwb3NlQ2FjaGVzKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWQpIHtcbiAgICAgIHRoaXMuX2NhY2hlZC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9jYWNoZWQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYW5jaG9yQ2FjaGUuQTBfRzApIHtcbiAgICAgIHRoaXMuX2FuY2hvckNhY2hlLkEwX0cwLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX2FuY2hvckNhY2hlLkEwX0cwID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2FuY2hvckNhY2hlLkEwX0cxKSB7XG4gICAgICB0aGlzLl9hbmNob3JDYWNoZS5BMF9HMS5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9hbmNob3JDYWNoZS5BMF9HMSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLl9hbmNob3JDYWNoZS5BMV9HMCkge1xuICAgICAgdGhpcy5fYW5jaG9yQ2FjaGUuQTFfRzAuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5fYW5jaG9yQ2FjaGUuQTFfRzAgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYW5jaG9yQ2FjaGUuQTFfRzEpIHtcbiAgICAgIHRoaXMuX2FuY2hvckNhY2hlLkExX0cxLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX2FuY2hvckNhY2hlLkExX0cxID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgcHVzaChpdGVtKSB7XG4gICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcbiAgICB0aGlzLl9oYXNBbmNob3JzID0gdGhpcy5faGFzQW5jaG9ycyB8fCBpdGVtLmhhc0FuY2hvcjtcbiAgfVxuICB1bnNoaWZ0KGl0ZW0pIHtcbiAgICB0aGlzLl9pdGVtcy51bnNoaWZ0KGl0ZW0pO1xuICAgIHRoaXMuX2hhc0FuY2hvcnMgPSB0aGlzLl9oYXNBbmNob3JzIHx8IGl0ZW0uaGFzQW5jaG9yO1xuICB9XG4gIGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RoO1xuICB9XG4gIHNldFNvdXJjZShpbmRleCwgbmV3U291cmNlKSB7XG4gICAgaWYgKHRoaXMuX2l0ZW1zW2luZGV4XS5zb3VyY2UgIT09IG5ld1NvdXJjZSkge1xuICAgICAgdGhpcy5fZGlzcG9zZUNhY2hlcygpO1xuICAgICAgdGhpcy5faXRlbXNbaW5kZXhdLnNldFNvdXJjZShuZXdTb3VyY2UpO1xuICAgIH1cbiAgfVxuICBjb21waWxlKG9uaWdMaWIpIHtcbiAgICBpZiAoIXRoaXMuX2NhY2hlZCkge1xuICAgICAgbGV0IHJlZ0V4cHMgPSB0aGlzLl9pdGVtcy5tYXAoKGUpID0+IGUuc291cmNlKTtcbiAgICAgIHRoaXMuX2NhY2hlZCA9IG5ldyBDb21waWxlZFJ1bGUob25pZ0xpYiwgcmVnRXhwcywgdGhpcy5faXRlbXMubWFwKChlKSA9PiBlLnJ1bGVJZCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICB9XG4gIGNvbXBpbGVBRyhvbmlnTGliLCBhbGxvd0EsIGFsbG93Rykge1xuICAgIGlmICghdGhpcy5faGFzQW5jaG9ycykge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZShvbmlnTGliKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFsbG93QSkge1xuICAgICAgICBpZiAoYWxsb3dHKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9hbmNob3JDYWNoZS5BMV9HMSkge1xuICAgICAgICAgICAgdGhpcy5fYW5jaG9yQ2FjaGUuQTFfRzEgPSB0aGlzLl9yZXNvbHZlQW5jaG9ycyhvbmlnTGliLCBhbGxvd0EsIGFsbG93Ryk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9hbmNob3JDYWNoZS5BMV9HMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2FuY2hvckNhY2hlLkExX0cwKSB7XG4gICAgICAgICAgICB0aGlzLl9hbmNob3JDYWNoZS5BMV9HMCA9IHRoaXMuX3Jlc29sdmVBbmNob3JzKG9uaWdMaWIsIGFsbG93QSwgYWxsb3dHKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2FuY2hvckNhY2hlLkExX0cwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYWxsb3dHKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9hbmNob3JDYWNoZS5BMF9HMSkge1xuICAgICAgICAgICAgdGhpcy5fYW5jaG9yQ2FjaGUuQTBfRzEgPSB0aGlzLl9yZXNvbHZlQW5jaG9ycyhvbmlnTGliLCBhbGxvd0EsIGFsbG93Ryk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9hbmNob3JDYWNoZS5BMF9HMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2FuY2hvckNhY2hlLkEwX0cwKSB7XG4gICAgICAgICAgICB0aGlzLl9hbmNob3JDYWNoZS5BMF9HMCA9IHRoaXMuX3Jlc29sdmVBbmNob3JzKG9uaWdMaWIsIGFsbG93QSwgYWxsb3dHKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2FuY2hvckNhY2hlLkEwX0cwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9yZXNvbHZlQW5jaG9ycyhvbmlnTGliLCBhbGxvd0EsIGFsbG93Rykge1xuICAgIGxldCByZWdFeHBzID0gdGhpcy5faXRlbXMubWFwKChlKSA9PiBlLnJlc29sdmVBbmNob3JzKGFsbG93QSwgYWxsb3dHKSk7XG4gICAgcmV0dXJuIG5ldyBDb21waWxlZFJ1bGUob25pZ0xpYiwgcmVnRXhwcywgdGhpcy5faXRlbXMubWFwKChlKSA9PiBlLnJ1bGVJZCkpO1xuICB9XG59O1xudmFyIENvbXBpbGVkUnVsZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob25pZ0xpYiwgcmVnRXhwcywgcnVsZXMpIHtcbiAgICB0aGlzLnJlZ0V4cHMgPSByZWdFeHBzO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLnNjYW5uZXIgPSBvbmlnTGliLmNyZWF0ZU9uaWdTY2FubmVyKHJlZ0V4cHMpO1xuICB9XG4gIHNjYW5uZXI7XG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnNjYW5uZXIuZGlzcG9zZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnNjYW5uZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICBjb25zdCByID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMucnVsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHIucHVzaChcIiAgIC0gXCIgKyB0aGlzLnJ1bGVzW2ldICsgXCI6IFwiICsgdGhpcy5yZWdFeHBzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHIuam9pbihcIlxcblwiKTtcbiAgfVxuICBmaW5kTmV4dE1hdGNoU3luYyhzdHJpbmcsIHN0YXJ0UG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNjYW5uZXIuZmluZE5leHRNYXRjaFN5bmMoc3RyaW5nLCBzdGFydFBvc2l0aW9uLCBvcHRpb25zKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBydWxlSWQ6IHRoaXMucnVsZXNbcmVzdWx0LmluZGV4XSxcbiAgICAgIGNhcHR1cmVJbmRpY2VzOiByZXN1bHQuY2FwdHVyZUluZGljZXNcbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvZ3JhbW1hci9iYXNpY1Njb3Blc0F0dHJpYnV0ZVByb3ZpZGVyLnRzXG52YXIgQmFzaWNTY29wZUF0dHJpYnV0ZXMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlSWQsIHRva2VuVHlwZSkge1xuICAgIHRoaXMubGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgdGhpcy50b2tlblR5cGUgPSB0b2tlblR5cGU7XG4gIH1cbn07XG52YXIgQmFzaWNTY29wZUF0dHJpYnV0ZXNQcm92aWRlciA9IGNsYXNzIF9CYXNpY1Njb3BlQXR0cmlidXRlc1Byb3ZpZGVyIHtcbiAgX2RlZmF1bHRBdHRyaWJ1dGVzO1xuICBfZW1iZWRkZWRMYW5ndWFnZXNNYXRjaGVyO1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsTGFuZ3VhZ2VJZCwgZW1iZWRkZWRMYW5ndWFnZXMpIHtcbiAgICB0aGlzLl9kZWZhdWx0QXR0cmlidXRlcyA9IG5ldyBCYXNpY1Njb3BlQXR0cmlidXRlcyhpbml0aWFsTGFuZ3VhZ2VJZCwgOCAvKiBOb3RTZXQgKi8pO1xuICAgIHRoaXMuX2VtYmVkZGVkTGFuZ3VhZ2VzTWF0Y2hlciA9IG5ldyBTY29wZU1hdGNoZXIoT2JqZWN0LmVudHJpZXMoZW1iZWRkZWRMYW5ndWFnZXMgfHwge30pKTtcbiAgfVxuICBnZXREZWZhdWx0QXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmYXVsdEF0dHJpYnV0ZXM7XG4gIH1cbiAgZ2V0QmFzaWNTY29wZUF0dHJpYnV0ZXMoc2NvcGVOYW1lKSB7XG4gICAgaWYgKHNjb3BlTmFtZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIF9CYXNpY1Njb3BlQXR0cmlidXRlc1Byb3ZpZGVyLl9OVUxMX1NDT1BFX01FVEFEQVRBO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZ2V0QmFzaWNTY29wZUF0dHJpYnV0ZXMuZ2V0KHNjb3BlTmFtZSk7XG4gIH1cbiAgc3RhdGljIF9OVUxMX1NDT1BFX01FVEFEQVRBID0gbmV3IEJhc2ljU2NvcGVBdHRyaWJ1dGVzKDAsIDApO1xuICBfZ2V0QmFzaWNTY29wZUF0dHJpYnV0ZXMgPSBuZXcgQ2FjaGVkRm4oKHNjb3BlTmFtZSkgPT4ge1xuICAgIGNvbnN0IGxhbmd1YWdlSWQgPSB0aGlzLl9zY29wZVRvTGFuZ3VhZ2Uoc2NvcGVOYW1lKTtcbiAgICBjb25zdCBzdGFuZGFyZFRva2VuVHlwZSA9IHRoaXMuX3RvU3RhbmRhcmRUb2tlblR5cGUoc2NvcGVOYW1lKTtcbiAgICByZXR1cm4gbmV3IEJhc2ljU2NvcGVBdHRyaWJ1dGVzKGxhbmd1YWdlSWQsIHN0YW5kYXJkVG9rZW5UeXBlKTtcbiAgfSk7XG4gIC8qKlxuICAgKiBHaXZlbiBhIHByb2R1Y2VkIFRNIHNjb3BlLCByZXR1cm4gdGhlIGxhbmd1YWdlIHRoYXQgdG9rZW4gZGVzY3JpYmVzIG9yIG51bGwgaWYgdW5rbm93bi5cbiAgICogZS5nLiBzb3VyY2UuaHRtbCA9PiBodG1sLCBzb3VyY2UuY3NzLmVtYmVkZGVkLmh0bWwgPT4gY3NzLCBwdW5jdHVhdGlvbi5kZWZpbml0aW9uLnRhZy5odG1sID0+IG51bGxcbiAgICovXG4gIF9zY29wZVRvTGFuZ3VhZ2Uoc2NvcGUpIHtcbiAgICByZXR1cm4gdGhpcy5fZW1iZWRkZWRMYW5ndWFnZXNNYXRjaGVyLm1hdGNoKHNjb3BlKSB8fCAwO1xuICB9XG4gIF90b1N0YW5kYXJkVG9rZW5UeXBlKHNjb3BlTmFtZSkge1xuICAgIGNvbnN0IG0gPSBzY29wZU5hbWUubWF0Y2goX0Jhc2ljU2NvcGVBdHRyaWJ1dGVzUHJvdmlkZXIuU1RBTkRBUkRfVE9LRU5fVFlQRV9SRUdFWFApO1xuICAgIGlmICghbSkge1xuICAgICAgcmV0dXJuIDggLyogTm90U2V0ICovO1xuICAgIH1cbiAgICBzd2l0Y2ggKG1bMV0pIHtcbiAgICAgIGNhc2UgXCJjb21tZW50XCI6XG4gICAgICAgIHJldHVybiAxIC8qIENvbW1lbnQgKi87XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiAyIC8qIFN0cmluZyAqLztcbiAgICAgIGNhc2UgXCJyZWdleFwiOlxuICAgICAgICByZXR1cm4gMyAvKiBSZWdFeCAqLztcbiAgICAgIGNhc2UgXCJtZXRhLmVtYmVkZGVkXCI6XG4gICAgICAgIHJldHVybiAwIC8qIE90aGVyICovO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1hdGNoIGZvciBzdGFuZGFyZCB0b2tlbiB0eXBlIVwiKTtcbiAgfVxuICBzdGF0aWMgU1RBTkRBUkRfVE9LRU5fVFlQRV9SRUdFWFAgPSAvXFxiKGNvbW1lbnR8c3RyaW5nfHJlZ2V4fG1ldGFcXC5lbWJlZGRlZClcXGIvO1xufTtcbnZhciBTY29wZU1hdGNoZXIgPSBjbGFzcyB7XG4gIHZhbHVlcztcbiAgc2NvcGVzUmVnRXhwO1xuICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy52YWx1ZXMgPSBudWxsO1xuICAgICAgdGhpcy5zY29wZXNSZWdFeHAgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlcyA9IG5ldyBNYXAodmFsdWVzKTtcbiAgICAgIGNvbnN0IGVzY2FwZWRTY29wZXMgPSB2YWx1ZXMubWFwKFxuICAgICAgICAoW3Njb3BlTmFtZSwgdmFsdWVdKSA9PiBlc2NhcGVSZWdFeHBDaGFyYWN0ZXJzKHNjb3BlTmFtZSlcbiAgICAgICk7XG4gICAgICBlc2NhcGVkU2NvcGVzLnNvcnQoKTtcbiAgICAgIGVzY2FwZWRTY29wZXMucmV2ZXJzZSgpO1xuICAgICAgdGhpcy5zY29wZXNSZWdFeHAgPSBuZXcgUmVnRXhwKFxuICAgICAgICBgXigoJHtlc2NhcGVkU2NvcGVzLmpvaW4oXCIpfChcIil9KSkoJHxcXFxcLilgLFxuICAgICAgICBcIlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBtYXRjaChzY29wZSkge1xuICAgIGlmICghdGhpcy5zY29wZXNSZWdFeHApIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IG0gPSBzY29wZS5tYXRjaCh0aGlzLnNjb3Blc1JlZ0V4cCk7XG4gICAgaWYgKCFtKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWx1ZXMuZ2V0KG1bMV0pO1xuICB9XG59O1xuXG4vLyBzcmMvZGVidWcudHNcbnZhciBEZWJ1Z0ZsYWdzID0ge1xuICBJbkRlYnVnTW9kZTogdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgISFwcm9jZXNzLmVudltcIlZTQ09ERV9URVhUTUFURV9ERUJVR1wiXVxufTtcbnZhciBVc2VPbmlndXJ1bWFGaW5kT3B0aW9ucyA9IGZhbHNlO1xuXG4vLyBzcmMvZ3JhbW1hci90b2tlbml6ZVN0cmluZy50c1xudmFyIFRva2VuaXplU3RyaW5nUmVzdWx0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzdGFjaywgc3RvcHBlZEVhcmx5KSB7XG4gICAgdGhpcy5zdGFjayA9IHN0YWNrO1xuICAgIHRoaXMuc3RvcHBlZEVhcmx5ID0gc3RvcHBlZEVhcmx5O1xuICB9XG59O1xuZnVuY3Rpb24gX3Rva2VuaXplU3RyaW5nKGdyYW1tYXIsIGxpbmVUZXh0LCBpc0ZpcnN0TGluZSwgbGluZVBvcywgc3RhY2ssIGxpbmVUb2tlbnMsIGNoZWNrV2hpbGVDb25kaXRpb25zLCB0aW1lTGltaXQpIHtcbiAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVUZXh0LmNvbnRlbnQubGVuZ3RoO1xuICBsZXQgU1RPUCA9IGZhbHNlO1xuICBsZXQgYW5jaG9yUG9zaXRpb24gPSAtMTtcbiAgaWYgKGNoZWNrV2hpbGVDb25kaXRpb25zKSB7XG4gICAgY29uc3Qgd2hpbGVDaGVja1Jlc3VsdCA9IF9jaGVja1doaWxlQ29uZGl0aW9ucyhcbiAgICAgIGdyYW1tYXIsXG4gICAgICBsaW5lVGV4dCxcbiAgICAgIGlzRmlyc3RMaW5lLFxuICAgICAgbGluZVBvcyxcbiAgICAgIHN0YWNrLFxuICAgICAgbGluZVRva2Vuc1xuICAgICk7XG4gICAgc3RhY2sgPSB3aGlsZUNoZWNrUmVzdWx0LnN0YWNrO1xuICAgIGxpbmVQb3MgPSB3aGlsZUNoZWNrUmVzdWx0LmxpbmVQb3M7XG4gICAgaXNGaXJzdExpbmUgPSB3aGlsZUNoZWNrUmVzdWx0LmlzRmlyc3RMaW5lO1xuICAgIGFuY2hvclBvc2l0aW9uID0gd2hpbGVDaGVja1Jlc3VsdC5hbmNob3JQb3NpdGlvbjtcbiAgfVxuICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICB3aGlsZSAoIVNUT1ApIHtcbiAgICBpZiAodGltZUxpbWl0ICE9PSAwKSB7XG4gICAgICBjb25zdCBlbGFwc2VkVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICBpZiAoZWxhcHNlZFRpbWUgPiB0aW1lTGltaXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbml6ZVN0cmluZ1Jlc3VsdChzdGFjaywgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNjYW5OZXh0KCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBUb2tlbml6ZVN0cmluZ1Jlc3VsdChzdGFjaywgZmFsc2UpO1xuICBmdW5jdGlvbiBzY2FuTmV4dCgpIHtcbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGBAQHNjYW5OZXh0ICR7bGluZVBvc306IHwke2xpbmVUZXh0LmNvbnRlbnQuc3Vic3RyKGxpbmVQb3MpLnJlcGxhY2UoL1xcbiQvLCBcIlxcXFxuXCIpfXxgXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCByID0gbWF0Y2hSdWxlT3JJbmplY3Rpb25zKFxuICAgICAgZ3JhbW1hcixcbiAgICAgIGxpbmVUZXh0LFxuICAgICAgaXNGaXJzdExpbmUsXG4gICAgICBsaW5lUG9zLFxuICAgICAgc3RhY2ssXG4gICAgICBhbmNob3JQb3NpdGlvblxuICAgICk7XG4gICAgaWYgKCFyKSB7XG4gICAgICBsaW5lVG9rZW5zLnByb2R1Y2Uoc3RhY2ssIGxpbmVMZW5ndGgpO1xuICAgICAgU1RPUCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNhcHR1cmVJbmRpY2VzID0gci5jYXB0dXJlSW5kaWNlcztcbiAgICBjb25zdCBtYXRjaGVkUnVsZUlkID0gci5tYXRjaGVkUnVsZUlkO1xuICAgIGNvbnN0IGhhc0FkdmFuY2VkID0gY2FwdHVyZUluZGljZXMgJiYgY2FwdHVyZUluZGljZXMubGVuZ3RoID4gMCA/IGNhcHR1cmVJbmRpY2VzWzBdLmVuZCA+IGxpbmVQb3MgOiBmYWxzZTtcbiAgICBpZiAobWF0Y2hlZFJ1bGVJZCA9PT0gZW5kUnVsZUlkKSB7XG4gICAgICBjb25zdCBwb3BwZWRSdWxlID0gc3RhY2suZ2V0UnVsZShncmFtbWFyKTtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBcIiAgcG9wcGluZyBcIiArIHBvcHBlZFJ1bGUuZGVidWdOYW1lICsgXCIgLSBcIiArIHBvcHBlZFJ1bGUuZGVidWdFbmRSZWdFeHBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxpbmVUb2tlbnMucHJvZHVjZShzdGFjaywgY2FwdHVyZUluZGljZXNbMF0uc3RhcnQpO1xuICAgICAgc3RhY2sgPSBzdGFjay53aXRoQ29udGVudE5hbWVTY29wZXNMaXN0KHN0YWNrLm5hbWVTY29wZXNMaXN0KTtcbiAgICAgIGhhbmRsZUNhcHR1cmVzKFxuICAgICAgICBncmFtbWFyLFxuICAgICAgICBsaW5lVGV4dCxcbiAgICAgICAgaXNGaXJzdExpbmUsXG4gICAgICAgIHN0YWNrLFxuICAgICAgICBsaW5lVG9rZW5zLFxuICAgICAgICBwb3BwZWRSdWxlLmVuZENhcHR1cmVzLFxuICAgICAgICBjYXB0dXJlSW5kaWNlc1xuICAgICAgKTtcbiAgICAgIGxpbmVUb2tlbnMucHJvZHVjZShzdGFjaywgY2FwdHVyZUluZGljZXNbMF0uZW5kKTtcbiAgICAgIGNvbnN0IHBvcHBlZCA9IHN0YWNrO1xuICAgICAgc3RhY2sgPSBzdGFjay5wYXJlbnQ7XG4gICAgICBhbmNob3JQb3NpdGlvbiA9IHBvcHBlZC5nZXRBbmNob3JQb3MoKTtcbiAgICAgIGlmICghaGFzQWR2YW5jZWQgJiYgcG9wcGVkLmdldEVudGVyUG9zKCkgPT09IGxpbmVQb3MpIHtcbiAgICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIFwiWzFdIC0gR3JhbW1hciBpcyBpbiBhbiBlbmRsZXNzIGxvb3AgLSBHcmFtbWFyIHB1c2hlZCAmIHBvcHBlZCBhIHJ1bGUgd2l0aG91dCBhZHZhbmNpbmdcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sgPSBwb3BwZWQ7XG4gICAgICAgIGxpbmVUb2tlbnMucHJvZHVjZShzdGFjaywgbGluZUxlbmd0aCk7XG4gICAgICAgIFNUT1AgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IF9ydWxlID0gZ3JhbW1hci5nZXRSdWxlKG1hdGNoZWRSdWxlSWQpO1xuICAgICAgbGluZVRva2Vucy5wcm9kdWNlKHN0YWNrLCBjYXB0dXJlSW5kaWNlc1swXS5zdGFydCk7XG4gICAgICBjb25zdCBiZWZvcmVQdXNoID0gc3RhY2s7XG4gICAgICBjb25zdCBzY29wZU5hbWUgPSBfcnVsZS5nZXROYW1lKGxpbmVUZXh0LmNvbnRlbnQsIGNhcHR1cmVJbmRpY2VzKTtcbiAgICAgIGNvbnN0IG5hbWVTY29wZXNMaXN0ID0gc3RhY2suY29udGVudE5hbWVTY29wZXNMaXN0LnB1c2hBdHRyaWJ1dGVkKFxuICAgICAgICBzY29wZU5hbWUsXG4gICAgICAgIGdyYW1tYXJcbiAgICAgICk7XG4gICAgICBzdGFjayA9IHN0YWNrLnB1c2goXG4gICAgICAgIG1hdGNoZWRSdWxlSWQsXG4gICAgICAgIGxpbmVQb3MsXG4gICAgICAgIGFuY2hvclBvc2l0aW9uLFxuICAgICAgICBjYXB0dXJlSW5kaWNlc1swXS5lbmQgPT09IGxpbmVMZW5ndGgsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5hbWVTY29wZXNMaXN0LFxuICAgICAgICBuYW1lU2NvcGVzTGlzdFxuICAgICAgKTtcbiAgICAgIGlmIChfcnVsZSBpbnN0YW5jZW9mIEJlZ2luRW5kUnVsZSkge1xuICAgICAgICBjb25zdCBwdXNoZWRSdWxlID0gX3J1bGU7XG4gICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgXCIgIHB1c2hpbmcgXCIgKyBwdXNoZWRSdWxlLmRlYnVnTmFtZSArIFwiIC0gXCIgKyBwdXNoZWRSdWxlLmRlYnVnQmVnaW5SZWdFeHBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZUNhcHR1cmVzKFxuICAgICAgICAgIGdyYW1tYXIsXG4gICAgICAgICAgbGluZVRleHQsXG4gICAgICAgICAgaXNGaXJzdExpbmUsXG4gICAgICAgICAgc3RhY2ssXG4gICAgICAgICAgbGluZVRva2VucyxcbiAgICAgICAgICBwdXNoZWRSdWxlLmJlZ2luQ2FwdHVyZXMsXG4gICAgICAgICAgY2FwdHVyZUluZGljZXNcbiAgICAgICAgKTtcbiAgICAgICAgbGluZVRva2Vucy5wcm9kdWNlKHN0YWNrLCBjYXB0dXJlSW5kaWNlc1swXS5lbmQpO1xuICAgICAgICBhbmNob3JQb3NpdGlvbiA9IGNhcHR1cmVJbmRpY2VzWzBdLmVuZDtcbiAgICAgICAgY29uc3QgY29udGVudE5hbWUgPSBwdXNoZWRSdWxlLmdldENvbnRlbnROYW1lKFxuICAgICAgICAgIGxpbmVUZXh0LmNvbnRlbnQsXG4gICAgICAgICAgY2FwdHVyZUluZGljZXNcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY29udGVudE5hbWVTY29wZXNMaXN0ID0gbmFtZVNjb3Blc0xpc3QucHVzaEF0dHJpYnV0ZWQoXG4gICAgICAgICAgY29udGVudE5hbWUsXG4gICAgICAgICAgZ3JhbW1hclxuICAgICAgICApO1xuICAgICAgICBzdGFjayA9IHN0YWNrLndpdGhDb250ZW50TmFtZVNjb3Blc0xpc3QoY29udGVudE5hbWVTY29wZXNMaXN0KTtcbiAgICAgICAgaWYgKHB1c2hlZFJ1bGUuZW5kSGFzQmFja1JlZmVyZW5jZXMpIHtcbiAgICAgICAgICBzdGFjayA9IHN0YWNrLndpdGhFbmRSdWxlKFxuICAgICAgICAgICAgcHVzaGVkUnVsZS5nZXRFbmRXaXRoUmVzb2x2ZWRCYWNrUmVmZXJlbmNlcyhcbiAgICAgICAgICAgICAgbGluZVRleHQuY29udGVudCxcbiAgICAgICAgICAgICAgY2FwdHVyZUluZGljZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGFzQWR2YW5jZWQgJiYgYmVmb3JlUHVzaC5oYXNTYW1lUnVsZUFzKHN0YWNrKSkge1xuICAgICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgXCJbMl0gLSBHcmFtbWFyIGlzIGluIGFuIGVuZGxlc3MgbG9vcCAtIEdyYW1tYXIgcHVzaGVkIHRoZSBzYW1lIHJ1bGUgd2l0aG91dCBhZHZhbmNpbmdcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICBsaW5lVG9rZW5zLnByb2R1Y2Uoc3RhY2ssIGxpbmVMZW5ndGgpO1xuICAgICAgICAgIFNUT1AgPSB0cnVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfcnVsZSBpbnN0YW5jZW9mIEJlZ2luV2hpbGVSdWxlKSB7XG4gICAgICAgIGNvbnN0IHB1c2hlZFJ1bGUgPSBfcnVsZTtcbiAgICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgIHB1c2hpbmcgXCIgKyBwdXNoZWRSdWxlLmRlYnVnTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlQ2FwdHVyZXMoXG4gICAgICAgICAgZ3JhbW1hcixcbiAgICAgICAgICBsaW5lVGV4dCxcbiAgICAgICAgICBpc0ZpcnN0TGluZSxcbiAgICAgICAgICBzdGFjayxcbiAgICAgICAgICBsaW5lVG9rZW5zLFxuICAgICAgICAgIHB1c2hlZFJ1bGUuYmVnaW5DYXB0dXJlcyxcbiAgICAgICAgICBjYXB0dXJlSW5kaWNlc1xuICAgICAgICApO1xuICAgICAgICBsaW5lVG9rZW5zLnByb2R1Y2Uoc3RhY2ssIGNhcHR1cmVJbmRpY2VzWzBdLmVuZCk7XG4gICAgICAgIGFuY2hvclBvc2l0aW9uID0gY2FwdHVyZUluZGljZXNbMF0uZW5kO1xuICAgICAgICBjb25zdCBjb250ZW50TmFtZSA9IHB1c2hlZFJ1bGUuZ2V0Q29udGVudE5hbWUoXG4gICAgICAgICAgbGluZVRleHQuY29udGVudCxcbiAgICAgICAgICBjYXB0dXJlSW5kaWNlc1xuICAgICAgICApO1xuICAgICAgICBjb25zdCBjb250ZW50TmFtZVNjb3Blc0xpc3QgPSBuYW1lU2NvcGVzTGlzdC5wdXNoQXR0cmlidXRlZChcbiAgICAgICAgICBjb250ZW50TmFtZSxcbiAgICAgICAgICBncmFtbWFyXG4gICAgICAgICk7XG4gICAgICAgIHN0YWNrID0gc3RhY2sud2l0aENvbnRlbnROYW1lU2NvcGVzTGlzdChjb250ZW50TmFtZVNjb3Blc0xpc3QpO1xuICAgICAgICBpZiAocHVzaGVkUnVsZS53aGlsZUhhc0JhY2tSZWZlcmVuY2VzKSB7XG4gICAgICAgICAgc3RhY2sgPSBzdGFjay53aXRoRW5kUnVsZShcbiAgICAgICAgICAgIHB1c2hlZFJ1bGUuZ2V0V2hpbGVXaXRoUmVzb2x2ZWRCYWNrUmVmZXJlbmNlcyhcbiAgICAgICAgICAgICAgbGluZVRleHQuY29udGVudCxcbiAgICAgICAgICAgICAgY2FwdHVyZUluZGljZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGFzQWR2YW5jZWQgJiYgYmVmb3JlUHVzaC5oYXNTYW1lUnVsZUFzKHN0YWNrKSkge1xuICAgICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgXCJbM10gLSBHcmFtbWFyIGlzIGluIGFuIGVuZGxlc3MgbG9vcCAtIEdyYW1tYXIgcHVzaGVkIHRoZSBzYW1lIHJ1bGUgd2l0aG91dCBhZHZhbmNpbmdcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICBsaW5lVG9rZW5zLnByb2R1Y2Uoc3RhY2ssIGxpbmVMZW5ndGgpO1xuICAgICAgICAgIFNUT1AgPSB0cnVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdSdWxlID0gX3J1bGU7XG4gICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgXCIgIG1hdGNoZWQgXCIgKyBtYXRjaGluZ1J1bGUuZGVidWdOYW1lICsgXCIgLSBcIiArIG1hdGNoaW5nUnVsZS5kZWJ1Z01hdGNoUmVnRXhwXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVDYXB0dXJlcyhcbiAgICAgICAgICBncmFtbWFyLFxuICAgICAgICAgIGxpbmVUZXh0LFxuICAgICAgICAgIGlzRmlyc3RMaW5lLFxuICAgICAgICAgIHN0YWNrLFxuICAgICAgICAgIGxpbmVUb2tlbnMsXG4gICAgICAgICAgbWF0Y2hpbmdSdWxlLmNhcHR1cmVzLFxuICAgICAgICAgIGNhcHR1cmVJbmRpY2VzXG4gICAgICAgICk7XG4gICAgICAgIGxpbmVUb2tlbnMucHJvZHVjZShzdGFjaywgY2FwdHVyZUluZGljZXNbMF0uZW5kKTtcbiAgICAgICAgc3RhY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFoYXNBZHZhbmNlZCkge1xuICAgICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgXCJbNF0gLSBHcmFtbWFyIGlzIGluIGFuIGVuZGxlc3MgbG9vcCAtIEdyYW1tYXIgaXMgbm90IGFkdmFuY2luZywgbm9yIGlzIGl0IHB1c2hpbmcvcG9wcGluZ1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFjayA9IHN0YWNrLnNhZmVQb3AoKTtcbiAgICAgICAgICBsaW5lVG9rZW5zLnByb2R1Y2Uoc3RhY2ssIGxpbmVMZW5ndGgpO1xuICAgICAgICAgIFNUT1AgPSB0cnVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FwdHVyZUluZGljZXNbMF0uZW5kID4gbGluZVBvcykge1xuICAgICAgbGluZVBvcyA9IGNhcHR1cmVJbmRpY2VzWzBdLmVuZDtcbiAgICAgIGlzRmlyc3RMaW5lID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfY2hlY2tXaGlsZUNvbmRpdGlvbnMoZ3JhbW1hciwgbGluZVRleHQsIGlzRmlyc3RMaW5lLCBsaW5lUG9zLCBzdGFjaywgbGluZVRva2Vucykge1xuICBsZXQgYW5jaG9yUG9zaXRpb24gPSBzdGFjay5iZWdpblJ1bGVDYXB0dXJlZEVPTCA/IDAgOiAtMTtcbiAgY29uc3Qgd2hpbGVSdWxlcyA9IFtdO1xuICBmb3IgKGxldCBub2RlID0gc3RhY2s7IG5vZGU7IG5vZGUgPSBub2RlLnBvcCgpKSB7XG4gICAgY29uc3Qgbm9kZVJ1bGUgPSBub2RlLmdldFJ1bGUoZ3JhbW1hcik7XG4gICAgaWYgKG5vZGVSdWxlIGluc3RhbmNlb2YgQmVnaW5XaGlsZVJ1bGUpIHtcbiAgICAgIHdoaWxlUnVsZXMucHVzaCh7XG4gICAgICAgIHJ1bGU6IG5vZGVSdWxlLFxuICAgICAgICBzdGFjazogbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZvciAobGV0IHdoaWxlUnVsZSA9IHdoaWxlUnVsZXMucG9wKCk7IHdoaWxlUnVsZTsgd2hpbGVSdWxlID0gd2hpbGVSdWxlcy5wb3AoKSkge1xuICAgIGNvbnN0IHsgcnVsZVNjYW5uZXIsIGZpbmRPcHRpb25zIH0gPSBwcmVwYXJlUnVsZVdoaWxlU2VhcmNoKHdoaWxlUnVsZS5ydWxlLCBncmFtbWFyLCB3aGlsZVJ1bGUuc3RhY2suZW5kUnVsZSwgaXNGaXJzdExpbmUsIGxpbmVQb3MgPT09IGFuY2hvclBvc2l0aW9uKTtcbiAgICBjb25zdCByID0gcnVsZVNjYW5uZXIuZmluZE5leHRNYXRjaFN5bmMobGluZVRleHQsIGxpbmVQb3MsIGZpbmRPcHRpb25zKTtcbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiICBzY2FubmluZyBmb3Igd2hpbGUgcnVsZVwiKTtcbiAgICAgIGNvbnNvbGUubG9nKHJ1bGVTY2FubmVyLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICBpZiAocikge1xuICAgICAgY29uc3QgbWF0Y2hlZFJ1bGVJZCA9IHIucnVsZUlkO1xuICAgICAgaWYgKG1hdGNoZWRSdWxlSWQgIT09IHdoaWxlUnVsZUlkKSB7XG4gICAgICAgIHN0YWNrID0gd2hpbGVSdWxlLnN0YWNrLnBvcCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChyLmNhcHR1cmVJbmRpY2VzICYmIHIuY2FwdHVyZUluZGljZXMubGVuZ3RoKSB7XG4gICAgICAgIGxpbmVUb2tlbnMucHJvZHVjZSh3aGlsZVJ1bGUuc3RhY2ssIHIuY2FwdHVyZUluZGljZXNbMF0uc3RhcnQpO1xuICAgICAgICBoYW5kbGVDYXB0dXJlcyhncmFtbWFyLCBsaW5lVGV4dCwgaXNGaXJzdExpbmUsIHdoaWxlUnVsZS5zdGFjaywgbGluZVRva2Vucywgd2hpbGVSdWxlLnJ1bGUud2hpbGVDYXB0dXJlcywgci5jYXB0dXJlSW5kaWNlcyk7XG4gICAgICAgIGxpbmVUb2tlbnMucHJvZHVjZSh3aGlsZVJ1bGUuc3RhY2ssIHIuY2FwdHVyZUluZGljZXNbMF0uZW5kKTtcbiAgICAgICAgYW5jaG9yUG9zaXRpb24gPSByLmNhcHR1cmVJbmRpY2VzWzBdLmVuZDtcbiAgICAgICAgaWYgKHIuY2FwdHVyZUluZGljZXNbMF0uZW5kID4gbGluZVBvcykge1xuICAgICAgICAgIGxpbmVQb3MgPSByLmNhcHR1cmVJbmRpY2VzWzBdLmVuZDtcbiAgICAgICAgICBpc0ZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgcG9wcGluZyBcIiArIHdoaWxlUnVsZS5ydWxlLmRlYnVnTmFtZSArIFwiIC0gXCIgKyB3aGlsZVJ1bGUucnVsZS5kZWJ1Z1doaWxlUmVnRXhwKTtcbiAgICAgIH1cbiAgICAgIHN0YWNrID0gd2hpbGVSdWxlLnN0YWNrLnBvcCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB7IHN0YWNrLCBsaW5lUG9zLCBhbmNob3JQb3NpdGlvbiwgaXNGaXJzdExpbmUgfTtcbn1cbmZ1bmN0aW9uIG1hdGNoUnVsZU9ySW5qZWN0aW9ucyhncmFtbWFyLCBsaW5lVGV4dCwgaXNGaXJzdExpbmUsIGxpbmVQb3MsIHN0YWNrLCBhbmNob3JQb3NpdGlvbikge1xuICBjb25zdCBtYXRjaFJlc3VsdCA9IG1hdGNoUnVsZShncmFtbWFyLCBsaW5lVGV4dCwgaXNGaXJzdExpbmUsIGxpbmVQb3MsIHN0YWNrLCBhbmNob3JQb3NpdGlvbik7XG4gIGNvbnN0IGluamVjdGlvbnMgPSBncmFtbWFyLmdldEluamVjdGlvbnMoKTtcbiAgaWYgKGluamVjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG1hdGNoUmVzdWx0O1xuICB9XG4gIGNvbnN0IGluamVjdGlvblJlc3VsdCA9IG1hdGNoSW5qZWN0aW9ucyhpbmplY3Rpb25zLCBncmFtbWFyLCBsaW5lVGV4dCwgaXNGaXJzdExpbmUsIGxpbmVQb3MsIHN0YWNrLCBhbmNob3JQb3NpdGlvbik7XG4gIGlmICghaW5qZWN0aW9uUmVzdWx0KSB7XG4gICAgcmV0dXJuIG1hdGNoUmVzdWx0O1xuICB9XG4gIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICByZXR1cm4gaW5qZWN0aW9uUmVzdWx0O1xuICB9XG4gIGNvbnN0IG1hdGNoUmVzdWx0U2NvcmUgPSBtYXRjaFJlc3VsdC5jYXB0dXJlSW5kaWNlc1swXS5zdGFydDtcbiAgY29uc3QgaW5qZWN0aW9uUmVzdWx0U2NvcmUgPSBpbmplY3Rpb25SZXN1bHQuY2FwdHVyZUluZGljZXNbMF0uc3RhcnQ7XG4gIGlmIChpbmplY3Rpb25SZXN1bHRTY29yZSA8IG1hdGNoUmVzdWx0U2NvcmUgfHwgaW5qZWN0aW9uUmVzdWx0LnByaW9yaXR5TWF0Y2ggJiYgaW5qZWN0aW9uUmVzdWx0U2NvcmUgPT09IG1hdGNoUmVzdWx0U2NvcmUpIHtcbiAgICByZXR1cm4gaW5qZWN0aW9uUmVzdWx0O1xuICB9XG4gIHJldHVybiBtYXRjaFJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1hdGNoUnVsZShncmFtbWFyLCBsaW5lVGV4dCwgaXNGaXJzdExpbmUsIGxpbmVQb3MsIHN0YWNrLCBhbmNob3JQb3NpdGlvbikge1xuICBjb25zdCBydWxlID0gc3RhY2suZ2V0UnVsZShncmFtbWFyKTtcbiAgY29uc3QgeyBydWxlU2Nhbm5lciwgZmluZE9wdGlvbnMgfSA9IHByZXBhcmVSdWxlU2VhcmNoKHJ1bGUsIGdyYW1tYXIsIHN0YWNrLmVuZFJ1bGUsIGlzRmlyc3RMaW5lLCBsaW5lUG9zID09PSBhbmNob3JQb3NpdGlvbik7XG4gIGNvbnN0IHIgPSBydWxlU2Nhbm5lci5maW5kTmV4dE1hdGNoU3luYyhsaW5lVGV4dCwgbGluZVBvcywgZmluZE9wdGlvbnMpO1xuICBpZiAocikge1xuICAgIHJldHVybiB7XG4gICAgICBjYXB0dXJlSW5kaWNlczogci5jYXB0dXJlSW5kaWNlcyxcbiAgICAgIG1hdGNoZWRSdWxlSWQ6IHIucnVsZUlkXG4gICAgfTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1hdGNoSW5qZWN0aW9ucyhpbmplY3Rpb25zLCBncmFtbWFyLCBsaW5lVGV4dCwgaXNGaXJzdExpbmUsIGxpbmVQb3MsIHN0YWNrLCBhbmNob3JQb3NpdGlvbikge1xuICBsZXQgYmVzdE1hdGNoUmF0aW5nID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgbGV0IGJlc3RNYXRjaENhcHR1cmVJbmRpY2VzID0gbnVsbDtcbiAgbGV0IGJlc3RNYXRjaFJ1bGVJZDtcbiAgbGV0IGJlc3RNYXRjaFJlc3VsdFByaW9yaXR5ID0gMDtcbiAgY29uc3Qgc2NvcGVzID0gc3RhY2suY29udGVudE5hbWVTY29wZXNMaXN0LmdldFNjb3BlTmFtZXMoKTtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluamVjdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBpbmplY3Rpb24gPSBpbmplY3Rpb25zW2ldO1xuICAgIGlmICghaW5qZWN0aW9uLm1hdGNoZXIoc2NvcGVzKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBncmFtbWFyLmdldFJ1bGUoaW5qZWN0aW9uLnJ1bGVJZCk7XG4gICAgY29uc3QgeyBydWxlU2Nhbm5lciwgZmluZE9wdGlvbnMgfSA9IHByZXBhcmVSdWxlU2VhcmNoKHJ1bGUsIGdyYW1tYXIsIG51bGwsIGlzRmlyc3RMaW5lLCBsaW5lUG9zID09PSBhbmNob3JQb3NpdGlvbik7XG4gICAgY29uc3QgbWF0Y2hSZXN1bHQgPSBydWxlU2Nhbm5lci5maW5kTmV4dE1hdGNoU3luYyhsaW5lVGV4dCwgbGluZVBvcywgZmluZE9wdGlvbnMpO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIGNvbnNvbGUubG9nKGAgIG1hdGNoZWQgaW5qZWN0aW9uOiAke2luamVjdGlvbi5kZWJ1Z1NlbGVjdG9yfWApO1xuICAgICAgY29uc29sZS5sb2cocnVsZVNjYW5uZXIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoUmF0aW5nID0gbWF0Y2hSZXN1bHQuY2FwdHVyZUluZGljZXNbMF0uc3RhcnQ7XG4gICAgaWYgKG1hdGNoUmF0aW5nID49IGJlc3RNYXRjaFJhdGluZykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGJlc3RNYXRjaFJhdGluZyA9IG1hdGNoUmF0aW5nO1xuICAgIGJlc3RNYXRjaENhcHR1cmVJbmRpY2VzID0gbWF0Y2hSZXN1bHQuY2FwdHVyZUluZGljZXM7XG4gICAgYmVzdE1hdGNoUnVsZUlkID0gbWF0Y2hSZXN1bHQucnVsZUlkO1xuICAgIGJlc3RNYXRjaFJlc3VsdFByaW9yaXR5ID0gaW5qZWN0aW9uLnByaW9yaXR5O1xuICAgIGlmIChiZXN0TWF0Y2hSYXRpbmcgPT09IGxpbmVQb3MpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoYmVzdE1hdGNoQ2FwdHVyZUluZGljZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHlNYXRjaDogYmVzdE1hdGNoUmVzdWx0UHJpb3JpdHkgPT09IC0xLFxuICAgICAgY2FwdHVyZUluZGljZXM6IGJlc3RNYXRjaENhcHR1cmVJbmRpY2VzLFxuICAgICAgbWF0Y2hlZFJ1bGVJZDogYmVzdE1hdGNoUnVsZUlkXG4gICAgfTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHByZXBhcmVSdWxlU2VhcmNoKHJ1bGUsIGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlLCBhbGxvd0EsIGFsbG93Rykge1xuICBpZiAoVXNlT25pZ3VydW1hRmluZE9wdGlvbnMpIHtcbiAgICBjb25zdCBydWxlU2Nhbm5lcjIgPSBydWxlLmNvbXBpbGUoZ3JhbW1hciwgZW5kUmVnZXhTb3VyY2UpO1xuICAgIGNvbnN0IGZpbmRPcHRpb25zID0gZ2V0RmluZE9wdGlvbnMoYWxsb3dBLCBhbGxvd0cpO1xuICAgIHJldHVybiB7IHJ1bGVTY2FubmVyOiBydWxlU2Nhbm5lcjIsIGZpbmRPcHRpb25zIH07XG4gIH1cbiAgY29uc3QgcnVsZVNjYW5uZXIgPSBydWxlLmNvbXBpbGVBRyhncmFtbWFyLCBlbmRSZWdleFNvdXJjZSwgYWxsb3dBLCBhbGxvd0cpO1xuICByZXR1cm4geyBydWxlU2Nhbm5lciwgZmluZE9wdGlvbnM6IDAgLyogTm9uZSAqLyB9O1xufVxuZnVuY3Rpb24gcHJlcGFyZVJ1bGVXaGlsZVNlYXJjaChydWxlLCBncmFtbWFyLCBlbmRSZWdleFNvdXJjZSwgYWxsb3dBLCBhbGxvd0cpIHtcbiAgaWYgKFVzZU9uaWd1cnVtYUZpbmRPcHRpb25zKSB7XG4gICAgY29uc3QgcnVsZVNjYW5uZXIyID0gcnVsZS5jb21waWxlV2hpbGUoZ3JhbW1hciwgZW5kUmVnZXhTb3VyY2UpO1xuICAgIGNvbnN0IGZpbmRPcHRpb25zID0gZ2V0RmluZE9wdGlvbnMoYWxsb3dBLCBhbGxvd0cpO1xuICAgIHJldHVybiB7IHJ1bGVTY2FubmVyOiBydWxlU2Nhbm5lcjIsIGZpbmRPcHRpb25zIH07XG4gIH1cbiAgY29uc3QgcnVsZVNjYW5uZXIgPSBydWxlLmNvbXBpbGVXaGlsZUFHKGdyYW1tYXIsIGVuZFJlZ2V4U291cmNlLCBhbGxvd0EsIGFsbG93Ryk7XG4gIHJldHVybiB7IHJ1bGVTY2FubmVyLCBmaW5kT3B0aW9uczogMCAvKiBOb25lICovIH07XG59XG5mdW5jdGlvbiBnZXRGaW5kT3B0aW9ucyhhbGxvd0EsIGFsbG93Rykge1xuICBsZXQgb3B0aW9ucyA9IDAgLyogTm9uZSAqLztcbiAgaWYgKCFhbGxvd0EpIHtcbiAgICBvcHRpb25zIHw9IDEgLyogTm90QmVnaW5TdHJpbmcgKi87XG4gIH1cbiAgaWYgKCFhbGxvd0cpIHtcbiAgICBvcHRpb25zIHw9IDQgLyogTm90QmVnaW5Qb3NpdGlvbiAqLztcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGhhbmRsZUNhcHR1cmVzKGdyYW1tYXIsIGxpbmVUZXh0LCBpc0ZpcnN0TGluZSwgc3RhY2ssIGxpbmVUb2tlbnMsIGNhcHR1cmVzLCBjYXB0dXJlSW5kaWNlcykge1xuICBpZiAoY2FwdHVyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxpbmVUZXh0Q29udGVudCA9IGxpbmVUZXh0LmNvbnRlbnQ7XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKGNhcHR1cmVzLmxlbmd0aCwgY2FwdHVyZUluZGljZXMubGVuZ3RoKTtcbiAgY29uc3QgbG9jYWxTdGFjayA9IFtdO1xuICBjb25zdCBtYXhFbmQgPSBjYXB0dXJlSW5kaWNlc1swXS5lbmQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBjYXB0dXJlUnVsZSA9IGNhcHR1cmVzW2ldO1xuICAgIGlmIChjYXB0dXJlUnVsZSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGNhcHR1cmVJbmRleCA9IGNhcHR1cmVJbmRpY2VzW2ldO1xuICAgIGlmIChjYXB0dXJlSW5kZXgubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGNhcHR1cmVJbmRleC5zdGFydCA+IG1heEVuZCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHdoaWxlIChsb2NhbFN0YWNrLmxlbmd0aCA+IDAgJiYgbG9jYWxTdGFja1tsb2NhbFN0YWNrLmxlbmd0aCAtIDFdLmVuZFBvcyA8PSBjYXB0dXJlSW5kZXguc3RhcnQpIHtcbiAgICAgIGxpbmVUb2tlbnMucHJvZHVjZUZyb21TY29wZXMobG9jYWxTdGFja1tsb2NhbFN0YWNrLmxlbmd0aCAtIDFdLnNjb3BlcywgbG9jYWxTdGFja1tsb2NhbFN0YWNrLmxlbmd0aCAtIDFdLmVuZFBvcyk7XG4gICAgICBsb2NhbFN0YWNrLnBvcCgpO1xuICAgIH1cbiAgICBpZiAobG9jYWxTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBsaW5lVG9rZW5zLnByb2R1Y2VGcm9tU2NvcGVzKGxvY2FsU3RhY2tbbG9jYWxTdGFjay5sZW5ndGggLSAxXS5zY29wZXMsIGNhcHR1cmVJbmRleC5zdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVUb2tlbnMucHJvZHVjZShzdGFjaywgY2FwdHVyZUluZGV4LnN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGNhcHR1cmVSdWxlLnJldG9rZW5pemVDYXB0dXJlZFdpdGhSdWxlSWQpIHtcbiAgICAgIGNvbnN0IHNjb3BlTmFtZSA9IGNhcHR1cmVSdWxlLmdldE5hbWUobGluZVRleHRDb250ZW50LCBjYXB0dXJlSW5kaWNlcyk7XG4gICAgICBjb25zdCBuYW1lU2NvcGVzTGlzdCA9IHN0YWNrLmNvbnRlbnROYW1lU2NvcGVzTGlzdC5wdXNoQXR0cmlidXRlZChzY29wZU5hbWUsIGdyYW1tYXIpO1xuICAgICAgY29uc3QgY29udGVudE5hbWUgPSBjYXB0dXJlUnVsZS5nZXRDb250ZW50TmFtZShsaW5lVGV4dENvbnRlbnQsIGNhcHR1cmVJbmRpY2VzKTtcbiAgICAgIGNvbnN0IGNvbnRlbnROYW1lU2NvcGVzTGlzdCA9IG5hbWVTY29wZXNMaXN0LnB1c2hBdHRyaWJ1dGVkKGNvbnRlbnROYW1lLCBncmFtbWFyKTtcbiAgICAgIGNvbnN0IHN0YWNrQ2xvbmUgPSBzdGFjay5wdXNoKGNhcHR1cmVSdWxlLnJldG9rZW5pemVDYXB0dXJlZFdpdGhSdWxlSWQsIGNhcHR1cmVJbmRleC5zdGFydCwgLTEsIGZhbHNlLCBudWxsLCBuYW1lU2NvcGVzTGlzdCwgY29udGVudE5hbWVTY29wZXNMaXN0KTtcbiAgICAgIGNvbnN0IG9uaWdTdWJTdHIgPSBncmFtbWFyLmNyZWF0ZU9uaWdTdHJpbmcobGluZVRleHRDb250ZW50LnN1YnN0cmluZygwLCBjYXB0dXJlSW5kZXguZW5kKSk7XG4gICAgICBfdG9rZW5pemVTdHJpbmcoXG4gICAgICAgIGdyYW1tYXIsXG4gICAgICAgIG9uaWdTdWJTdHIsXG4gICAgICAgIGlzRmlyc3RMaW5lICYmIGNhcHR1cmVJbmRleC5zdGFydCA9PT0gMCxcbiAgICAgICAgY2FwdHVyZUluZGV4LnN0YXJ0LFxuICAgICAgICBzdGFja0Nsb25lLFxuICAgICAgICBsaW5lVG9rZW5zLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgLyogbm8gdGltZSBsaW1pdCAqL1xuICAgICAgICAwXG4gICAgICApO1xuICAgICAgZGlzcG9zZU9uaWdTdHJpbmcob25pZ1N1YlN0cik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgY2FwdHVyZVJ1bGVTY29wZU5hbWUgPSBjYXB0dXJlUnVsZS5nZXROYW1lKGxpbmVUZXh0Q29udGVudCwgY2FwdHVyZUluZGljZXMpO1xuICAgIGlmIChjYXB0dXJlUnVsZVNjb3BlTmFtZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgYmFzZSA9IGxvY2FsU3RhY2subGVuZ3RoID4gMCA/IGxvY2FsU3RhY2tbbG9jYWxTdGFjay5sZW5ndGggLSAxXS5zY29wZXMgOiBzdGFjay5jb250ZW50TmFtZVNjb3Blc0xpc3Q7XG4gICAgICBjb25zdCBjYXB0dXJlUnVsZVNjb3Blc0xpc3QgPSBiYXNlLnB1c2hBdHRyaWJ1dGVkKGNhcHR1cmVSdWxlU2NvcGVOYW1lLCBncmFtbWFyKTtcbiAgICAgIGxvY2FsU3RhY2sucHVzaChuZXcgTG9jYWxTdGFja0VsZW1lbnQoY2FwdHVyZVJ1bGVTY29wZXNMaXN0LCBjYXB0dXJlSW5kZXguZW5kKSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChsb2NhbFN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICBsaW5lVG9rZW5zLnByb2R1Y2VGcm9tU2NvcGVzKGxvY2FsU3RhY2tbbG9jYWxTdGFjay5sZW5ndGggLSAxXS5zY29wZXMsIGxvY2FsU3RhY2tbbG9jYWxTdGFjay5sZW5ndGggLSAxXS5lbmRQb3MpO1xuICAgIGxvY2FsU3RhY2sucG9wKCk7XG4gIH1cbn1cbnZhciBMb2NhbFN0YWNrRWxlbWVudCA9IGNsYXNzIHtcbiAgc2NvcGVzO1xuICBlbmRQb3M7XG4gIGNvbnN0cnVjdG9yKHNjb3BlcywgZW5kUG9zKSB7XG4gICAgdGhpcy5zY29wZXMgPSBzY29wZXM7XG4gICAgdGhpcy5lbmRQb3MgPSBlbmRQb3M7XG4gIH1cbn07XG5cbi8vIHNyYy9ncmFtbWFyL2dyYW1tYXIudHNcbmZ1bmN0aW9uIGNyZWF0ZUdyYW1tYXIoc2NvcGVOYW1lLCBncmFtbWFyLCBpbml0aWFsTGFuZ3VhZ2UsIGVtYmVkZGVkTGFuZ3VhZ2VzLCB0b2tlblR5cGVzLCBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMsIGdyYW1tYXJSZXBvc2l0b3J5LCBvbmlnTGliKSB7XG4gIHJldHVybiBuZXcgR3JhbW1hcihcbiAgICBzY29wZU5hbWUsXG4gICAgZ3JhbW1hcixcbiAgICBpbml0aWFsTGFuZ3VhZ2UsXG4gICAgZW1iZWRkZWRMYW5ndWFnZXMsXG4gICAgdG9rZW5UeXBlcyxcbiAgICBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMsXG4gICAgZ3JhbW1hclJlcG9zaXRvcnksXG4gICAgb25pZ0xpYlxuICApO1xufVxuZnVuY3Rpb24gY29sbGVjdEluamVjdGlvbnMocmVzdWx0LCBzZWxlY3RvciwgcnVsZSwgcnVsZUZhY3RvcnlIZWxwZXIsIGdyYW1tYXIpIHtcbiAgY29uc3QgbWF0Y2hlcnMgPSBjcmVhdGVNYXRjaGVycyhzZWxlY3RvciwgbmFtZU1hdGNoZXIpO1xuICBjb25zdCBydWxlSWQgPSBSdWxlRmFjdG9yeS5nZXRDb21waWxlZFJ1bGVJZChydWxlLCBydWxlRmFjdG9yeUhlbHBlciwgZ3JhbW1hci5yZXBvc2l0b3J5KTtcbiAgZm9yIChjb25zdCBtYXRjaGVyIG9mIG1hdGNoZXJzKSB7XG4gICAgcmVzdWx0LnB1c2goe1xuICAgICAgZGVidWdTZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICBtYXRjaGVyOiBtYXRjaGVyLm1hdGNoZXIsXG4gICAgICBydWxlSWQsXG4gICAgICBncmFtbWFyLFxuICAgICAgcHJpb3JpdHk6IG1hdGNoZXIucHJpb3JpdHlcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gbmFtZU1hdGNoZXIoaWRlbnRpZmVycywgc2NvcGVzKSB7XG4gIGlmIChzY29wZXMubGVuZ3RoIDwgaWRlbnRpZmVycy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGxhc3RJbmRleCA9IDA7XG4gIHJldHVybiBpZGVudGlmZXJzLmV2ZXJ5KChpZGVudGlmaWVyKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IGxhc3RJbmRleDsgaSA8IHNjb3Blcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHNjb3Blc0FyZU1hdGNoaW5nKHNjb3Blc1tpXSwgaWRlbnRpZmllcikpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gaSArIDE7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xufVxuZnVuY3Rpb24gc2NvcGVzQXJlTWF0Y2hpbmcodGhpc1Njb3BlTmFtZSwgc2NvcGVOYW1lKSB7XG4gIGlmICghdGhpc1Njb3BlTmFtZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGhpc1Njb3BlTmFtZSA9PT0gc2NvcGVOYW1lKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgbGVuID0gc2NvcGVOYW1lLmxlbmd0aDtcbiAgcmV0dXJuIHRoaXNTY29wZU5hbWUubGVuZ3RoID4gbGVuICYmIHRoaXNTY29wZU5hbWUuc3Vic3RyKDAsIGxlbikgPT09IHNjb3BlTmFtZSAmJiB0aGlzU2NvcGVOYW1lW2xlbl0gPT09IFwiLlwiO1xufVxudmFyIEdyYW1tYXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF9yb290U2NvcGVOYW1lLCBncmFtbWFyLCBpbml0aWFsTGFuZ3VhZ2UsIGVtYmVkZGVkTGFuZ3VhZ2VzLCB0b2tlblR5cGVzLCBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMsIGdyYW1tYXJSZXBvc2l0b3J5LCBfb25pZ0xpYikge1xuICAgIHRoaXMuX3Jvb3RTY29wZU5hbWUgPSBfcm9vdFNjb3BlTmFtZTtcbiAgICB0aGlzLmJhbGFuY2VkQnJhY2tldFNlbGVjdG9ycyA9IGJhbGFuY2VkQnJhY2tldFNlbGVjdG9ycztcbiAgICB0aGlzLl9vbmlnTGliID0gX29uaWdMaWI7XG4gICAgdGhpcy5fYmFzaWNTY29wZUF0dHJpYnV0ZXNQcm92aWRlciA9IG5ldyBCYXNpY1Njb3BlQXR0cmlidXRlc1Byb3ZpZGVyKFxuICAgICAgaW5pdGlhbExhbmd1YWdlLFxuICAgICAgZW1iZWRkZWRMYW5ndWFnZXNcbiAgICApO1xuICAgIHRoaXMuX3Jvb3RJZCA9IC0xO1xuICAgIHRoaXMuX2xhc3RSdWxlSWQgPSAwO1xuICAgIHRoaXMuX3J1bGVJZDJkZXNjID0gW251bGxdO1xuICAgIHRoaXMuX2luY2x1ZGVkR3JhbW1hcnMgPSB7fTtcbiAgICB0aGlzLl9ncmFtbWFyUmVwb3NpdG9yeSA9IGdyYW1tYXJSZXBvc2l0b3J5O1xuICAgIHRoaXMuX2dyYW1tYXIgPSBpbml0R3JhbW1hcihncmFtbWFyLCBudWxsKTtcbiAgICB0aGlzLl9pbmplY3Rpb25zID0gbnVsbDtcbiAgICB0aGlzLl90b2tlblR5cGVNYXRjaGVycyA9IFtdO1xuICAgIGlmICh0b2tlblR5cGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIE9iamVjdC5rZXlzKHRva2VuVHlwZXMpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXJzID0gY3JlYXRlTWF0Y2hlcnMoc2VsZWN0b3IsIG5hbWVNYXRjaGVyKTtcbiAgICAgICAgZm9yIChjb25zdCBtYXRjaGVyIG9mIG1hdGNoZXJzKSB7XG4gICAgICAgICAgdGhpcy5fdG9rZW5UeXBlTWF0Y2hlcnMucHVzaCh7XG4gICAgICAgICAgICBtYXRjaGVyOiBtYXRjaGVyLm1hdGNoZXIsXG4gICAgICAgICAgICB0eXBlOiB0b2tlblR5cGVzW3NlbGVjdG9yXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9yb290SWQ7XG4gIF9sYXN0UnVsZUlkO1xuICBfcnVsZUlkMmRlc2M7XG4gIF9pbmNsdWRlZEdyYW1tYXJzO1xuICBfZ3JhbW1hclJlcG9zaXRvcnk7XG4gIF9ncmFtbWFyO1xuICBfaW5qZWN0aW9ucztcbiAgX2Jhc2ljU2NvcGVBdHRyaWJ1dGVzUHJvdmlkZXI7XG4gIF90b2tlblR5cGVNYXRjaGVycztcbiAgZ2V0IHRoZW1lUHJvdmlkZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYW1tYXJSZXBvc2l0b3J5O1xuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHRoaXMuX3J1bGVJZDJkZXNjKSB7XG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY3JlYXRlT25pZ1NjYW5uZXIoc291cmNlcykge1xuICAgIHJldHVybiB0aGlzLl9vbmlnTGliLmNyZWF0ZU9uaWdTY2FubmVyKHNvdXJjZXMpO1xuICB9XG4gIGNyZWF0ZU9uaWdTdHJpbmcoc291cmNlcykge1xuICAgIHJldHVybiB0aGlzLl9vbmlnTGliLmNyZWF0ZU9uaWdTdHJpbmcoc291cmNlcyk7XG4gIH1cbiAgZ2V0TWV0YWRhdGFGb3JTY29wZShzY29wZSkge1xuICAgIHJldHVybiB0aGlzLl9iYXNpY1Njb3BlQXR0cmlidXRlc1Byb3ZpZGVyLmdldEJhc2ljU2NvcGVBdHRyaWJ1dGVzKHNjb3BlKTtcbiAgfVxuICBfY29sbGVjdEluamVjdGlvbnMoKSB7XG4gICAgY29uc3QgZ3JhbW1hclJlcG9zaXRvcnkgPSB7XG4gICAgICBsb29rdXA6IChzY29wZU5hbWUyKSA9PiB7XG4gICAgICAgIGlmIChzY29wZU5hbWUyID09PSB0aGlzLl9yb290U2NvcGVOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2dyYW1tYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RXh0ZXJuYWxHcmFtbWFyKHNjb3BlTmFtZTIpO1xuICAgICAgfSxcbiAgICAgIGluamVjdGlvbnM6IChzY29wZU5hbWUyKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncmFtbWFyUmVwb3NpdG9yeS5pbmplY3Rpb25zKHNjb3BlTmFtZTIpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3Qgc2NvcGVOYW1lID0gdGhpcy5fcm9vdFNjb3BlTmFtZTtcbiAgICBjb25zdCBncmFtbWFyID0gZ3JhbW1hclJlcG9zaXRvcnkubG9va3VwKHNjb3BlTmFtZSk7XG4gICAgaWYgKGdyYW1tYXIpIHtcbiAgICAgIGNvbnN0IHJhd0luamVjdGlvbnMgPSBncmFtbWFyLmluamVjdGlvbnM7XG4gICAgICBpZiAocmF3SW5qZWN0aW9ucykge1xuICAgICAgICBmb3IgKGxldCBleHByZXNzaW9uIGluIHJhd0luamVjdGlvbnMpIHtcbiAgICAgICAgICBjb2xsZWN0SW5qZWN0aW9ucyhcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIGV4cHJlc3Npb24sXG4gICAgICAgICAgICByYXdJbmplY3Rpb25zW2V4cHJlc3Npb25dLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGdyYW1tYXJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBpbmplY3Rpb25TY29wZU5hbWVzID0gdGhpcy5fZ3JhbW1hclJlcG9zaXRvcnkuaW5qZWN0aW9ucyhzY29wZU5hbWUpO1xuICAgICAgaWYgKGluamVjdGlvblNjb3BlTmFtZXMpIHtcbiAgICAgICAgaW5qZWN0aW9uU2NvcGVOYW1lcy5mb3JFYWNoKChpbmplY3Rpb25TY29wZU5hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBpbmplY3Rpb25HcmFtbWFyID0gdGhpcy5nZXRFeHRlcm5hbEdyYW1tYXIoaW5qZWN0aW9uU2NvcGVOYW1lKTtcbiAgICAgICAgICBpZiAoaW5qZWN0aW9uR3JhbW1hcikge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBpbmplY3Rpb25HcmFtbWFyLmluamVjdGlvblNlbGVjdG9yO1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgIGNvbGxlY3RJbmplY3Rpb25zKFxuICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgICAgICAgICBpbmplY3Rpb25HcmFtbWFyLFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgaW5qZWN0aW9uR3JhbW1hclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zb3J0KChpMSwgaTIpID0+IGkxLnByaW9yaXR5IC0gaTIucHJpb3JpdHkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0SW5qZWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5faW5qZWN0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5faW5qZWN0aW9ucyA9IHRoaXMuX2NvbGxlY3RJbmplY3Rpb25zKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbmplY3Rpb25zO1xuICB9XG4gIHJlZ2lzdGVyUnVsZShmYWN0b3J5KSB7XG4gICAgY29uc3QgaWQgPSArK3RoaXMuX2xhc3RSdWxlSWQ7XG4gICAgY29uc3QgcmVzdWx0ID0gZmFjdG9yeShydWxlSWRGcm9tTnVtYmVyKGlkKSk7XG4gICAgdGhpcy5fcnVsZUlkMmRlc2NbaWRdID0gcmVzdWx0O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0UnVsZShydWxlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVsZUlkMmRlc2NbcnVsZUlkVG9OdW1iZXIocnVsZUlkKV07XG4gIH1cbiAgZ2V0RXh0ZXJuYWxHcmFtbWFyKHNjb3BlTmFtZSwgcmVwb3NpdG9yeSkge1xuICAgIGlmICh0aGlzLl9pbmNsdWRlZEdyYW1tYXJzW3Njb3BlTmFtZV0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbmNsdWRlZEdyYW1tYXJzW3Njb3BlTmFtZV07XG4gICAgfSBlbHNlIGlmICh0aGlzLl9ncmFtbWFyUmVwb3NpdG9yeSkge1xuICAgICAgY29uc3QgcmF3SW5jbHVkZWRHcmFtbWFyID0gdGhpcy5fZ3JhbW1hclJlcG9zaXRvcnkubG9va3VwKHNjb3BlTmFtZSk7XG4gICAgICBpZiAocmF3SW5jbHVkZWRHcmFtbWFyKSB7XG4gICAgICAgIHRoaXMuX2luY2x1ZGVkR3JhbW1hcnNbc2NvcGVOYW1lXSA9IGluaXRHcmFtbWFyKFxuICAgICAgICAgIHJhd0luY2x1ZGVkR3JhbW1hcixcbiAgICAgICAgICByZXBvc2l0b3J5ICYmIHJlcG9zaXRvcnkuJGJhc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVkR3JhbW1hcnNbc2NvcGVOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICB0b2tlbml6ZUxpbmUobGluZVRleHQsIHByZXZTdGF0ZSwgdGltZUxpbWl0ID0gMCkge1xuICAgIGNvbnN0IHIgPSB0aGlzLl90b2tlbml6ZShsaW5lVGV4dCwgcHJldlN0YXRlLCBmYWxzZSwgdGltZUxpbWl0KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5zOiByLmxpbmVUb2tlbnMuZ2V0UmVzdWx0KHIucnVsZVN0YWNrLCByLmxpbmVMZW5ndGgpLFxuICAgICAgcnVsZVN0YWNrOiByLnJ1bGVTdGFjayxcbiAgICAgIHN0b3BwZWRFYXJseTogci5zdG9wcGVkRWFybHlcbiAgICB9O1xuICB9XG4gIHRva2VuaXplTGluZTIobGluZVRleHQsIHByZXZTdGF0ZSwgdGltZUxpbWl0ID0gMCkge1xuICAgIGNvbnN0IHIgPSB0aGlzLl90b2tlbml6ZShsaW5lVGV4dCwgcHJldlN0YXRlLCB0cnVlLCB0aW1lTGltaXQpO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbnM6IHIubGluZVRva2Vucy5nZXRCaW5hcnlSZXN1bHQoci5ydWxlU3RhY2ssIHIubGluZUxlbmd0aCksXG4gICAgICBydWxlU3RhY2s6IHIucnVsZVN0YWNrLFxuICAgICAgc3RvcHBlZEVhcmx5OiByLnN0b3BwZWRFYXJseVxuICAgIH07XG4gIH1cbiAgX3Rva2VuaXplKGxpbmVUZXh0LCBwcmV2U3RhdGUsIGVtaXRCaW5hcnlUb2tlbnMsIHRpbWVMaW1pdCkge1xuICAgIGlmICh0aGlzLl9yb290SWQgPT09IC0xKSB7XG4gICAgICB0aGlzLl9yb290SWQgPSBSdWxlRmFjdG9yeS5nZXRDb21waWxlZFJ1bGVJZChcbiAgICAgICAgdGhpcy5fZ3JhbW1hci5yZXBvc2l0b3J5LiRzZWxmLFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLl9ncmFtbWFyLnJlcG9zaXRvcnlcbiAgICAgICk7XG4gICAgICB0aGlzLmdldEluamVjdGlvbnMoKTtcbiAgICB9XG4gICAgbGV0IGlzRmlyc3RMaW5lO1xuICAgIGlmICghcHJldlN0YXRlIHx8IHByZXZTdGF0ZSA9PT0gU3RhdGVTdGFja0ltcGwuTlVMTCkge1xuICAgICAgaXNGaXJzdExpbmUgPSB0cnVlO1xuICAgICAgY29uc3QgcmF3RGVmYXVsdE1ldGFkYXRhID0gdGhpcy5fYmFzaWNTY29wZUF0dHJpYnV0ZXNQcm92aWRlci5nZXREZWZhdWx0QXR0cmlidXRlcygpO1xuICAgICAgY29uc3QgZGVmYXVsdFN0eWxlID0gdGhpcy50aGVtZVByb3ZpZGVyLmdldERlZmF1bHRzKCk7XG4gICAgICBjb25zdCBkZWZhdWx0TWV0YWRhdGEgPSBFbmNvZGVkVG9rZW5NZXRhZGF0YS5zZXQoXG4gICAgICAgIDAsXG4gICAgICAgIHJhd0RlZmF1bHRNZXRhZGF0YS5sYW5ndWFnZUlkLFxuICAgICAgICByYXdEZWZhdWx0TWV0YWRhdGEudG9rZW5UeXBlLFxuICAgICAgICBudWxsLFxuICAgICAgICBkZWZhdWx0U3R5bGUuZm9udFN0eWxlLFxuICAgICAgICBkZWZhdWx0U3R5bGUuZm9yZWdyb3VuZElkLFxuICAgICAgICBkZWZhdWx0U3R5bGUuYmFja2dyb3VuZElkXG4gICAgICApO1xuICAgICAgY29uc3Qgcm9vdFNjb3BlTmFtZSA9IHRoaXMuZ2V0UnVsZSh0aGlzLl9yb290SWQpLmdldE5hbWUoXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgICBsZXQgc2NvcGVMaXN0O1xuICAgICAgaWYgKHJvb3RTY29wZU5hbWUpIHtcbiAgICAgICAgc2NvcGVMaXN0ID0gQXR0cmlidXRlZFNjb3BlU3RhY2suY3JlYXRlUm9vdEFuZExvb2tVcFNjb3BlTmFtZShcbiAgICAgICAgICByb290U2NvcGVOYW1lLFxuICAgICAgICAgIGRlZmF1bHRNZXRhZGF0YSxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY29wZUxpc3QgPSBBdHRyaWJ1dGVkU2NvcGVTdGFjay5jcmVhdGVSb290KFxuICAgICAgICAgIFwidW5rbm93blwiLFxuICAgICAgICAgIGRlZmF1bHRNZXRhZGF0YVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJldlN0YXRlID0gbmV3IFN0YXRlU3RhY2tJbXBsKFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLl9yb290SWQsXG4gICAgICAgIC0xLFxuICAgICAgICAtMSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHNjb3BlTGlzdCxcbiAgICAgICAgc2NvcGVMaXN0XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0ZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgcHJldlN0YXRlLnJlc2V0KCk7XG4gICAgfVxuICAgIGxpbmVUZXh0ID0gbGluZVRleHQgKyBcIlxcblwiO1xuICAgIGNvbnN0IG9uaWdMaW5lVGV4dCA9IHRoaXMuY3JlYXRlT25pZ1N0cmluZyhsaW5lVGV4dCk7XG4gICAgY29uc3QgbGluZUxlbmd0aCA9IG9uaWdMaW5lVGV4dC5jb250ZW50Lmxlbmd0aDtcbiAgICBjb25zdCBsaW5lVG9rZW5zID0gbmV3IExpbmVUb2tlbnMoXG4gICAgICBlbWl0QmluYXJ5VG9rZW5zLFxuICAgICAgbGluZVRleHQsXG4gICAgICB0aGlzLl90b2tlblR5cGVNYXRjaGVycyxcbiAgICAgIHRoaXMuYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzXG4gICAgKTtcbiAgICBjb25zdCByID0gX3Rva2VuaXplU3RyaW5nKFxuICAgICAgdGhpcyxcbiAgICAgIG9uaWdMaW5lVGV4dCxcbiAgICAgIGlzRmlyc3RMaW5lLFxuICAgICAgMCxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIGxpbmVUb2tlbnMsXG4gICAgICB0cnVlLFxuICAgICAgdGltZUxpbWl0XG4gICAgKTtcbiAgICBkaXNwb3NlT25pZ1N0cmluZyhvbmlnTGluZVRleHQpO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lTGVuZ3RoLFxuICAgICAgbGluZVRva2VucyxcbiAgICAgIHJ1bGVTdGFjazogci5zdGFjayxcbiAgICAgIHN0b3BwZWRFYXJseTogci5zdG9wcGVkRWFybHlcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gaW5pdEdyYW1tYXIoZ3JhbW1hciwgYmFzZSkge1xuICBncmFtbWFyID0gY2xvbmUoZ3JhbW1hcik7XG4gIGdyYW1tYXIucmVwb3NpdG9yeSA9IGdyYW1tYXIucmVwb3NpdG9yeSB8fCB7fTtcbiAgZ3JhbW1hci5yZXBvc2l0b3J5LiRzZWxmID0ge1xuICAgICR2c2NvZGVUZXh0bWF0ZUxvY2F0aW9uOiBncmFtbWFyLiR2c2NvZGVUZXh0bWF0ZUxvY2F0aW9uLFxuICAgIHBhdHRlcm5zOiBncmFtbWFyLnBhdHRlcm5zLFxuICAgIG5hbWU6IGdyYW1tYXIuc2NvcGVOYW1lXG4gIH07XG4gIGdyYW1tYXIucmVwb3NpdG9yeS4kYmFzZSA9IGJhc2UgfHwgZ3JhbW1hci5yZXBvc2l0b3J5LiRzZWxmO1xuICByZXR1cm4gZ3JhbW1hcjtcbn1cbnZhciBBdHRyaWJ1dGVkU2NvcGVTdGFjayA9IGNsYXNzIF9BdHRyaWJ1dGVkU2NvcGVTdGFjayB7XG4gIC8qKlxuICAgKiBJbnZhcmlhbnQ6XG4gICAqIGBgYFxuICAgKiBpZiAocGFyZW50ICYmICFzY29wZVBhdGguZXh0ZW5kcyhwYXJlbnQuc2NvcGVQYXRoKSkge1xuICAgKiBcdHRocm93IG5ldyBFcnJvcigpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyZW50LCBzY29wZVBhdGgsIHRva2VuQXR0cmlidXRlcykge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuc2NvcGVQYXRoID0gc2NvcGVQYXRoO1xuICAgIHRoaXMudG9rZW5BdHRyaWJ1dGVzID0gdG9rZW5BdHRyaWJ1dGVzO1xuICB9XG4gIHN0YXRpYyBmcm9tRXh0ZW5zaW9uKG5hbWVzU2NvcGVMaXN0LCBjb250ZW50TmFtZVNjb3Blc0xpc3QpIHtcbiAgICBsZXQgY3VycmVudCA9IG5hbWVzU2NvcGVMaXN0O1xuICAgIGxldCBzY29wZU5hbWVzID0gbmFtZXNTY29wZUxpc3Q/LnNjb3BlUGF0aCA/PyBudWxsO1xuICAgIGZvciAoY29uc3QgZnJhbWUgb2YgY29udGVudE5hbWVTY29wZXNMaXN0KSB7XG4gICAgICBzY29wZU5hbWVzID0gU2NvcGVTdGFjay5wdXNoKHNjb3BlTmFtZXMsIGZyYW1lLnNjb3BlTmFtZXMpO1xuICAgICAgY3VycmVudCA9IG5ldyBfQXR0cmlidXRlZFNjb3BlU3RhY2soY3VycmVudCwgc2NvcGVOYW1lcywgZnJhbWUuZW5jb2RlZFRva2VuQXR0cmlidXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIHN0YXRpYyBjcmVhdGVSb290KHNjb3BlTmFtZSwgdG9rZW5BdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIG5ldyBfQXR0cmlidXRlZFNjb3BlU3RhY2sobnVsbCwgbmV3IFNjb3BlU3RhY2sobnVsbCwgc2NvcGVOYW1lKSwgdG9rZW5BdHRyaWJ1dGVzKTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlUm9vdEFuZExvb2tVcFNjb3BlTmFtZShzY29wZU5hbWUsIHRva2VuQXR0cmlidXRlcywgZ3JhbW1hcikge1xuICAgIGNvbnN0IHJhd1Jvb3RNZXRhZGF0YSA9IGdyYW1tYXIuZ2V0TWV0YWRhdGFGb3JTY29wZShzY29wZU5hbWUpO1xuICAgIGNvbnN0IHNjb3BlUGF0aCA9IG5ldyBTY29wZVN0YWNrKG51bGwsIHNjb3BlTmFtZSk7XG4gICAgY29uc3Qgcm9vdFN0eWxlID0gZ3JhbW1hci50aGVtZVByb3ZpZGVyLnRoZW1lTWF0Y2goc2NvcGVQYXRoKTtcbiAgICBjb25zdCByZXNvbHZlZFRva2VuQXR0cmlidXRlcyA9IF9BdHRyaWJ1dGVkU2NvcGVTdGFjay5tZXJnZUF0dHJpYnV0ZXMoXG4gICAgICB0b2tlbkF0dHJpYnV0ZXMsXG4gICAgICByYXdSb290TWV0YWRhdGEsXG4gICAgICByb290U3R5bGVcbiAgICApO1xuICAgIHJldHVybiBuZXcgX0F0dHJpYnV0ZWRTY29wZVN0YWNrKG51bGwsIHNjb3BlUGF0aCwgcmVzb2x2ZWRUb2tlbkF0dHJpYnV0ZXMpO1xuICB9XG4gIGdldCBzY29wZU5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NvcGVQYXRoLnNjb3BlTmFtZTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTY29wZU5hbWVzKCkuam9pbihcIiBcIik7XG4gIH1cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIF9BdHRyaWJ1dGVkU2NvcGVTdGFjay5lcXVhbHModGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgIGRvIHtcbiAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFhICYmICFiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFhIHx8ICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChhLnNjb3BlTmFtZSAhPT0gYi5zY29wZU5hbWUgfHwgYS50b2tlbkF0dHJpYnV0ZXMgIT09IGIudG9rZW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICAgIGIgPSBiLnBhcmVudDtcbiAgICB9IHdoaWxlICh0cnVlKTtcbiAgfVxuICBzdGF0aWMgbWVyZ2VBdHRyaWJ1dGVzKGV4aXN0aW5nVG9rZW5BdHRyaWJ1dGVzLCBiYXNpY1Njb3BlQXR0cmlidXRlcywgc3R5bGVBdHRyaWJ1dGVzKSB7XG4gICAgbGV0IGZvbnRTdHlsZSA9IC0xIC8qIE5vdFNldCAqLztcbiAgICBsZXQgZm9yZWdyb3VuZCA9IDA7XG4gICAgbGV0IGJhY2tncm91bmQgPSAwO1xuICAgIGlmIChzdHlsZUF0dHJpYnV0ZXMgIT09IG51bGwpIHtcbiAgICAgIGZvbnRTdHlsZSA9IHN0eWxlQXR0cmlidXRlcy5mb250U3R5bGU7XG4gICAgICBmb3JlZ3JvdW5kID0gc3R5bGVBdHRyaWJ1dGVzLmZvcmVncm91bmRJZDtcbiAgICAgIGJhY2tncm91bmQgPSBzdHlsZUF0dHJpYnV0ZXMuYmFja2dyb3VuZElkO1xuICAgIH1cbiAgICByZXR1cm4gRW5jb2RlZFRva2VuTWV0YWRhdGEuc2V0KFxuICAgICAgZXhpc3RpbmdUb2tlbkF0dHJpYnV0ZXMsXG4gICAgICBiYXNpY1Njb3BlQXR0cmlidXRlcy5sYW5ndWFnZUlkLFxuICAgICAgYmFzaWNTY29wZUF0dHJpYnV0ZXMudG9rZW5UeXBlLFxuICAgICAgbnVsbCxcbiAgICAgIGZvbnRTdHlsZSxcbiAgICAgIGZvcmVncm91bmQsXG4gICAgICBiYWNrZ3JvdW5kXG4gICAgKTtcbiAgfVxuICBwdXNoQXR0cmlidXRlZChzY29wZVBhdGgsIGdyYW1tYXIpIHtcbiAgICBpZiAoc2NvcGVQYXRoID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKHNjb3BlUGF0aC5pbmRleE9mKFwiIFwiKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBfQXR0cmlidXRlZFNjb3BlU3RhY2suX3B1c2hBdHRyaWJ1dGVkKHRoaXMsIHNjb3BlUGF0aCwgZ3JhbW1hcik7XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlcyA9IHNjb3BlUGF0aC5zcGxpdCgvIC9nKTtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcztcbiAgICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgICAgcmVzdWx0ID0gX0F0dHJpYnV0ZWRTY29wZVN0YWNrLl9wdXNoQXR0cmlidXRlZChyZXN1bHQsIHNjb3BlLCBncmFtbWFyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBzdGF0aWMgX3B1c2hBdHRyaWJ1dGVkKHRhcmdldCwgc2NvcGVOYW1lLCBncmFtbWFyKSB7XG4gICAgY29uc3QgcmF3TWV0YWRhdGEgPSBncmFtbWFyLmdldE1ldGFkYXRhRm9yU2NvcGUoc2NvcGVOYW1lKTtcbiAgICBjb25zdCBuZXdQYXRoID0gdGFyZ2V0LnNjb3BlUGF0aC5wdXNoKHNjb3BlTmFtZSk7XG4gICAgY29uc3Qgc2NvcGVUaGVtZU1hdGNoUmVzdWx0ID0gZ3JhbW1hci50aGVtZVByb3ZpZGVyLnRoZW1lTWF0Y2gobmV3UGF0aCk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBfQXR0cmlidXRlZFNjb3BlU3RhY2subWVyZ2VBdHRyaWJ1dGVzKFxuICAgICAgdGFyZ2V0LnRva2VuQXR0cmlidXRlcyxcbiAgICAgIHJhd01ldGFkYXRhLFxuICAgICAgc2NvcGVUaGVtZU1hdGNoUmVzdWx0XG4gICAgKTtcbiAgICByZXR1cm4gbmV3IF9BdHRyaWJ1dGVkU2NvcGVTdGFjayh0YXJnZXQsIG5ld1BhdGgsIG1ldGFkYXRhKTtcbiAgfVxuICBnZXRTY29wZU5hbWVzKCkge1xuICAgIHJldHVybiB0aGlzLnNjb3BlUGF0aC5nZXRTZWdtZW50cygpO1xuICB9XG4gIGdldEV4dGVuc2lvbklmRGVmaW5lZChiYXNlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHdoaWxlIChzZWxmICYmIHNlbGYgIT09IGJhc2UpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgZW5jb2RlZFRva2VuQXR0cmlidXRlczogc2VsZi50b2tlbkF0dHJpYnV0ZXMsXG4gICAgICAgIHNjb3BlTmFtZXM6IHNlbGYuc2NvcGVQYXRoLmdldEV4dGVuc2lvbklmRGVmaW5lZChzZWxmLnBhcmVudD8uc2NvcGVQYXRoID8/IG51bGwpXG4gICAgICB9KTtcbiAgICAgIHNlbGYgPSBzZWxmLnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGYgPT09IGJhc2UgPyByZXN1bHQucmV2ZXJzZSgpIDogdm9pZCAwO1xuICB9XG59O1xudmFyIFN0YXRlU3RhY2tJbXBsID0gY2xhc3MgX1N0YXRlU3RhY2tJbXBsIHtcbiAgLyoqXG4gICAqIEludmFyaWFudDpcbiAgICogYGBgXG4gICAqIGlmIChjb250ZW50TmFtZVNjb3Blc0xpc3QgIT09IG5hbWVTY29wZXNMaXN0ICYmIGNvbnRlbnROYW1lU2NvcGVzTGlzdD8ucGFyZW50ICE9PSBuYW1lU2NvcGVzTGlzdCkge1xuICAgKiBcdHRocm93IG5ldyBFcnJvcigpO1xuICAgKiB9XG4gICAqIGlmICh0aGlzLnBhcmVudCAmJiAhbmFtZVNjb3Blc0xpc3QuZXh0ZW5kcyh0aGlzLnBhcmVudC5jb250ZW50TmFtZVNjb3Blc0xpc3QpKSB7XG4gICAqIFx0dGhyb3cgbmV3IEVycm9yKCk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHJ1bGVJZCwgZW50ZXJQb3MsIGFuY2hvclBvcywgYmVnaW5SdWxlQ2FwdHVyZWRFT0wsIGVuZFJ1bGUsIG5hbWVTY29wZXNMaXN0LCBjb250ZW50TmFtZVNjb3Blc0xpc3QpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLnJ1bGVJZCA9IHJ1bGVJZDtcbiAgICB0aGlzLmJlZ2luUnVsZUNhcHR1cmVkRU9MID0gYmVnaW5SdWxlQ2FwdHVyZWRFT0w7XG4gICAgdGhpcy5lbmRSdWxlID0gZW5kUnVsZTtcbiAgICB0aGlzLm5hbWVTY29wZXNMaXN0ID0gbmFtZVNjb3Blc0xpc3Q7XG4gICAgdGhpcy5jb250ZW50TmFtZVNjb3Blc0xpc3QgPSBjb250ZW50TmFtZVNjb3Blc0xpc3Q7XG4gICAgdGhpcy5kZXB0aCA9IHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZGVwdGggKyAxIDogMTtcbiAgICB0aGlzLl9lbnRlclBvcyA9IGVudGVyUG9zO1xuICAgIHRoaXMuX2FuY2hvclBvcyA9IGFuY2hvclBvcztcbiAgfVxuICBfc3RhY2tFbGVtZW50QnJhbmQgPSB2b2lkIDA7XG4gIC8vIFRPRE8gcmVtb3ZlIG1lXG4gIHN0YXRpYyBOVUxMID0gbmV3IF9TdGF0ZVN0YWNrSW1wbChcbiAgICBudWxsLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIGZhbHNlLFxuICAgIG51bGwsXG4gICAgbnVsbCxcbiAgICBudWxsXG4gICk7XG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb24gdGhlIGN1cnJlbnQgbGluZSB3aGVyZSB0aGlzIHN0YXRlIHdhcyBwdXNoZWQuXG4gICAqIFRoaXMgaXMgcmVsZXZhbnQgb25seSB3aGlsZSB0b2tlbml6aW5nIGEgbGluZSwgdG8gZGV0ZWN0IGVuZGxlc3MgbG9vcHMuXG4gICAqIEl0cyB2YWx1ZSBpcyBtZWFuaW5nbGVzcyBhY3Jvc3MgbGluZXMuXG4gICAqL1xuICBfZW50ZXJQb3M7XG4gIC8qKlxuICAgKiBUaGUgY2FwdHVyZWQgYW5jaG9yIHBvc2l0aW9uIHdoZW4gdGhpcyBzdGFjayBlbGVtZW50IHdhcyBwdXNoZWQuXG4gICAqIFRoaXMgaXMgcmVsZXZhbnQgb25seSB3aGlsZSB0b2tlbml6aW5nIGEgbGluZSwgdG8gcmVzdG9yZSB0aGUgYW5jaG9yIHBvc2l0aW9uIHdoZW4gcG9wcGluZy5cbiAgICogSXRzIHZhbHVlIGlzIG1lYW5pbmdsZXNzIGFjcm9zcyBsaW5lcy5cbiAgICovXG4gIF9hbmNob3JQb3M7XG4gIC8qKlxuICAgKiBUaGUgZGVwdGggb2YgdGhlIHN0YWNrLlxuICAgKi9cbiAgZGVwdGg7XG4gIGVxdWFscyhvdGhlcikge1xuICAgIGlmIChvdGhlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gX1N0YXRlU3RhY2tJbXBsLl9lcXVhbHModGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBfZXF1YWxzKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdGhpcy5fc3RydWN0dXJhbEVxdWFscyhhLCBiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gQXR0cmlidXRlZFNjb3BlU3RhY2suZXF1YWxzKGEuY29udGVudE5hbWVTY29wZXNMaXN0LCBiLmNvbnRlbnROYW1lU2NvcGVzTGlzdCk7XG4gIH1cbiAgLyoqXG4gICAqIEEgc3RydWN0dXJhbCBlcXVhbHMgY2hlY2suIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IGBzY29wZXNgLlxuICAgKi9cbiAgc3RhdGljIF9zdHJ1Y3R1cmFsRXF1YWxzKGEsIGIpIHtcbiAgICBkbyB7XG4gICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghYSAmJiAhYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghYSB8fCAhYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoYS5kZXB0aCAhPT0gYi5kZXB0aCB8fCBhLnJ1bGVJZCAhPT0gYi5ydWxlSWQgfHwgYS5lbmRSdWxlICE9PSBiLmVuZFJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgYSA9IGEucGFyZW50O1xuICAgICAgYiA9IGIucGFyZW50O1xuICAgIH0gd2hpbGUgKHRydWUpO1xuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN0YXRpYyBfcmVzZXQoZWwpIHtcbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIGVsLl9lbnRlclBvcyA9IC0xO1xuICAgICAgZWwuX2FuY2hvclBvcyA9IC0xO1xuICAgICAgZWwgPSBlbC5wYXJlbnQ7XG4gICAgfVxuICB9XG4gIHJlc2V0KCkge1xuICAgIF9TdGF0ZVN0YWNrSW1wbC5fcmVzZXQodGhpcyk7XG4gIH1cbiAgcG9wKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgfVxuICBzYWZlUG9wKCkge1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBwdXNoKHJ1bGVJZCwgZW50ZXJQb3MsIGFuY2hvclBvcywgYmVnaW5SdWxlQ2FwdHVyZWRFT0wsIGVuZFJ1bGUsIG5hbWVTY29wZXNMaXN0LCBjb250ZW50TmFtZVNjb3Blc0xpc3QpIHtcbiAgICByZXR1cm4gbmV3IF9TdGF0ZVN0YWNrSW1wbChcbiAgICAgIHRoaXMsXG4gICAgICBydWxlSWQsXG4gICAgICBlbnRlclBvcyxcbiAgICAgIGFuY2hvclBvcyxcbiAgICAgIGJlZ2luUnVsZUNhcHR1cmVkRU9MLFxuICAgICAgZW5kUnVsZSxcbiAgICAgIG5hbWVTY29wZXNMaXN0LFxuICAgICAgY29udGVudE5hbWVTY29wZXNMaXN0XG4gICAgKTtcbiAgfVxuICBnZXRFbnRlclBvcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50ZXJQb3M7XG4gIH1cbiAgZ2V0QW5jaG9yUG9zKCkge1xuICAgIHJldHVybiB0aGlzLl9hbmNob3JQb3M7XG4gIH1cbiAgZ2V0UnVsZShncmFtbWFyKSB7XG4gICAgcmV0dXJuIGdyYW1tYXIuZ2V0UnVsZSh0aGlzLnJ1bGVJZCk7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgciA9IFtdO1xuICAgIHRoaXMuX3dyaXRlU3RyaW5nKHIsIDApO1xuICAgIHJldHVybiBcIltcIiArIHIuam9pbihcIixcIikgKyBcIl1cIjtcbiAgfVxuICBfd3JpdGVTdHJpbmcocmVzLCBvdXRJbmRleCkge1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgb3V0SW5kZXggPSB0aGlzLnBhcmVudC5fd3JpdGVTdHJpbmcocmVzLCBvdXRJbmRleCk7XG4gICAgfVxuICAgIHJlc1tvdXRJbmRleCsrXSA9IGAoJHt0aGlzLnJ1bGVJZH0sICR7dGhpcy5uYW1lU2NvcGVzTGlzdD8udG9TdHJpbmcoKX0sICR7dGhpcy5jb250ZW50TmFtZVNjb3Blc0xpc3Q/LnRvU3RyaW5nKCl9KWA7XG4gICAgcmV0dXJuIG91dEluZGV4O1xuICB9XG4gIHdpdGhDb250ZW50TmFtZVNjb3Blc0xpc3QoY29udGVudE5hbWVTY29wZVN0YWNrKSB7XG4gICAgaWYgKHRoaXMuY29udGVudE5hbWVTY29wZXNMaXN0ID09PSBjb250ZW50TmFtZVNjb3BlU3RhY2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXJlbnQucHVzaChcbiAgICAgIHRoaXMucnVsZUlkLFxuICAgICAgdGhpcy5fZW50ZXJQb3MsXG4gICAgICB0aGlzLl9hbmNob3JQb3MsXG4gICAgICB0aGlzLmJlZ2luUnVsZUNhcHR1cmVkRU9MLFxuICAgICAgdGhpcy5lbmRSdWxlLFxuICAgICAgdGhpcy5uYW1lU2NvcGVzTGlzdCxcbiAgICAgIGNvbnRlbnROYW1lU2NvcGVTdGFja1xuICAgICk7XG4gIH1cbiAgd2l0aEVuZFJ1bGUoZW5kUnVsZSkge1xuICAgIGlmICh0aGlzLmVuZFJ1bGUgPT09IGVuZFJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9TdGF0ZVN0YWNrSW1wbChcbiAgICAgIHRoaXMucGFyZW50LFxuICAgICAgdGhpcy5ydWxlSWQsXG4gICAgICB0aGlzLl9lbnRlclBvcyxcbiAgICAgIHRoaXMuX2FuY2hvclBvcyxcbiAgICAgIHRoaXMuYmVnaW5SdWxlQ2FwdHVyZWRFT0wsXG4gICAgICBlbmRSdWxlLFxuICAgICAgdGhpcy5uYW1lU2NvcGVzTGlzdCxcbiAgICAgIHRoaXMuY29udGVudE5hbWVTY29wZXNMaXN0XG4gICAgKTtcbiAgfVxuICAvLyBVc2VkIHRvIHdhcm4gb2YgZW5kbGVzcyBsb29wc1xuICBoYXNTYW1lUnVsZUFzKG90aGVyKSB7XG4gICAgbGV0IGVsID0gdGhpcztcbiAgICB3aGlsZSAoZWwgJiYgZWwuX2VudGVyUG9zID09PSBvdGhlci5fZW50ZXJQb3MpIHtcbiAgICAgIGlmIChlbC5ydWxlSWQgPT09IG90aGVyLnJ1bGVJZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsID0gZWwucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdG9TdGF0ZVN0YWNrRnJhbWUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVJZDogcnVsZUlkVG9OdW1iZXIodGhpcy5ydWxlSWQpLFxuICAgICAgYmVnaW5SdWxlQ2FwdHVyZWRFT0w6IHRoaXMuYmVnaW5SdWxlQ2FwdHVyZWRFT0wsXG4gICAgICBlbmRSdWxlOiB0aGlzLmVuZFJ1bGUsXG4gICAgICBuYW1lU2NvcGVzTGlzdDogdGhpcy5uYW1lU2NvcGVzTGlzdD8uZ2V0RXh0ZW5zaW9uSWZEZWZpbmVkKHRoaXMucGFyZW50Py5uYW1lU2NvcGVzTGlzdCA/PyBudWxsKSA/PyBbXSxcbiAgICAgIGNvbnRlbnROYW1lU2NvcGVzTGlzdDogdGhpcy5jb250ZW50TmFtZVNjb3Blc0xpc3Q/LmdldEV4dGVuc2lvbklmRGVmaW5lZCh0aGlzLm5hbWVTY29wZXNMaXN0KSA/PyBbXVxuICAgIH07XG4gIH1cbiAgc3RhdGljIHB1c2hGcmFtZShzZWxmLCBmcmFtZSkge1xuICAgIGNvbnN0IG5hbWVzU2NvcGVMaXN0ID0gQXR0cmlidXRlZFNjb3BlU3RhY2suZnJvbUV4dGVuc2lvbihzZWxmPy5uYW1lU2NvcGVzTGlzdCA/PyBudWxsLCBmcmFtZS5uYW1lU2NvcGVzTGlzdCk7XG4gICAgcmV0dXJuIG5ldyBfU3RhdGVTdGFja0ltcGwoXG4gICAgICBzZWxmLFxuICAgICAgcnVsZUlkRnJvbU51bWJlcihmcmFtZS5ydWxlSWQpLFxuICAgICAgZnJhbWUuZW50ZXJQb3MgPz8gLTEsXG4gICAgICBmcmFtZS5hbmNob3JQb3MgPz8gLTEsXG4gICAgICBmcmFtZS5iZWdpblJ1bGVDYXB0dXJlZEVPTCxcbiAgICAgIGZyYW1lLmVuZFJ1bGUsXG4gICAgICBuYW1lc1Njb3BlTGlzdCxcbiAgICAgIEF0dHJpYnV0ZWRTY29wZVN0YWNrLmZyb21FeHRlbnNpb24obmFtZXNTY29wZUxpc3QsIGZyYW1lLmNvbnRlbnROYW1lU2NvcGVzTGlzdClcbiAgICApO1xuICB9XG59O1xudmFyIEJhbGFuY2VkQnJhY2tldFNlbGVjdG9ycyA9IGNsYXNzIHtcbiAgYmFsYW5jZWRCcmFja2V0U2NvcGVzO1xuICB1bmJhbGFuY2VkQnJhY2tldFNjb3BlcztcbiAgYWxsb3dBbnkgPSBmYWxzZTtcbiAgY29uc3RydWN0b3IoYmFsYW5jZWRCcmFja2V0U2NvcGVzLCB1bmJhbGFuY2VkQnJhY2tldFNjb3Blcykge1xuICAgIHRoaXMuYmFsYW5jZWRCcmFja2V0U2NvcGVzID0gYmFsYW5jZWRCcmFja2V0U2NvcGVzLmZsYXRNYXAoXG4gICAgICAoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSBcIipcIikge1xuICAgICAgICAgIHRoaXMuYWxsb3dBbnkgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlTWF0Y2hlcnMoc2VsZWN0b3IsIG5hbWVNYXRjaGVyKS5tYXAoKG0pID0+IG0ubWF0Y2hlcik7XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLnVuYmFsYW5jZWRCcmFja2V0U2NvcGVzID0gdW5iYWxhbmNlZEJyYWNrZXRTY29wZXMuZmxhdE1hcChcbiAgICAgIChzZWxlY3RvcikgPT4gY3JlYXRlTWF0Y2hlcnMoc2VsZWN0b3IsIG5hbWVNYXRjaGVyKS5tYXAoKG0pID0+IG0ubWF0Y2hlcilcbiAgICApO1xuICB9XG4gIGdldCBtYXRjaGVzQWx3YXlzKCkge1xuICAgIHJldHVybiB0aGlzLmFsbG93QW55ICYmIHRoaXMudW5iYWxhbmNlZEJyYWNrZXRTY29wZXMubGVuZ3RoID09PSAwO1xuICB9XG4gIGdldCBtYXRjaGVzTmV2ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmFsYW5jZWRCcmFja2V0U2NvcGVzLmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5hbGxvd0FueTtcbiAgfVxuICBtYXRjaChzY29wZXMpIHtcbiAgICBmb3IgKGNvbnN0IGV4Y2x1ZGVyIG9mIHRoaXMudW5iYWxhbmNlZEJyYWNrZXRTY29wZXMpIHtcbiAgICAgIGlmIChleGNsdWRlcihzY29wZXMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBpbmNsdWRlciBvZiB0aGlzLmJhbGFuY2VkQnJhY2tldFNjb3Blcykge1xuICAgICAgaWYgKGluY2x1ZGVyKHNjb3BlcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFsbG93QW55O1xuICB9XG59O1xudmFyIExpbmVUb2tlbnMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGVtaXRCaW5hcnlUb2tlbnMsIGxpbmVUZXh0LCB0b2tlblR5cGVPdmVycmlkZXMsIGJhbGFuY2VkQnJhY2tldFNlbGVjdG9ycykge1xuICAgIHRoaXMuYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzID0gYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzO1xuICAgIHRoaXMuX2VtaXRCaW5hcnlUb2tlbnMgPSBlbWl0QmluYXJ5VG9rZW5zO1xuICAgIHRoaXMuX3Rva2VuVHlwZU92ZXJyaWRlcyA9IHRva2VuVHlwZU92ZXJyaWRlcztcbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIHRoaXMuX2xpbmVUZXh0ID0gbGluZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpbmVUZXh0ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fdG9rZW5zID0gW107XG4gICAgdGhpcy5fYmluYXJ5VG9rZW5zID0gW107XG4gICAgdGhpcy5fbGFzdFRva2VuRW5kSW5kZXggPSAwO1xuICB9XG4gIF9lbWl0QmluYXJ5VG9rZW5zO1xuICAvKipcbiAgICogZGVmaW5lZCBvbmx5IGlmIGBmYWxzZWAuXG4gICAqL1xuICBfbGluZVRleHQ7XG4gIC8qKlxuICAgKiB1c2VkIG9ubHkgaWYgYF9lbWl0QmluYXJ5VG9rZW5zYCBpcyBmYWxzZS5cbiAgICovXG4gIF90b2tlbnM7XG4gIC8qKlxuICAgKiB1c2VkIG9ubHkgaWYgYF9lbWl0QmluYXJ5VG9rZW5zYCBpcyB0cnVlLlxuICAgKi9cbiAgX2JpbmFyeVRva2VucztcbiAgX2xhc3RUb2tlbkVuZEluZGV4O1xuICBfdG9rZW5UeXBlT3ZlcnJpZGVzO1xuICBwcm9kdWNlKHN0YWNrLCBlbmRJbmRleCkge1xuICAgIHRoaXMucHJvZHVjZUZyb21TY29wZXMoc3RhY2suY29udGVudE5hbWVTY29wZXNMaXN0LCBlbmRJbmRleCk7XG4gIH1cbiAgcHJvZHVjZUZyb21TY29wZXMoc2NvcGVzTGlzdCwgZW5kSW5kZXgpIHtcbiAgICBpZiAodGhpcy5fbGFzdFRva2VuRW5kSW5kZXggPj0gZW5kSW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2VtaXRCaW5hcnlUb2tlbnMpIHtcbiAgICAgIGxldCBtZXRhZGF0YSA9IHNjb3Blc0xpc3Q/LnRva2VuQXR0cmlidXRlcyA/PyAwO1xuICAgICAgbGV0IGNvbnRhaW5zQmFsYW5jZWRCcmFja2V0cyA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzPy5tYXRjaGVzQWx3YXlzKSB7XG4gICAgICAgIGNvbnRhaW5zQmFsYW5jZWRCcmFja2V0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fdG9rZW5UeXBlT3ZlcnJpZGVzLmxlbmd0aCA+IDAgfHwgdGhpcy5iYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMgJiYgIXRoaXMuYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzLm1hdGNoZXNBbHdheXMgJiYgIXRoaXMuYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzLm1hdGNoZXNOZXZlcikge1xuICAgICAgICBjb25zdCBzY29wZXMyID0gc2NvcGVzTGlzdD8uZ2V0U2NvcGVOYW1lcygpID8/IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHRva2VuVHlwZSBvZiB0aGlzLl90b2tlblR5cGVPdmVycmlkZXMpIHtcbiAgICAgICAgICBpZiAodG9rZW5UeXBlLm1hdGNoZXIoc2NvcGVzMikpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhID0gRW5jb2RlZFRva2VuTWV0YWRhdGEuc2V0KFxuICAgICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgdG9PcHRpb25hbFRva2VuVHlwZSh0b2tlblR5cGUudHlwZSksXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIC0xIC8qIE5vdFNldCAqLyxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzKSB7XG4gICAgICAgICAgY29udGFpbnNCYWxhbmNlZEJyYWNrZXRzID0gdGhpcy5iYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMubWF0Y2goc2NvcGVzMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb250YWluc0JhbGFuY2VkQnJhY2tldHMpIHtcbiAgICAgICAgbWV0YWRhdGEgPSBFbmNvZGVkVG9rZW5NZXRhZGF0YS5zZXQoXG4gICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAgMCxcbiAgICAgICAgICA4IC8qIE5vdFNldCAqLyxcbiAgICAgICAgICBjb250YWluc0JhbGFuY2VkQnJhY2tldHMsXG4gICAgICAgICAgLTEgLyogTm90U2V0ICovLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2JpbmFyeVRva2Vucy5sZW5ndGggPiAwICYmIHRoaXMuX2JpbmFyeVRva2Vuc1t0aGlzLl9iaW5hcnlUb2tlbnMubGVuZ3RoIC0gMV0gPT09IG1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMuX2xhc3RUb2tlbkVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2JpbmFyeVRva2Vucy5wdXNoKHRoaXMuX2xhc3RUb2tlbkVuZEluZGV4KTtcbiAgICAgIHRoaXMuX2JpbmFyeVRva2Vucy5wdXNoKG1ldGFkYXRhKTtcbiAgICAgIHRoaXMuX2xhc3RUb2tlbkVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlcyA9IHNjb3Blc0xpc3Q/LmdldFNjb3BlTmFtZXMoKSA/PyBbXTtcbiAgICB0aGlzLl90b2tlbnMucHVzaCh7XG4gICAgICBzdGFydEluZGV4OiB0aGlzLl9sYXN0VG9rZW5FbmRJbmRleCxcbiAgICAgIGVuZEluZGV4LFxuICAgICAgLy8gdmFsdWU6IGxpbmVUZXh0LnN1YnN0cmluZyhsYXN0VG9rZW5FbmRJbmRleCwgZW5kSW5kZXgpLFxuICAgICAgc2NvcGVzXG4gICAgfSk7XG4gICAgdGhpcy5fbGFzdFRva2VuRW5kSW5kZXggPSBlbmRJbmRleDtcbiAgfVxuICBnZXRSZXN1bHQoc3RhY2ssIGxpbmVMZW5ndGgpIHtcbiAgICBpZiAodGhpcy5fdG9rZW5zLmxlbmd0aCA+IDAgJiYgdGhpcy5fdG9rZW5zW3RoaXMuX3Rva2Vucy5sZW5ndGggLSAxXS5zdGFydEluZGV4ID09PSBsaW5lTGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5fdG9rZW5zLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fbGFzdFRva2VuRW5kSW5kZXggPSAtMTtcbiAgICAgIHRoaXMucHJvZHVjZShzdGFjaywgbGluZUxlbmd0aCk7XG4gICAgICB0aGlzLl90b2tlbnNbdGhpcy5fdG9rZW5zLmxlbmd0aCAtIDFdLnN0YXJ0SW5kZXggPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdG9rZW5zO1xuICB9XG4gIGdldEJpbmFyeVJlc3VsdChzdGFjaywgbGluZUxlbmd0aCkge1xuICAgIGlmICh0aGlzLl9iaW5hcnlUb2tlbnMubGVuZ3RoID4gMCAmJiB0aGlzLl9iaW5hcnlUb2tlbnNbdGhpcy5fYmluYXJ5VG9rZW5zLmxlbmd0aCAtIDJdID09PSBsaW5lTGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5fYmluYXJ5VG9rZW5zLnBvcCgpO1xuICAgICAgdGhpcy5fYmluYXJ5VG9rZW5zLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYmluYXJ5VG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fbGFzdFRva2VuRW5kSW5kZXggPSAtMTtcbiAgICAgIHRoaXMucHJvZHVjZShzdGFjaywgbGluZUxlbmd0aCk7XG4gICAgICB0aGlzLl9iaW5hcnlUb2tlbnNbdGhpcy5fYmluYXJ5VG9rZW5zLmxlbmd0aCAtIDJdID0gMDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQzMkFycmF5KHRoaXMuX2JpbmFyeVRva2Vucy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9iaW5hcnlUb2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IHRoaXMuX2JpbmFyeVRva2Vuc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxuLy8gc3JjL3JlZ2lzdHJ5LnRzXG52YXIgU3luY1JlZ2lzdHJ5ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcih0aGVtZSwgX29uaWdMaWIpIHtcbiAgICB0aGlzLl9vbmlnTGliID0gX29uaWdMaWI7XG4gICAgdGhpcy5fdGhlbWUgPSB0aGVtZTtcbiAgfVxuICBfZ3JhbW1hcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBfcmF3R3JhbW1hcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBfaW5qZWN0aW9uR3JhbW1hcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBfdGhlbWU7XG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBncmFtbWFyIG9mIHRoaXMuX2dyYW1tYXJzLnZhbHVlcygpKSB7XG4gICAgICBncmFtbWFyLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cbiAgc2V0VGhlbWUodGhlbWUpIHtcbiAgICB0aGlzLl90aGVtZSA9IHRoZW1lO1xuICB9XG4gIGdldENvbG9yTWFwKCkge1xuICAgIHJldHVybiB0aGlzLl90aGVtZS5nZXRDb2xvck1hcCgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYGdyYW1tYXJgIHRvIHJlZ2lzdHJ5IGFuZCByZXR1cm4gYSBsaXN0IG9mIHJlZmVyZW5jZWQgc2NvcGUgbmFtZXNcbiAgICovXG4gIGFkZEdyYW1tYXIoZ3JhbW1hciwgaW5qZWN0aW9uU2NvcGVOYW1lcykge1xuICAgIHRoaXMuX3Jhd0dyYW1tYXJzLnNldChncmFtbWFyLnNjb3BlTmFtZSwgZ3JhbW1hcik7XG4gICAgaWYgKGluamVjdGlvblNjb3BlTmFtZXMpIHtcbiAgICAgIHRoaXMuX2luamVjdGlvbkdyYW1tYXJzLnNldChncmFtbWFyLnNjb3BlTmFtZSwgaW5qZWN0aW9uU2NvcGVOYW1lcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMb29rdXAgYSByYXcgZ3JhbW1hci5cbiAgICovXG4gIGxvb2t1cChzY29wZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcmF3R3JhbW1hcnMuZ2V0KHNjb3BlTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluamVjdGlvbnMgZm9yIHRoZSBnaXZlbiBncmFtbWFyXG4gICAqL1xuICBpbmplY3Rpb25zKHRhcmdldFNjb3BlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luamVjdGlvbkdyYW1tYXJzLmdldCh0YXJnZXRTY29wZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCB0aGVtZSBzZXR0aW5nc1xuICAgKi9cbiAgZ2V0RGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW1lLmdldERlZmF1bHRzKCk7XG4gIH1cbiAgLyoqXG4gICAqIE1hdGNoIGEgc2NvcGUgaW4gdGhlIHRoZW1lLlxuICAgKi9cbiAgdGhlbWVNYXRjaChzY29wZVBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbWUubWF0Y2goc2NvcGVQYXRoKTtcbiAgfVxuICAvKipcbiAgICogTG9va3VwIGEgZ3JhbW1hci5cbiAgICovXG4gIGdyYW1tYXJGb3JTY29wZU5hbWUoc2NvcGVOYW1lLCBpbml0aWFsTGFuZ3VhZ2UsIGVtYmVkZGVkTGFuZ3VhZ2VzLCB0b2tlblR5cGVzLCBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMpIHtcbiAgICBpZiAoIXRoaXMuX2dyYW1tYXJzLmhhcyhzY29wZU5hbWUpKSB7XG4gICAgICBsZXQgcmF3R3JhbW1hciA9IHRoaXMuX3Jhd0dyYW1tYXJzLmdldChzY29wZU5hbWUpO1xuICAgICAgaWYgKCFyYXdHcmFtbWFyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5fZ3JhbW1hcnMuc2V0KHNjb3BlTmFtZSwgY3JlYXRlR3JhbW1hcihcbiAgICAgICAgc2NvcGVOYW1lLFxuICAgICAgICByYXdHcmFtbWFyLFxuICAgICAgICBpbml0aWFsTGFuZ3VhZ2UsXG4gICAgICAgIGVtYmVkZGVkTGFuZ3VhZ2VzLFxuICAgICAgICB0b2tlblR5cGVzLFxuICAgICAgICBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuX29uaWdMaWJcbiAgICAgICkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZ3JhbW1hcnMuZ2V0KHNjb3BlTmFtZSk7XG4gIH1cbn07XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIFJlZ2lzdHJ5ID0gY2xhc3Mge1xuICBfb3B0aW9ucztcbiAgX3N5bmNSZWdpc3RyeTtcbiAgX2Vuc3VyZUdyYW1tYXJDYWNoZTtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuX3N5bmNSZWdpc3RyeSA9IG5ldyBTeW5jUmVnaXN0cnkoXG4gICAgICBUaGVtZS5jcmVhdGVGcm9tUmF3VGhlbWUob3B0aW9ucy50aGVtZSwgb3B0aW9ucy5jb2xvck1hcCksXG4gICAgICBvcHRpb25zLm9uaWdMaWJcbiAgICApO1xuICAgIHRoaXMuX2Vuc3VyZUdyYW1tYXJDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9zeW5jUmVnaXN0cnkuZGlzcG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIHRoZW1lLiBPbmNlIGNhbGxlZCwgbm8gcHJldmlvdXMgYHJ1bGVTdGFja2Agc2hvdWxkIGJlIHVzZWQgYW55bW9yZS5cbiAgICovXG4gIHNldFRoZW1lKHRoZW1lLCBjb2xvck1hcCkge1xuICAgIHRoaXMuX3N5bmNSZWdpc3RyeS5zZXRUaGVtZShUaGVtZS5jcmVhdGVGcm9tUmF3VGhlbWUodGhlbWUsIGNvbG9yTWFwKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb29rdXAgYXJyYXkgZm9yIGNvbG9yIGlkcy5cbiAgICovXG4gIGdldENvbG9yTWFwKCkge1xuICAgIHJldHVybiB0aGlzLl9zeW5jUmVnaXN0cnkuZ2V0Q29sb3JNYXAoKTtcbiAgfVxuICAvKipcbiAgICogTG9hZCB0aGUgZ3JhbW1hciBmb3IgYHNjb3BlTmFtZWAgYW5kIGFsbCByZWZlcmVuY2VkIGluY2x1ZGVkIGdyYW1tYXJzIGFzeW5jaHJvbm91c2x5LlxuICAgKiBQbGVhc2UgZG8gbm90IHVzZSBsYW5ndWFnZSBpZCAwLlxuICAgKi9cbiAgbG9hZEdyYW1tYXJXaXRoRW1iZWRkZWRMYW5ndWFnZXMoaW5pdGlhbFNjb3BlTmFtZSwgaW5pdGlhbExhbmd1YWdlLCBlbWJlZGRlZExhbmd1YWdlcykge1xuICAgIHJldHVybiB0aGlzLmxvYWRHcmFtbWFyV2l0aENvbmZpZ3VyYXRpb24oaW5pdGlhbFNjb3BlTmFtZSwgaW5pdGlhbExhbmd1YWdlLCB7IGVtYmVkZGVkTGFuZ3VhZ2VzIH0pO1xuICB9XG4gIC8qKlxuICAgKiBMb2FkIHRoZSBncmFtbWFyIGZvciBgc2NvcGVOYW1lYCBhbmQgYWxsIHJlZmVyZW5jZWQgaW5jbHVkZWQgZ3JhbW1hcnMgYXN5bmNocm9ub3VzbHkuXG4gICAqIFBsZWFzZSBkbyBub3QgdXNlIGxhbmd1YWdlIGlkIDAuXG4gICAqL1xuICBsb2FkR3JhbW1hcldpdGhDb25maWd1cmF0aW9uKGluaXRpYWxTY29wZU5hbWUsIGluaXRpYWxMYW5ndWFnZSwgY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB0aGlzLl9sb2FkR3JhbW1hcihcbiAgICAgIGluaXRpYWxTY29wZU5hbWUsXG4gICAgICBpbml0aWFsTGFuZ3VhZ2UsXG4gICAgICBjb25maWd1cmF0aW9uLmVtYmVkZGVkTGFuZ3VhZ2VzLFxuICAgICAgY29uZmlndXJhdGlvbi50b2tlblR5cGVzLFxuICAgICAgbmV3IEJhbGFuY2VkQnJhY2tldFNlbGVjdG9ycyhcbiAgICAgICAgY29uZmlndXJhdGlvbi5iYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMgfHwgW10sXG4gICAgICAgIGNvbmZpZ3VyYXRpb24udW5iYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMgfHwgW11cbiAgICAgIClcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMb2FkIHRoZSBncmFtbWFyIGZvciBgc2NvcGVOYW1lYCBhbmQgYWxsIHJlZmVyZW5jZWQgaW5jbHVkZWQgZ3JhbW1hcnMgYXN5bmNocm9ub3VzbHkuXG4gICAqL1xuICBsb2FkR3JhbW1hcihpbml0aWFsU2NvcGVOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRHcmFtbWFyKGluaXRpYWxTY29wZU5hbWUsIDAsIG51bGwsIG51bGwsIG51bGwpO1xuICB9XG4gIF9sb2FkR3JhbW1hcihpbml0aWFsU2NvcGVOYW1lLCBpbml0aWFsTGFuZ3VhZ2UsIGVtYmVkZGVkTGFuZ3VhZ2VzLCB0b2tlblR5cGVzLCBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMpIHtcbiAgICBjb25zdCBkZXBlbmRlbmN5UHJvY2Vzc29yID0gbmV3IFNjb3BlRGVwZW5kZW5jeVByb2Nlc3Nvcih0aGlzLl9zeW5jUmVnaXN0cnksIGluaXRpYWxTY29wZU5hbWUpO1xuICAgIHdoaWxlIChkZXBlbmRlbmN5UHJvY2Vzc29yLlEubGVuZ3RoID4gMCkge1xuICAgICAgZGVwZW5kZW5jeVByb2Nlc3Nvci5RLm1hcCgocmVxdWVzdCkgPT4gdGhpcy5fbG9hZFNpbmdsZUdyYW1tYXIocmVxdWVzdC5zY29wZU5hbWUpKTtcbiAgICAgIGRlcGVuZGVuY3lQcm9jZXNzb3IucHJvY2Vzc1F1ZXVlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ncmFtbWFyRm9yU2NvcGVOYW1lKFxuICAgICAgaW5pdGlhbFNjb3BlTmFtZSxcbiAgICAgIGluaXRpYWxMYW5ndWFnZSxcbiAgICAgIGVtYmVkZGVkTGFuZ3VhZ2VzLFxuICAgICAgdG9rZW5UeXBlcyxcbiAgICAgIGJhbGFuY2VkQnJhY2tldFNlbGVjdG9yc1xuICAgICk7XG4gIH1cbiAgX2xvYWRTaW5nbGVHcmFtbWFyKHNjb3BlTmFtZSkge1xuICAgIGlmICghdGhpcy5fZW5zdXJlR3JhbW1hckNhY2hlLmhhcyhzY29wZU5hbWUpKSB7XG4gICAgICB0aGlzLl9kb0xvYWRTaW5nbGVHcmFtbWFyKHNjb3BlTmFtZSk7XG4gICAgICB0aGlzLl9lbnN1cmVHcmFtbWFyQ2FjaGUuc2V0KHNjb3BlTmFtZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIF9kb0xvYWRTaW5nbGVHcmFtbWFyKHNjb3BlTmFtZSkge1xuICAgIGNvbnN0IGdyYW1tYXIgPSB0aGlzLl9vcHRpb25zLmxvYWRHcmFtbWFyKHNjb3BlTmFtZSk7XG4gICAgaWYgKGdyYW1tYXIpIHtcbiAgICAgIGNvbnN0IGluamVjdGlvbnMgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5nZXRJbmplY3Rpb25zID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLl9vcHRpb25zLmdldEluamVjdGlvbnMoc2NvcGVOYW1lKSA6IHZvaWQgMDtcbiAgICAgIHRoaXMuX3N5bmNSZWdpc3RyeS5hZGRHcmFtbWFyKGdyYW1tYXIsIGluamVjdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkcyBhIHJhd0dyYW1tYXIuXG4gICAqL1xuICBhZGRHcmFtbWFyKHJhd0dyYW1tYXIsIGluamVjdGlvbnMgPSBbXSwgaW5pdGlhbExhbmd1YWdlID0gMCwgZW1iZWRkZWRMYW5ndWFnZXMgPSBudWxsKSB7XG4gICAgdGhpcy5fc3luY1JlZ2lzdHJ5LmFkZEdyYW1tYXIocmF3R3JhbW1hciwgaW5qZWN0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuX2dyYW1tYXJGb3JTY29wZU5hbWUocmF3R3JhbW1hci5zY29wZU5hbWUsIGluaXRpYWxMYW5ndWFnZSwgZW1iZWRkZWRMYW5ndWFnZXMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGdyYW1tYXIgZm9yIGBzY29wZU5hbWVgLiBUaGUgZ3JhbW1hciBtdXN0IGZpcnN0IGJlIGNyZWF0ZWQgdmlhIGBsb2FkR3JhbW1hcmAgb3IgYGFkZEdyYW1tYXJgLlxuICAgKi9cbiAgX2dyYW1tYXJGb3JTY29wZU5hbWUoc2NvcGVOYW1lLCBpbml0aWFsTGFuZ3VhZ2UgPSAwLCBlbWJlZGRlZExhbmd1YWdlcyA9IG51bGwsIHRva2VuVHlwZXMgPSBudWxsLCBiYWxhbmNlZEJyYWNrZXRTZWxlY3RvcnMgPSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N5bmNSZWdpc3RyeS5ncmFtbWFyRm9yU2NvcGVOYW1lKFxuICAgICAgc2NvcGVOYW1lLFxuICAgICAgaW5pdGlhbExhbmd1YWdlLFxuICAgICAgZW1iZWRkZWRMYW5ndWFnZXMsXG4gICAgICB0b2tlblR5cGVzLFxuICAgICAgYmFsYW5jZWRCcmFja2V0U2VsZWN0b3JzXG4gICAgKTtcbiAgfVxufTtcbnZhciBJTklUSUFMID0gU3RhdGVTdGFja0ltcGwuTlVMTDtcbmV4cG9ydCB7XG4gIEVuY29kZWRUb2tlbk1ldGFkYXRhLFxuICBGaW5kT3B0aW9uLFxuICBGb250U3R5bGUsXG4gIElOSVRJQUwsXG4gIFJlZ2lzdHJ5LFxuICBUaGVtZSxcbiAgZGlzcG9zZU9uaWdTdHJpbmdcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@shikijs+vscode-textmate@10.0.2/node_modules/@shikijs/vscode-textmate/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   characterEntitiesHtml4: () => (/* binding */ characterEntitiesHtml4)\n/* harmony export */ });\n/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nconst characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jaGFyYWN0ZXItZW50aXRpZXMtaHRtbDRAMi4xLjAvbm9kZV9tb2R1bGVzL2NoYXJhY3Rlci1lbnRpdGllcy1odG1sNC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL2NoYXJhY3Rlci1lbnRpdGllcy1odG1sNEAyLjEuMC9ub2RlX21vZHVsZXMvY2hhcmFjdGVyLWVudGl0aWVzLWh0bWw0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFwIG9mIG5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIGZyb20gSFRNTCA0LlxuICpcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3QgY2hhcmFjdGVyRW50aXRpZXNIdG1sNCA9IHtcbiAgbmJzcDogJ8KgJyxcbiAgaWV4Y2w6ICfCoScsXG4gIGNlbnQ6ICfCoicsXG4gIHBvdW5kOiAnwqMnLFxuICBjdXJyZW46ICfCpCcsXG4gIHllbjogJ8KlJyxcbiAgYnJ2YmFyOiAnwqYnLFxuICBzZWN0OiAnwqcnLFxuICB1bWw6ICfCqCcsXG4gIGNvcHk6ICfCqScsXG4gIG9yZGY6ICfCqicsXG4gIGxhcXVvOiAnwqsnLFxuICBub3Q6ICfCrCcsXG4gIHNoeTogJ8KtJyxcbiAgcmVnOiAnwq4nLFxuICBtYWNyOiAnwq8nLFxuICBkZWc6ICfCsCcsXG4gIHBsdXNtbjogJ8KxJyxcbiAgc3VwMjogJ8KyJyxcbiAgc3VwMzogJ8KzJyxcbiAgYWN1dGU6ICfCtCcsXG4gIG1pY3JvOiAnwrUnLFxuICBwYXJhOiAnwrYnLFxuICBtaWRkb3Q6ICfCtycsXG4gIGNlZGlsOiAnwrgnLFxuICBzdXAxOiAnwrknLFxuICBvcmRtOiAnwronLFxuICByYXF1bzogJ8K7JyxcbiAgZnJhYzE0OiAnwrwnLFxuICBmcmFjMTI6ICfCvScsXG4gIGZyYWMzNDogJ8K+JyxcbiAgaXF1ZXN0OiAnwr8nLFxuICBBZ3JhdmU6ICfDgCcsXG4gIEFhY3V0ZTogJ8OBJyxcbiAgQWNpcmM6ICfDgicsXG4gIEF0aWxkZTogJ8ODJyxcbiAgQXVtbDogJ8OEJyxcbiAgQXJpbmc6ICfDhScsXG4gIEFFbGlnOiAnw4YnLFxuICBDY2VkaWw6ICfDhycsXG4gIEVncmF2ZTogJ8OIJyxcbiAgRWFjdXRlOiAnw4knLFxuICBFY2lyYzogJ8OKJyxcbiAgRXVtbDogJ8OLJyxcbiAgSWdyYXZlOiAnw4wnLFxuICBJYWN1dGU6ICfDjScsXG4gIEljaXJjOiAnw44nLFxuICBJdW1sOiAnw48nLFxuICBFVEg6ICfDkCcsXG4gIE50aWxkZTogJ8ORJyxcbiAgT2dyYXZlOiAnw5InLFxuICBPYWN1dGU6ICfDkycsXG4gIE9jaXJjOiAnw5QnLFxuICBPdGlsZGU6ICfDlScsXG4gIE91bWw6ICfDlicsXG4gIHRpbWVzOiAnw5cnLFxuICBPc2xhc2g6ICfDmCcsXG4gIFVncmF2ZTogJ8OZJyxcbiAgVWFjdXRlOiAnw5onLFxuICBVY2lyYzogJ8ObJyxcbiAgVXVtbDogJ8OcJyxcbiAgWWFjdXRlOiAnw50nLFxuICBUSE9STjogJ8OeJyxcbiAgc3psaWc6ICfDnycsXG4gIGFncmF2ZTogJ8OgJyxcbiAgYWFjdXRlOiAnw6EnLFxuICBhY2lyYzogJ8OiJyxcbiAgYXRpbGRlOiAnw6MnLFxuICBhdW1sOiAnw6QnLFxuICBhcmluZzogJ8OlJyxcbiAgYWVsaWc6ICfDpicsXG4gIGNjZWRpbDogJ8OnJyxcbiAgZWdyYXZlOiAnw6gnLFxuICBlYWN1dGU6ICfDqScsXG4gIGVjaXJjOiAnw6onLFxuICBldW1sOiAnw6snLFxuICBpZ3JhdmU6ICfDrCcsXG4gIGlhY3V0ZTogJ8OtJyxcbiAgaWNpcmM6ICfDricsXG4gIGl1bWw6ICfDrycsXG4gIGV0aDogJ8OwJyxcbiAgbnRpbGRlOiAnw7EnLFxuICBvZ3JhdmU6ICfDsicsXG4gIG9hY3V0ZTogJ8OzJyxcbiAgb2NpcmM6ICfDtCcsXG4gIG90aWxkZTogJ8O1JyxcbiAgb3VtbDogJ8O2JyxcbiAgZGl2aWRlOiAnw7cnLFxuICBvc2xhc2g6ICfDuCcsXG4gIHVncmF2ZTogJ8O5JyxcbiAgdWFjdXRlOiAnw7onLFxuICB1Y2lyYzogJ8O7JyxcbiAgdXVtbDogJ8O8JyxcbiAgeWFjdXRlOiAnw70nLFxuICB0aG9ybjogJ8O+JyxcbiAgeXVtbDogJ8O/JyxcbiAgZm5vZjogJ8aSJyxcbiAgQWxwaGE6ICfOkScsXG4gIEJldGE6ICfOkicsXG4gIEdhbW1hOiAnzpMnLFxuICBEZWx0YTogJ86UJyxcbiAgRXBzaWxvbjogJ86VJyxcbiAgWmV0YTogJ86WJyxcbiAgRXRhOiAnzpcnLFxuICBUaGV0YTogJ86YJyxcbiAgSW90YTogJ86ZJyxcbiAgS2FwcGE6ICfOmicsXG4gIExhbWJkYTogJ86bJyxcbiAgTXU6ICfOnCcsXG4gIE51OiAnzp0nLFxuICBYaTogJ86eJyxcbiAgT21pY3JvbjogJ86fJyxcbiAgUGk6ICfOoCcsXG4gIFJobzogJ86hJyxcbiAgU2lnbWE6ICfOoycsXG4gIFRhdTogJ86kJyxcbiAgVXBzaWxvbjogJ86lJyxcbiAgUGhpOiAnzqYnLFxuICBDaGk6ICfOpycsXG4gIFBzaTogJ86oJyxcbiAgT21lZ2E6ICfOqScsXG4gIGFscGhhOiAnzrEnLFxuICBiZXRhOiAnzrInLFxuICBnYW1tYTogJ86zJyxcbiAgZGVsdGE6ICfOtCcsXG4gIGVwc2lsb246ICfOtScsXG4gIHpldGE6ICfOticsXG4gIGV0YTogJ863JyxcbiAgdGhldGE6ICfOuCcsXG4gIGlvdGE6ICfOuScsXG4gIGthcHBhOiAnzronLFxuICBsYW1iZGE6ICfOuycsXG4gIG11OiAnzrwnLFxuICBudTogJ869JyxcbiAgeGk6ICfOvicsXG4gIG9taWNyb246ICfOvycsXG4gIHBpOiAnz4AnLFxuICByaG86ICfPgScsXG4gIHNpZ21hZjogJ8+CJyxcbiAgc2lnbWE6ICfPgycsXG4gIHRhdTogJ8+EJyxcbiAgdXBzaWxvbjogJ8+FJyxcbiAgcGhpOiAnz4YnLFxuICBjaGk6ICfPhycsXG4gIHBzaTogJ8+IJyxcbiAgb21lZ2E6ICfPiScsXG4gIHRoZXRhc3ltOiAnz5EnLFxuICB1cHNpaDogJ8+SJyxcbiAgcGl2OiAnz5YnLFxuICBidWxsOiAn4oCiJyxcbiAgaGVsbGlwOiAn4oCmJyxcbiAgcHJpbWU6ICfigLInLFxuICBQcmltZTogJ+KAsycsXG4gIG9saW5lOiAn4oC+JyxcbiAgZnJhc2w6ICfigYQnLFxuICB3ZWllcnA6ICfihJgnLFxuICBpbWFnZTogJ+KEkScsXG4gIHJlYWw6ICfihJwnLFxuICB0cmFkZTogJ+KEoicsXG4gIGFsZWZzeW06ICfihLUnLFxuICBsYXJyOiAn4oaQJyxcbiAgdWFycjogJ+KGkScsXG4gIHJhcnI6ICfihpInLFxuICBkYXJyOiAn4oaTJyxcbiAgaGFycjogJ+KGlCcsXG4gIGNyYXJyOiAn4oa1JyxcbiAgbEFycjogJ+KHkCcsXG4gIHVBcnI6ICfih5EnLFxuICByQXJyOiAn4oeSJyxcbiAgZEFycjogJ+KHkycsXG4gIGhBcnI6ICfih5QnLFxuICBmb3JhbGw6ICfiiIAnLFxuICBwYXJ0OiAn4oiCJyxcbiAgZXhpc3Q6ICfiiIMnLFxuICBlbXB0eTogJ+KIhScsXG4gIG5hYmxhOiAn4oiHJyxcbiAgaXNpbjogJ+KIiCcsXG4gIG5vdGluOiAn4oiJJyxcbiAgbmk6ICfiiIsnLFxuICBwcm9kOiAn4oiPJyxcbiAgc3VtOiAn4oiRJyxcbiAgbWludXM6ICfiiJInLFxuICBsb3dhc3Q6ICfiiJcnLFxuICByYWRpYzogJ+KImicsXG4gIHByb3A6ICfiiJ0nLFxuICBpbmZpbjogJ+KInicsXG4gIGFuZzogJ+KIoCcsXG4gIGFuZDogJ+KIpycsXG4gIG9yOiAn4oioJyxcbiAgY2FwOiAn4oipJyxcbiAgY3VwOiAn4oiqJyxcbiAgaW50OiAn4oirJyxcbiAgdGhlcmU0OiAn4oi0JyxcbiAgc2ltOiAn4oi8JyxcbiAgY29uZzogJ+KJhScsXG4gIGFzeW1wOiAn4omIJyxcbiAgbmU6ICfiiaAnLFxuICBlcXVpdjogJ+KJoScsXG4gIGxlOiAn4omkJyxcbiAgZ2U6ICfiiaUnLFxuICBzdWI6ICfiioInLFxuICBzdXA6ICfiioMnLFxuICBuc3ViOiAn4oqEJyxcbiAgc3ViZTogJ+KKhicsXG4gIHN1cGU6ICfiiocnLFxuICBvcGx1czogJ+KKlScsXG4gIG90aW1lczogJ+KKlycsXG4gIHBlcnA6ICfiiqUnLFxuICBzZG90OiAn4ouFJyxcbiAgbGNlaWw6ICfijIgnLFxuICByY2VpbDogJ+KMiScsXG4gIGxmbG9vcjogJ+KMiicsXG4gIHJmbG9vcjogJ+KMiycsXG4gIGxhbmc6ICfijKknLFxuICByYW5nOiAn4oyqJyxcbiAgbG96OiAn4peKJyxcbiAgc3BhZGVzOiAn4pmgJyxcbiAgY2x1YnM6ICfimaMnLFxuICBoZWFydHM6ICfimaUnLFxuICBkaWFtczogJ+KZpicsXG4gIHF1b3Q6ICdcIicsXG4gIGFtcDogJyYnLFxuICBsdDogJzwnLFxuICBndDogJz4nLFxuICBPRWxpZzogJ8WSJyxcbiAgb2VsaWc6ICfFkycsXG4gIFNjYXJvbjogJ8WgJyxcbiAgc2Nhcm9uOiAnxaEnLFxuICBZdW1sOiAnxbgnLFxuICBjaXJjOiAny4YnLFxuICB0aWxkZTogJ8ucJyxcbiAgZW5zcDogJ+KAgicsXG4gIGVtc3A6ICfigIMnLFxuICB0aGluc3A6ICfigIknLFxuICB6d25qOiAn4oCMJyxcbiAgendqOiAn4oCNJyxcbiAgbHJtOiAn4oCOJyxcbiAgcmxtOiAn4oCPJyxcbiAgbmRhc2g6ICfigJMnLFxuICBtZGFzaDogJ+KAlCcsXG4gIGxzcXVvOiAn4oCYJyxcbiAgcnNxdW86ICfigJknLFxuICBzYnF1bzogJ+KAmicsXG4gIGxkcXVvOiAn4oCcJyxcbiAgcmRxdW86ICfigJ0nLFxuICBiZHF1bzogJ+KAnicsXG4gIGRhZ2dlcjogJ+KAoCcsXG4gIERhZ2dlcjogJ+KAoScsXG4gIHBlcm1pbDogJ+KAsCcsXG4gIGxzYXF1bzogJ+KAuScsXG4gIHJzYXF1bzogJ+KAuicsXG4gIGV1cm86ICfigqwnXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   characterEntitiesLegacy: () => (/* binding */ characterEntitiesLegacy)\n/* harmony export */ });\n/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nconst characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5QDMuMC4wL25vZGVfbW9kdWxlcy9jaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9jaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5QDMuMC4wL25vZGVfbW9kdWxlcy9jaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiBsZWdhY3kgSFRNTCBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcyB0aGF0IGRvbuKAmXQgbmVlZCBhIHRyYWlsaW5nIHNlbWljb2xvbi5cbiAqXG4gKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNoYXJhY3RlckVudGl0aWVzTGVnYWN5ID0gW1xuICAnQUVsaWcnLFxuICAnQU1QJyxcbiAgJ0FhY3V0ZScsXG4gICdBY2lyYycsXG4gICdBZ3JhdmUnLFxuICAnQXJpbmcnLFxuICAnQXRpbGRlJyxcbiAgJ0F1bWwnLFxuICAnQ09QWScsXG4gICdDY2VkaWwnLFxuICAnRVRIJyxcbiAgJ0VhY3V0ZScsXG4gICdFY2lyYycsXG4gICdFZ3JhdmUnLFxuICAnRXVtbCcsXG4gICdHVCcsXG4gICdJYWN1dGUnLFxuICAnSWNpcmMnLFxuICAnSWdyYXZlJyxcbiAgJ0l1bWwnLFxuICAnTFQnLFxuICAnTnRpbGRlJyxcbiAgJ09hY3V0ZScsXG4gICdPY2lyYycsXG4gICdPZ3JhdmUnLFxuICAnT3NsYXNoJyxcbiAgJ090aWxkZScsXG4gICdPdW1sJyxcbiAgJ1FVT1QnLFxuICAnUkVHJyxcbiAgJ1RIT1JOJyxcbiAgJ1VhY3V0ZScsXG4gICdVY2lyYycsXG4gICdVZ3JhdmUnLFxuICAnVXVtbCcsXG4gICdZYWN1dGUnLFxuICAnYWFjdXRlJyxcbiAgJ2FjaXJjJyxcbiAgJ2FjdXRlJyxcbiAgJ2FlbGlnJyxcbiAgJ2FncmF2ZScsXG4gICdhbXAnLFxuICAnYXJpbmcnLFxuICAnYXRpbGRlJyxcbiAgJ2F1bWwnLFxuICAnYnJ2YmFyJyxcbiAgJ2NjZWRpbCcsXG4gICdjZWRpbCcsXG4gICdjZW50JyxcbiAgJ2NvcHknLFxuICAnY3VycmVuJyxcbiAgJ2RlZycsXG4gICdkaXZpZGUnLFxuICAnZWFjdXRlJyxcbiAgJ2VjaXJjJyxcbiAgJ2VncmF2ZScsXG4gICdldGgnLFxuICAnZXVtbCcsXG4gICdmcmFjMTInLFxuICAnZnJhYzE0JyxcbiAgJ2ZyYWMzNCcsXG4gICdndCcsXG4gICdpYWN1dGUnLFxuICAnaWNpcmMnLFxuICAnaWV4Y2wnLFxuICAnaWdyYXZlJyxcbiAgJ2lxdWVzdCcsXG4gICdpdW1sJyxcbiAgJ2xhcXVvJyxcbiAgJ2x0JyxcbiAgJ21hY3InLFxuICAnbWljcm8nLFxuICAnbWlkZG90JyxcbiAgJ25ic3AnLFxuICAnbm90JyxcbiAgJ250aWxkZScsXG4gICdvYWN1dGUnLFxuICAnb2NpcmMnLFxuICAnb2dyYXZlJyxcbiAgJ29yZGYnLFxuICAnb3JkbScsXG4gICdvc2xhc2gnLFxuICAnb3RpbGRlJyxcbiAgJ291bWwnLFxuICAncGFyYScsXG4gICdwbHVzbW4nLFxuICAncG91bmQnLFxuICAncXVvdCcsXG4gICdyYXF1bycsXG4gICdyZWcnLFxuICAnc2VjdCcsXG4gICdzaHknLFxuICAnc3VwMScsXG4gICdzdXAyJyxcbiAgJ3N1cDMnLFxuICAnc3psaWcnLFxuICAndGhvcm4nLFxuICAndGltZXMnLFxuICAndWFjdXRlJyxcbiAgJ3VjaXJjJyxcbiAgJ3VncmF2ZScsXG4gICd1bWwnLFxuICAndXVtbCcsXG4gICd5YWN1dGUnLFxuICAneWVuJyxcbiAgJ3l1bWwnXG5dXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/emoji-regex-xs@1.0.0/node_modules/emoji-regex-xs/index.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/emoji-regex-xs@1.0.0/node_modules/emoji-regex-xs/index.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst r = String.raw;\nconst seq = r`(?:\\p{Emoji}\\uFE0F\\u20E3?|\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation})`;\nconst sTags = r`\\u{E0061}-\\u{E007A}`;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => new RegExp(r`[\\u{1F1E6}-\\u{1F1FF}]{2}|\\u{1F3F4}[${sTags}]{2}[\\u{E0030}-\\u{E0039}${sTags}]{1,3}\\u{E007F}|${seq}(?:\\u200D${seq})*`, 'gu'));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9lbW9qaS1yZWdleC14c0AxLjAuMC9ub2RlX21vZHVsZXMvZW1vamktcmVnZXgteHMvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLG9CQUFvQixNQUFNLGlCQUFpQixvQkFBb0IsR0FBRyxlQUFlLEtBQUssbUJBQW1CO0FBQ3pHLG1CQUFtQixNQUFNLElBQUksTUFBTTtBQUNuQyxpRUFBZSx1QkFBdUIsTUFBTSxJQUFJLE1BQU0sRUFBRSxFQUFFLElBQUksTUFBTSxHQUFHLE1BQU0sRUFBRSxFQUFFLElBQUksTUFBTSxJQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9lbW9qaS1yZWdleC14c0AxLjAuMC9ub2RlX21vZHVsZXMvZW1vamktcmVnZXgteHMvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHIgPSBTdHJpbmcucmF3O1xuY29uc3Qgc2VxID0gcmAoPzpcXHB7RW1vaml9XFx1RkUwRlxcdTIwRTM/fFxccHtFbW9qaV9Nb2RpZmllcl9CYXNlfVxccHtFbW9qaV9Nb2RpZmllcn0/fFxccHtFbW9qaV9QcmVzZW50YXRpb259KWA7XG5jb25zdCBzVGFncyA9IHJgXFx1e0UwMDYxfS1cXHV7RTAwN0F9YDtcbmV4cG9ydCBkZWZhdWx0ICgpID0+IG5ldyBSZWdFeHAocmBbXFx1ezFGMUU2fS1cXHV7MUYxRkZ9XXsyfXxcXHV7MUYzRjR9WyR7c1RhZ3N9XXsyfVtcXHV7RTAwMzB9LVxcdXtFMDAzOX0ke3NUYWdzfV17MSwzfVxcdXtFMDA3Rn18JHtzZXF9KD86XFx1MjAwRCR7c2VxfSkqYCwgJ2d1Jyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/emoji-regex-xs@1.0.0/node_modules/emoji-regex-xs/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/comment.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/comment.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   comment: () => (/* binding */ comment)\n/* harmony export */ });\n/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stringify-entities */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js\");\n/**\n * @import {Comment, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>']\nconst commentEntitySubset = ['<', '>']\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        (0,stringify_entities__WEBPACK_IMPORTED_MODULE_0__.stringifyEntities)(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return (0,stringify_entities__WEBPACK_IMPORTED_MODULE_0__.stringifyEntities)(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL2hhbmRsZS9jb21tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QixZQUFZLE9BQU87QUFDbkI7O0FBRW9EOztBQUVwRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFFQUFpQjtBQUN6QjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLFdBQVcscUVBQWlCO0FBQzVCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc3QtdXRpbC10by1odG1sQDkuMC41L25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtdG8taHRtbC9saWIvaGFuZGxlL2NvbW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtDb21tZW50LCBQYXJlbnRzfSBmcm9tICdoYXN0J1xuICogQGltcG9ydCB7U3RhdGV9IGZyb20gJy4uL2luZGV4LmpzJ1xuICovXG5cbmltcG9ydCB7c3RyaW5naWZ5RW50aXRpZXN9IGZyb20gJ3N0cmluZ2lmeS1lbnRpdGllcydcblxuY29uc3QgaHRtbENvbW1lbnRSZWdleCA9IC9ePnxeLT58PCEtLXwtLT58LS0hPnw8IS0kL2dcblxuLy8gRGVjbGFyZSBhcnJheXMgYXMgdmFyaWFibGVzIHNvIGl0IGNhbiBiZSBjYWNoZWQgYnkgYHN0cmluZ2lmeUVudGl0aWVzYFxuY29uc3QgYm9ndXNDb21tZW50RW50aXR5U3Vic2V0ID0gWyc+J11cbmNvbnN0IGNvbW1lbnRFbnRpdHlTdWJzZXQgPSBbJzwnLCAnPiddXG5cbi8qKlxuICogU2VyaWFsaXplIGEgY29tbWVudC5cbiAqXG4gKiBAcGFyYW0ge0NvbW1lbnR9IG5vZGVcbiAqICAgTm9kZSB0byBoYW5kbGUuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gXzFcbiAqICAgSW5kZXggb2YgYG5vZGVgIGluIGBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCB1bmRlZmluZWR9IF8yXG4gKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTZXJpYWxpemVkIG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50KG5vZGUsIF8xLCBfMiwgc3RhdGUpIHtcbiAgLy8gU2VlOiA8aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjY29tbWVudHM+XG4gIHJldHVybiBzdGF0ZS5zZXR0aW5ncy5ib2d1c0NvbW1lbnRzXG4gICAgPyAnPD8nICtcbiAgICAgICAgc3RyaW5naWZ5RW50aXRpZXMoXG4gICAgICAgICAgbm9kZS52YWx1ZSxcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zZXR0aW5ncy5jaGFyYWN0ZXJSZWZlcmVuY2VzLCB7XG4gICAgICAgICAgICBzdWJzZXQ6IGJvZ3VzQ29tbWVudEVudGl0eVN1YnNldFxuICAgICAgICAgIH0pXG4gICAgICAgICkgK1xuICAgICAgICAnPidcbiAgICA6ICc8IS0tJyArIG5vZGUudmFsdWUucmVwbGFjZShodG1sQ29tbWVudFJlZ2V4LCBlbmNvZGUpICsgJy0tPidcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gICAqL1xuICBmdW5jdGlvbiBlbmNvZGUoJDApIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5RW50aXRpZXMoXG4gICAgICAkMCxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnNldHRpbmdzLmNoYXJhY3RlclJlZmVyZW5jZXMsIHtcbiAgICAgICAgc3Vic2V0OiBjb21tZW50RW50aXR5U3Vic2V0XG4gICAgICB9KVxuICAgIClcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/comment.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/doctype.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/doctype.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   doctype: () => (/* binding */ doctype)\n/* harmony export */ });\n/**\n * @import {Doctype, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL2hhbmRsZS9kb2N0eXBlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCLFlBQVksT0FBTztBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vaGFzdC11dGlsLXRvLWh0bWxAOS4wLjUvbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC10by1odG1sL2xpYi9oYW5kbGUvZG9jdHlwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0RvY3R5cGUsIFBhcmVudHN9IGZyb20gJ2hhc3QnXG4gKiBAaW1wb3J0IHtTdGF0ZX0gZnJvbSAnLi4vaW5kZXguanMnXG4gKi9cblxuLyoqXG4gKiBTZXJpYWxpemUgYSBkb2N0eXBlLlxuICpcbiAqIEBwYXJhbSB7RG9jdHlwZX0gXzFcbiAqICAgTm9kZSB0byBoYW5kbGUuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gXzJcbiAqICAgSW5kZXggb2YgYG5vZGVgIGluIGBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCB1bmRlZmluZWR9IF8zXG4gKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTZXJpYWxpemVkIG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb2N0eXBlKF8xLCBfMiwgXzMsIHN0YXRlKSB7XG4gIHJldHVybiAoXG4gICAgJzwhJyArXG4gICAgKHN0YXRlLnNldHRpbmdzLnVwcGVyRG9jdHlwZSA/ICdET0NUWVBFJyA6ICdkb2N0eXBlJykgK1xuICAgIChzdGF0ZS5zZXR0aW5ncy50aWdodERvY3R5cGUgPyAnJyA6ICcgJykgK1xuICAgICdodG1sPidcbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/doctype.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/element.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/element.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   element: () => (/* binding */ element)\n/* harmony export */ });\n/* harmony import */ var ccount__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ccount */ \"(app-pages-browser)/./node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js\");\n/* harmony import */ var comma_separated_tokens__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! comma-separated-tokens */ \"(app-pages-browser)/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! property-information */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! property-information */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js\");\n/* harmony import */ var space_separated_tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! space-separated-tokens */ \"(app-pages-browser)/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js\");\n/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stringify-entities */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js\");\n/* harmony import */ var _omission_closing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../omission/closing.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js\");\n/* harmony import */ var _omission_opening_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../omission/opening.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/opening.js\");\n/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\n\n\n\n\n\n\n\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = property_information__WEBPACK_IMPORTED_MODULE_0__.svg\n  }\n\n  const attributes = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false\n\n  if (attributes || !omit || !(0,_omission_opening_js__WEBPACK_IMPORTED_MODULE_1__.opening)(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !(0,_omission_closing_js__WEBPACK_IMPORTED_MODULE_2__.closing)(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = (0,property_information__WEBPACK_IMPORTED_MODULE_3__.find)(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    (info.boolean || info.overloadedBoolean) &&\n    (typeof value !== 'string' || value === info.attribute || value === '')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = (0,stringify_entities__WEBPACK_IMPORTED_MODULE_4__.stringifyEntities)(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? comma_separated_tokens__WEBPACK_IMPORTED_MODULE_5__.stringify : space_separated_tokens__WEBPACK_IMPORTED_MODULE_6__.stringify)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = (0,stringify_entities__WEBPACK_IMPORTED_MODULE_4__.stringifyEntities)(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      (0,ccount__WEBPACK_IMPORTED_MODULE_7__.ccount)(value, quote) > (0,ccount__WEBPACK_IMPORTED_MODULE_7__.ccount)(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      (0,stringify_entities__WEBPACK_IMPORTED_MODULE_4__.stringifyEntities)(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/element.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/index.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handle: () => (/* binding */ handle)\n/* harmony export */ });\n/* harmony import */ var zwitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zwitch */ \"(app-pages-browser)/./node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js\");\n/* harmony import */ var _comment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./comment.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/comment.js\");\n/* harmony import */ var _doctype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./doctype.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/doctype.js\");\n/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./element.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/element.js\");\n/* harmony import */ var _raw_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./raw.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/raw.js\");\n/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./root.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/root.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js\");\n/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n\n\n\n\n\n\n\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nconst handle = (0,zwitch__WEBPACK_IMPORTED_MODULE_0__.zwitch)('type', {\n  invalid,\n  unknown,\n  handlers: {comment: _comment_js__WEBPACK_IMPORTED_MODULE_1__.comment, doctype: _doctype_js__WEBPACK_IMPORTED_MODULE_2__.doctype, element: _element_js__WEBPACK_IMPORTED_MODULE_3__.element, raw: _raw_js__WEBPACK_IMPORTED_MODULE_4__.raw, root: _root_js__WEBPACK_IMPORTED_MODULE_5__.root, text: _text_js__WEBPACK_IMPORTED_MODULE_6__.text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_)\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL2hhbmRsZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUIsWUFBWSxPQUFPO0FBQ25COztBQUU2QjtBQUNPO0FBQ0E7QUFDQTtBQUNSO0FBQ0U7QUFDQTs7QUFFOUI7QUFDQSxVQUFVO0FBQ1Y7QUFDTyxlQUFlLDhDQUFNO0FBQzVCO0FBQ0E7QUFDQSxhQUFhLE9BQU8sMkRBQVMsMkRBQVMsdURBQUssZ0RBQU0sa0RBQU07QUFDdkQsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsT0FBTztBQUNqQztBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vaGFzdC11dGlsLXRvLWh0bWxAOS4wLjUvbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC10by1odG1sL2xpYi9oYW5kbGUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtOb2RlcywgUGFyZW50c30gZnJvbSAnaGFzdCdcbiAqIEBpbXBvcnQge1N0YXRlfSBmcm9tICcuLi9pbmRleC5qcydcbiAqL1xuXG5pbXBvcnQge3p3aXRjaH0gZnJvbSAnendpdGNoJ1xuaW1wb3J0IHtjb21tZW50fSBmcm9tICcuL2NvbW1lbnQuanMnXG5pbXBvcnQge2RvY3R5cGV9IGZyb20gJy4vZG9jdHlwZS5qcydcbmltcG9ydCB7ZWxlbWVudH0gZnJvbSAnLi9lbGVtZW50LmpzJ1xuaW1wb3J0IHtyYXd9IGZyb20gJy4vcmF3LmpzJ1xuaW1wb3J0IHtyb290fSBmcm9tICcuL3Jvb3QuanMnXG5pbXBvcnQge3RleHR9IGZyb20gJy4vdGV4dC5qcydcblxuLyoqXG4gKiBAdHlwZSB7KG5vZGU6IE5vZGVzLCBpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkLCBwYXJlbnQ6IFBhcmVudHMgfCB1bmRlZmluZWQsIHN0YXRlOiBTdGF0ZSkgPT4gc3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlID0gendpdGNoKCd0eXBlJywge1xuICBpbnZhbGlkLFxuICB1bmtub3duLFxuICBoYW5kbGVyczoge2NvbW1lbnQsIGRvY3R5cGUsIGVsZW1lbnQsIHJhdywgcm9vdCwgdGV4dH1cbn0pXG5cbi8qKlxuICogRmFpbCB3aGVuIGEgbm9uLW5vZGUgaXMgZm91bmQgaW4gdGhlIHRyZWUuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSBub2RlXG4gKiAgIFVua25vd24gdmFsdWUuXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKiAgIE5ldmVyLlxuICovXG5mdW5jdGlvbiBpbnZhbGlkKG5vZGUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBub2RlLCBub3QgYCcgKyBub2RlICsgJ2AnKVxufVxuXG4vKipcbiAqIEZhaWwgd2hlbiBhIG5vZGUgd2l0aCBhbiB1bmtub3duIHR5cGUgaXMgZm91bmQgaW4gdGhlIHRyZWUuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSBub2RlX1xuICogIFVua25vd24gbm9kZS5cbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqICAgTmV2ZXIuXG4gKi9cbmZ1bmN0aW9uIHVua25vd24obm9kZV8pIHtcbiAgLy8gYHR5cGVgIGlzIGd1YXJhbnRlZWQgYnkgcnVudGltZSBKUy5cbiAgY29uc3Qgbm9kZSA9IC8qKiBAdHlwZSB7Tm9kZXN9ICovIChub2RlXylcbiAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY29tcGlsZSB1bmtub3duIG5vZGUgYCcgKyBub2RlLnR5cGUgKyAnYCcpXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/raw.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/raw.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raw: () => (/* binding */ raw)\n/* harmony export */ });\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js\");\n/**\n * @import {Parents} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\n\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : (0,_text_js__WEBPACK_IMPORTED_MODULE_0__.text)(node, index, parent, state)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL2hhbmRsZS9yYXcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLFlBQVksU0FBUztBQUNyQixZQUFZLEtBQUs7QUFDakIsWUFBWSxPQUFPO0FBQ25COztBQUU4Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsTUFBTSw4Q0FBSTtBQUNWIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vaGFzdC11dGlsLXRvLWh0bWxAOS4wLjUvbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC10by1odG1sL2xpYi9oYW5kbGUvcmF3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7UGFyZW50c30gZnJvbSAnaGFzdCdcbiAqIEBpbXBvcnQge1Jhd30gZnJvbSAnbWRhc3QtdXRpbC10by1oYXN0J1xuICogQGltcG9ydCB7U3RhdGV9IGZyb20gJy4uL2luZGV4LmpzJ1xuICovXG5cbmltcG9ydCB7dGV4dH0gZnJvbSAnLi90ZXh0LmpzJ1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIHJhdyBub2RlLlxuICpcbiAqIEBwYXJhbSB7UmF3fSBub2RlXG4gKiAgIE5vZGUgdG8gaGFuZGxlLlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGBub2RlYCBpbiBgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGBub2RlYC5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZCBhYm91dCB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNlcmlhbGl6ZWQgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhdyhub2RlLCBpbmRleCwgcGFyZW50LCBzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuc2V0dGluZ3MuYWxsb3dEYW5nZXJvdXNIdG1sXG4gICAgPyBub2RlLnZhbHVlXG4gICAgOiB0ZXh0KG5vZGUsIGluZGV4LCBwYXJlbnQsIHN0YXRlKVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/raw.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/root.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/root.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   root: () => (/* binding */ root)\n/* harmony export */ });\n/**\n * @import {Parents, Root} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction root(node, _1, _2, state) {\n  return state.all(node)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL2hhbmRsZS9yb290LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLFlBQVksZUFBZTtBQUMzQixZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vaGFzdC11dGlsLXRvLWh0bWxAOS4wLjUvbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC10by1odG1sL2xpYi9oYW5kbGUvcm9vdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1BhcmVudHMsIFJvb3R9IGZyb20gJ2hhc3QnXG4gKiBAaW1wb3J0IHtTdGF0ZX0gZnJvbSAnLi4vaW5kZXguanMnXG4gKi9cblxuLyoqXG4gKiBTZXJpYWxpemUgYSByb290LlxuICpcbiAqIEBwYXJhbSB7Um9vdH0gbm9kZVxuICogICBOb2RlIHRvIGhhbmRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBfMVxuICogICBJbmRleCBvZiBgbm9kZWAgaW4gYHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gXzJcbiAqICAgUGFyZW50IG9mIGBub2RlYC5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZCBhYm91dCB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNlcmlhbGl6ZWQgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvb3Qobm9kZSwgXzEsIF8yLCBzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuYWxsKG5vZGUpXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/root.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   text: () => (/* binding */ text)\n/* harmony export */ });\n/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stringify-entities */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js\");\n/**\n * @import {Parents, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\n\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&']\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : (0,stringify_entities__WEBPACK_IMPORTED_MODULE_0__.stringifyEntities)(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL2hhbmRsZS90ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxZQUFZLGVBQWU7QUFDM0IsWUFBWSxLQUFLO0FBQ2pCLFlBQVksT0FBTztBQUNuQjs7QUFFb0Q7O0FBRXBEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxRUFBaUI7QUFDdkI7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc3QtdXRpbC10by1odG1sQDkuMC41L25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtdG8taHRtbC9saWIvaGFuZGxlL3RleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtQYXJlbnRzLCBUZXh0fSBmcm9tICdoYXN0J1xuICogQGltcG9ydCB7UmF3fSBmcm9tICdtZGFzdC11dGlsLXRvLWhhc3QnXG4gKiBAaW1wb3J0IHtTdGF0ZX0gZnJvbSAnLi4vaW5kZXguanMnXG4gKi9cblxuaW1wb3J0IHtzdHJpbmdpZnlFbnRpdGllc30gZnJvbSAnc3RyaW5naWZ5LWVudGl0aWVzJ1xuXG4vLyBEZWNsYXJlIGFycmF5IGFzIHZhcmlhYmxlIHNvIGl0IGNhbiBiZSBjYWNoZWQgYnkgYHN0cmluZ2lmeUVudGl0aWVzYFxuY29uc3QgdGV4dEVudGl0eVN1YnNldCA9IFsnPCcsICcmJ11cblxuLyoqXG4gKiBTZXJpYWxpemUgYSB0ZXh0IG5vZGUuXG4gKlxuICogQHBhcmFtIHtSYXcgfCBUZXh0fSBub2RlXG4gKiAgIE5vZGUgdG8gaGFuZGxlLlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IF9cbiAqICAgSW5kZXggb2YgYG5vZGVgIGluIGBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dChub2RlLCBfLCBwYXJlbnQsIHN0YXRlKSB7XG4gIC8vIENoZWNrIGlmIGNvbnRlbnQgb2YgYG5vZGVgIHNob3VsZCBiZSBlc2NhcGVkLlxuICByZXR1cm4gcGFyZW50ICYmXG4gICAgcGFyZW50LnR5cGUgPT09ICdlbGVtZW50JyAmJlxuICAgIChwYXJlbnQudGFnTmFtZSA9PT0gJ3NjcmlwdCcgfHwgcGFyZW50LnRhZ05hbWUgPT09ICdzdHlsZScpXG4gICAgPyBub2RlLnZhbHVlXG4gICAgOiBzdHJpbmdpZnlFbnRpdGllcyhcbiAgICAgICAgbm9kZS52YWx1ZSxcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc2V0dGluZ3MuY2hhcmFjdGVyUmVmZXJlbmNlcywge1xuICAgICAgICAgIHN1YnNldDogdGV4dEVudGl0eVN1YnNldFxuICAgICAgICB9KVxuICAgICAgKVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   toHtml: () => (/* binding */ toHtml)\n/* harmony export */ });\n/* harmony import */ var html_void_elements__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! html-void-elements */ \"(app-pages-browser)/./node_modules/.pnpm/html-void-elements@3.0.0/node_modules/html-void-elements/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! property-information */ \"(app-pages-browser)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js\");\n/* harmony import */ var _handle_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./handle/index.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/index.js\");\n/**\n * @import {Nodes, Parents, RootContent} from 'hast'\n * @import {Schema} from 'property-information'\n * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'\n */\n\n/**\n * @typedef {Omit<StringifyEntitiesOptions, 'attribute' | 'escapeOnly' | 'subset'>} CharacterReferences\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [allowDangerousCharacters=false]\n *   Do not encode some characters which cause XSS vulnerabilities in older\n *   browsers (default: `false`).\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Allow `raw` nodes and insert them as raw HTML (default: `false`).\n *\n *   When `false`, `Raw` nodes are encoded.\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowParseErrors=false]\n *   Do not encode characters which cause parse errors (even though they work),\n *   to save bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [bogusComments=false]\n *   Use “bogus comments” instead of comments to save byes: `<?charlie>`\n *   instead of `<!--charlie-->` (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {CharacterReferences | null | undefined} [characterReferences]\n *   Configure how to serialize character references (optional).\n * @property {boolean | null | undefined} [closeEmptyElements=false]\n *   Close SVG elements without any content with slash (`/`) on the opening tag\n *   instead of an end tag: `<circle />` instead of `<circle></circle>`\n *   (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the HTML space.\n * @property {boolean | null | undefined} [closeSelfClosing=false]\n *   Close self-closing nodes with an extra slash (`/`): `<img />` instead of\n *   `<img>` (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [collapseEmptyAttributes=false]\n *   Collapse empty attributes: get `class` instead of `class=\"\"` (default:\n *   `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: boolean attributes (such as `hidden`) are always collapsed.\n * @property {boolean | null | undefined} [omitOptionalTags=false]\n *   Omit optional opening and closing tags (default: `false`).\n *\n *   For example, in `<ol><li>one</li><li>two</li></ol>`, both `</li>` closing\n *   tags can be omitted.\n *   The first because it’s followed by another `li`, the last because it’s\n *   followed by nothing.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [preferUnquoted=false]\n *   Leave attributes unquoted if that results in less bytes (default: `false`).\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {Quote | null | undefined} [quote='\"']\n *   Preferred quote to use (default: `'\"'`).\n * @property {Space | null | undefined} [space='html']\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it (default: `'html'`).\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use [`xast`][xast] if you need to support SVG as XML.\n * @property {boolean | null | undefined} [tightAttributes=false]\n *   Join attributes together, without whitespace, if possible: get\n *   `class=\"a b\"title=\"c d\"` instead of `class=\"a b\" title=\"c d\"` to save\n *   bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightCommaSeparatedLists=false]\n *   Join known comma-separated attribute values with just a comma (`,`),\n *   instead of padding them on the right as well (`,␠`, where `␠` represents a\n *   space) (default: `false`).\n * @property {boolean | null | undefined} [tightDoctype=false]\n *   Drop unneeded spaces in doctypes: `<!doctypehtml>` instead of\n *   `<!doctype html>` to save bytes (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n *\n *   > 👉 **Note**: only used if `closeSelfClosing: true` or\n *   > `closeEmptyElements: true`.\n * @property {boolean | null | undefined} [upperDoctype=false]\n *   Use a `<!DOCTYPE…` instead of `<!doctype…` (default: `false`).\n *\n *   Useless except for XHTML.\n * @property {ReadonlyArray<string> | null | undefined} [voids]\n *   Tag names of elements to serialize without closing tag (default: `html-void-elements`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: It’s highly unlikely that you want to pass this, because\n *   > hast is not for XML, and HTML will not add more void elements.\n *\n * @typedef {'\"' | \"'\"} Quote\n *   HTML quotes for attribute values.\n *\n * @typedef {Omit<Required<{[key in keyof Options]: Exclude<Options[key], null | undefined>}>, 'space' | 'quote'>} Settings\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Parents | undefined) => string} all\n *   Serialize the children of a parent node.\n * @property {Quote} alternative\n *   Alternative quote.\n * @property {(node: Nodes, index: number | undefined, parent: Parents | undefined) => string} one\n *   Serialize one node.\n * @property {Quote} quote\n *   Preferred quote.\n * @property {Schema} schema\n *   Current schema.\n * @property {Settings} settings\n *   User configuration.\n */\n\n\n\n\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {}\n\n/** @type {Array<never>} */\nconst emptyChildren = []\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nfunction toHtml(tree, options) {\n  const options_ = options || emptyOptions\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || html_void_elements__WEBPACK_IMPORTED_MODULE_0__.htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? property_information__WEBPACK_IMPORTED_MODULE_1__.svg : property_information__WEBPACK_IMPORTED_MODULE_1__.html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return (0,_handle_index_js__WEBPACK_IMPORTED_MODULE_2__.handle)(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nfunction all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || emptyChildren\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closing: () => (/* binding */ closing)\n/* harmony export */ });\n/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-whitespace */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js\");\n/* harmony import */ var _util_siblings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/siblings.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js\");\n/* harmony import */ var _omission_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./omission.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js\");\n/**\n * @import {Element, Parents} from 'hast'\n */\n\n\n\n\n\nconst closing = (0,_omission_js__WEBPACK_IMPORTED_MODULE_0__.omission)({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && (0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__.whitespace)(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !(0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL29taXNzaW9uL2Nsb3NpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7O0FBRStDO0FBQ0E7QUFDVDs7QUFFL0IsZ0JBQWdCLHNEQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdFQUFVO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQVk7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrREFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQVk7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrREFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFVBQVUsK0RBQVk7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc3QtdXRpbC10by1odG1sQDkuMC41L25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtdG8taHRtbC9saWIvb21pc3Npb24vY2xvc2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0VsZW1lbnQsIFBhcmVudHN9IGZyb20gJ2hhc3QnXG4gKi9cblxuaW1wb3J0IHt3aGl0ZXNwYWNlfSBmcm9tICdoYXN0LXV0aWwtd2hpdGVzcGFjZSdcbmltcG9ydCB7c2libGluZ0FmdGVyfSBmcm9tICcuL3V0aWwvc2libGluZ3MuanMnXG5pbXBvcnQge29taXNzaW9ufSBmcm9tICcuL29taXNzaW9uLmpzJ1xuXG5leHBvcnQgY29uc3QgY2xvc2luZyA9IG9taXNzaW9uKHtcbiAgYm9keSxcbiAgY2FwdGlvbjogaGVhZE9yQ29sZ3JvdXBPckNhcHRpb24sXG4gIGNvbGdyb3VwOiBoZWFkT3JDb2xncm91cE9yQ2FwdGlvbixcbiAgZGQsXG4gIGR0LFxuICBoZWFkOiBoZWFkT3JDb2xncm91cE9yQ2FwdGlvbixcbiAgaHRtbCxcbiAgbGksXG4gIG9wdGdyb3VwLFxuICBvcHRpb24sXG4gIHAsXG4gIHJwOiBydWJ5RWxlbWVudCxcbiAgcnQ6IHJ1YnlFbGVtZW50LFxuICB0Ym9keSxcbiAgdGQ6IGNlbGxzLFxuICB0Zm9vdCxcbiAgdGg6IGNlbGxzLFxuICB0aGVhZCxcbiAgdHJcbn0pXG5cbi8qKlxuICogTWFjcm8gZm9yIGA8L2hlYWQ+YCwgYDwvY29sZ3JvdXA+YCwgYW5kIGA8L2NhcHRpb24+YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IF9cbiAqICAgRWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICogICBJbmRleCBvZiBlbGVtZW50IGluIHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIGNsb3NpbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiBoZWFkT3JDb2xncm91cE9yQ2FwdGlvbihfLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG5leHQgPSBzaWJsaW5nQWZ0ZXIocGFyZW50LCBpbmRleCwgdHJ1ZSlcbiAgcmV0dXJuIChcbiAgICAhbmV4dCB8fFxuICAgIChuZXh0LnR5cGUgIT09ICdjb21tZW50JyAmJlxuICAgICAgIShuZXh0LnR5cGUgPT09ICd0ZXh0JyAmJiB3aGl0ZXNwYWNlKG5leHQudmFsdWUuY2hhckF0KDApKSkpXG4gIClcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDwvaHRtbD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIGh0bWwoXywgaW5kZXgsIHBhcmVudCkge1xuICBjb25zdCBuZXh0ID0gc2libGluZ0FmdGVyKHBhcmVudCwgaW5kZXgpXG4gIHJldHVybiAhbmV4dCB8fCBuZXh0LnR5cGUgIT09ICdjb21tZW50J1xufVxuXG4vKipcbiAqIFdoZXRoZXIgdG8gb21pdCBgPC9ib2R5PmAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBfXG4gKiAgIEVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gaW5kZXhcbiAqICAgSW5kZXggb2YgZWxlbWVudCBpbiBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIHRoZSBjbG9zaW5nIHRhZyBjYW4gYmUgb21pdHRlZC5cbiAqL1xuZnVuY3Rpb24gYm9keShfLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG5leHQgPSBzaWJsaW5nQWZ0ZXIocGFyZW50LCBpbmRleClcbiAgcmV0dXJuICFuZXh0IHx8IG5leHQudHlwZSAhPT0gJ2NvbW1lbnQnXG59XG5cbi8qKlxuICogV2hldGhlciB0byBvbWl0IGA8L3A+YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IF9cbiAqICAgRWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICogICBJbmRleCBvZiBlbGVtZW50IGluIHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIGNsb3NpbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiBwKF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgbmV4dCA9IHNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxuICByZXR1cm4gbmV4dFxuICAgID8gbmV4dC50eXBlID09PSAnZWxlbWVudCcgJiZcbiAgICAgICAgKG5leHQudGFnTmFtZSA9PT0gJ2FkZHJlc3MnIHx8XG4gICAgICAgICAgbmV4dC50YWdOYW1lID09PSAnYXJ0aWNsZScgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdhc2lkZScgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdibG9ja3F1b3RlJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2RldGFpbHMnIHx8XG4gICAgICAgICAgbmV4dC50YWdOYW1lID09PSAnZGl2JyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2RsJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2ZpZWxkc2V0JyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2ZpZ2NhcHRpb24nIHx8XG4gICAgICAgICAgbmV4dC50YWdOYW1lID09PSAnZmlndXJlJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2Zvb3RlcicgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdmb3JtJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2gxJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2gyJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2gzJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2g0JyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2g1JyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2g2JyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ2hlYWRlcicgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdoZ3JvdXAnIHx8XG4gICAgICAgICAgbmV4dC50YWdOYW1lID09PSAnaHInIHx8XG4gICAgICAgICAgbmV4dC50YWdOYW1lID09PSAnbWFpbicgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdtZW51JyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ25hdicgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdvbCcgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdwJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ3ByZScgfHxcbiAgICAgICAgICBuZXh0LnRhZ05hbWUgPT09ICdzZWN0aW9uJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ3RhYmxlJyB8fFxuICAgICAgICAgIG5leHQudGFnTmFtZSA9PT0gJ3VsJylcbiAgICA6ICFwYXJlbnQgfHxcbiAgICAgICAgLy8gQ29uZnVzaW5nIHBhcmVudC5cbiAgICAgICAgIShcbiAgICAgICAgICBwYXJlbnQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAgICAgKHBhcmVudC50YWdOYW1lID09PSAnYScgfHxcbiAgICAgICAgICAgIHBhcmVudC50YWdOYW1lID09PSAnYXVkaW8nIHx8XG4gICAgICAgICAgICBwYXJlbnQudGFnTmFtZSA9PT0gJ2RlbCcgfHxcbiAgICAgICAgICAgIHBhcmVudC50YWdOYW1lID09PSAnaW5zJyB8fFxuICAgICAgICAgICAgcGFyZW50LnRhZ05hbWUgPT09ICdtYXAnIHx8XG4gICAgICAgICAgICBwYXJlbnQudGFnTmFtZSA9PT0gJ25vc2NyaXB0JyB8fFxuICAgICAgICAgICAgcGFyZW50LnRhZ05hbWUgPT09ICd2aWRlbycpXG4gICAgICAgIClcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDwvbGk+YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IF9cbiAqICAgRWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICogICBJbmRleCBvZiBlbGVtZW50IGluIHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIGNsb3NpbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiBsaShfLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG5leHQgPSBzaWJsaW5nQWZ0ZXIocGFyZW50LCBpbmRleClcbiAgcmV0dXJuICFuZXh0IHx8IChuZXh0LnR5cGUgPT09ICdlbGVtZW50JyAmJiBuZXh0LnRhZ05hbWUgPT09ICdsaScpXG59XG5cbi8qKlxuICogV2hldGhlciB0byBvbWl0IGA8L2R0PmAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBfXG4gKiAgIEVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gaW5kZXhcbiAqICAgSW5kZXggb2YgZWxlbWVudCBpbiBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIHRoZSBjbG9zaW5nIHRhZyBjYW4gYmUgb21pdHRlZC5cbiAqL1xuZnVuY3Rpb24gZHQoXywgaW5kZXgsIHBhcmVudCkge1xuICBjb25zdCBuZXh0ID0gc2libGluZ0FmdGVyKHBhcmVudCwgaW5kZXgpXG4gIHJldHVybiBCb29sZWFuKFxuICAgIG5leHQgJiZcbiAgICAgIG5leHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAobmV4dC50YWdOYW1lID09PSAnZHQnIHx8IG5leHQudGFnTmFtZSA9PT0gJ2RkJylcbiAgKVxufVxuXG4vKipcbiAqIFdoZXRoZXIgdG8gb21pdCBgPC9kZD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIGRkKF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgbmV4dCA9IHNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxuICByZXR1cm4gKFxuICAgICFuZXh0IHx8XG4gICAgKG5leHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAobmV4dC50YWdOYW1lID09PSAnZHQnIHx8IG5leHQudGFnTmFtZSA9PT0gJ2RkJykpXG4gIClcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDwvcnQ+YCBvciBgPC9ycD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIHJ1YnlFbGVtZW50KF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgbmV4dCA9IHNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxuICByZXR1cm4gKFxuICAgICFuZXh0IHx8XG4gICAgKG5leHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAobmV4dC50YWdOYW1lID09PSAncnAnIHx8IG5leHQudGFnTmFtZSA9PT0gJ3J0JykpXG4gIClcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDwvb3B0Z3JvdXA+YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IF9cbiAqICAgRWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICogICBJbmRleCBvZiBlbGVtZW50IGluIHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIGNsb3NpbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiBvcHRncm91cChfLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG5leHQgPSBzaWJsaW5nQWZ0ZXIocGFyZW50LCBpbmRleClcbiAgcmV0dXJuICFuZXh0IHx8IChuZXh0LnR5cGUgPT09ICdlbGVtZW50JyAmJiBuZXh0LnRhZ05hbWUgPT09ICdvcHRncm91cCcpXG59XG5cbi8qKlxuICogV2hldGhlciB0byBvbWl0IGA8L29wdGlvbj5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIG9wdGlvbihfLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG5leHQgPSBzaWJsaW5nQWZ0ZXIocGFyZW50LCBpbmRleClcbiAgcmV0dXJuIChcbiAgICAhbmV4dCB8fFxuICAgIChuZXh0LnR5cGUgPT09ICdlbGVtZW50JyAmJlxuICAgICAgKG5leHQudGFnTmFtZSA9PT0gJ29wdGlvbicgfHwgbmV4dC50YWdOYW1lID09PSAnb3B0Z3JvdXAnKSlcbiAgKVxufVxuXG4vKipcbiAqIFdoZXRoZXIgdG8gb21pdCBgPC90aGVhZD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRoZWFkKF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgbmV4dCA9IHNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxuICByZXR1cm4gQm9vbGVhbihcbiAgICBuZXh0ICYmXG4gICAgICBuZXh0LnR5cGUgPT09ICdlbGVtZW50JyAmJlxuICAgICAgKG5leHQudGFnTmFtZSA9PT0gJ3Rib2R5JyB8fCBuZXh0LnRhZ05hbWUgPT09ICd0Zm9vdCcpXG4gIClcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDwvdGJvZHk+YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IF9cbiAqICAgRWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICogICBJbmRleCBvZiBlbGVtZW50IGluIHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIGNsb3NpbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiB0Ym9keShfLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG5leHQgPSBzaWJsaW5nQWZ0ZXIocGFyZW50LCBpbmRleClcbiAgcmV0dXJuIChcbiAgICAhbmV4dCB8fFxuICAgIChuZXh0LnR5cGUgPT09ICdlbGVtZW50JyAmJlxuICAgICAgKG5leHQudGFnTmFtZSA9PT0gJ3Rib2R5JyB8fCBuZXh0LnRhZ05hbWUgPT09ICd0Zm9vdCcpKVxuICApXG59XG5cbi8qKlxuICogV2hldGhlciB0byBvbWl0IGA8L3Rmb290PmAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBfXG4gKiAgIEVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gaW5kZXhcbiAqICAgSW5kZXggb2YgZWxlbWVudCBpbiBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIHRoZSBjbG9zaW5nIHRhZyBjYW4gYmUgb21pdHRlZC5cbiAqL1xuZnVuY3Rpb24gdGZvb3QoXywgaW5kZXgsIHBhcmVudCkge1xuICByZXR1cm4gIXNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxufVxuXG4vKipcbiAqIFdoZXRoZXIgdG8gb21pdCBgPC90cj5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRyKF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgbmV4dCA9IHNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxuICByZXR1cm4gIW5leHQgfHwgKG5leHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmIG5leHQudGFnTmFtZSA9PT0gJ3RyJylcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDwvdGQ+YCBvciBgPC90aD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gX1xuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgY2xvc2luZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNlbGxzKF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgbmV4dCA9IHNpYmxpbmdBZnRlcihwYXJlbnQsIGluZGV4KVxuICByZXR1cm4gKFxuICAgICFuZXh0IHx8XG4gICAgKG5leHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAobmV4dC50YWdOYW1lID09PSAndGQnIHx8IG5leHQudGFnTmFtZSA9PT0gJ3RoJykpXG4gIClcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   omission: () => (/* binding */ omission)\n/* harmony export */ });\n/**\n * @import {Element, Parents} from 'hast'\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nfunction omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL29taXNzaW9uL29taXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBLGNBQWM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc3QtdXRpbC10by1odG1sQDkuMC41L25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtdG8taHRtbC9saWIvb21pc3Npb24vb21pc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtFbGVtZW50LCBQYXJlbnRzfSBmcm9tICdoYXN0J1xuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE9taXRIYW5kbGVcbiAqICAgQ2hlY2sgaWYgYSB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqICAgRWxlbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICogICBJbmRleCBvZiBlbGVtZW50IGluIHBhcmVudC5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdG8gb21pdCBhIHRhZy5cbiAqXG4gKi9cblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBGYWN0b3J5IHRvIGNoZWNrIGlmIGEgZ2l2ZW4gbm9kZSBjYW4gaGF2ZSBhIHRhZyBvbWl0dGVkLlxuICpcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgT21pdEhhbmRsZT59IGhhbmRsZXJzXG4gKiAgIE9taXNzaW9uIGhhbmRsZXJzLCB3aGVyZSBlYWNoIGtleSBpcyBhIHRhZyBuYW1lLCBhbmQgZWFjaCB2YWx1ZSBpcyB0aGVcbiAqICAgY29ycmVzcG9uZGluZyBoYW5kbGVyLlxuICogQHJldHVybnMge09taXRIYW5kbGV9XG4gKiAgIFdoZXRoZXIgdG8gb21pdCBhIHRhZyBvZiBhbiBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb21pc3Npb24oaGFuZGxlcnMpIHtcbiAgcmV0dXJuIG9taXRcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBnaXZlbiBub2RlIGNhbiBoYXZlIGEgdGFnIG9taXR0ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtPbWl0SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb21pdChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG93bi5jYWxsKGhhbmRsZXJzLCBub2RlLnRhZ05hbWUpICYmXG4gICAgICBoYW5kbGVyc1tub2RlLnRhZ05hbWVdKG5vZGUsIGluZGV4LCBwYXJlbnQpXG4gICAgKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/opening.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/opening.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   opening: () => (/* binding */ opening)\n/* harmony export */ });\n/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-whitespace */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js\");\n/* harmony import */ var _util_siblings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/siblings.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js\");\n/* harmony import */ var _closing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./closing.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js\");\n/* harmony import */ var _omission_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./omission.js */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js\");\n/**\n * @import {Element, Parents} from 'hast'\n */\n\n\n\n\n\n\nconst opening = (0,_omission_js__WEBPACK_IMPORTED_MODULE_0__.omission)({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  /** @type {Set<string>} */\n  const seen = new Set()\n\n  // Whether `srcdoc` or not,\n  // make sure the content model at least doesn’t have too many `base`s/`title`s.\n  for (const child of node.children) {\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'base' || child.tagName === 'title')\n    ) {\n      if (seen.has(child.tagName)) return false\n      seen.add(child.tagName)\n    }\n  }\n\n  // “May be omitted if the element is empty,\n  // or if the first thing inside the head element is an element.”\n  const child = node.children[0]\n  return !child || child.type === 'element'\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && (0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__.whitespace)(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingBefore)(parent, index)\n  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    (0,_closing_js__WEBPACK_IMPORTED_MODULE_3__.closing)(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingBefore)(parent, index)\n  const head = (0,_util_siblings_js__WEBPACK_IMPORTED_MODULE_1__.siblingAfter)(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    (0,_closing_js__WEBPACK_IMPORTED_MODULE_3__.closing)(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL29taXNzaW9uL29wZW5pbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCOztBQUUrQztBQUNlO0FBQzFCO0FBQ0U7O0FBRS9CLGdCQUFnQixzREFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrREFBWTtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFZOztBQUUzQjtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0VBQVU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0VBQWE7QUFDaEMsZUFBZSwrREFBWTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxvREFBTztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdFQUFhO0FBQ2hDLGVBQWUsK0RBQVk7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksb0RBQU87QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc3QtdXRpbC10by1odG1sQDkuMC41L25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtdG8taHRtbC9saWIvb21pc3Npb24vb3BlbmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0VsZW1lbnQsIFBhcmVudHN9IGZyb20gJ2hhc3QnXG4gKi9cblxuaW1wb3J0IHt3aGl0ZXNwYWNlfSBmcm9tICdoYXN0LXV0aWwtd2hpdGVzcGFjZSdcbmltcG9ydCB7c2libGluZ0FmdGVyLCBzaWJsaW5nQmVmb3JlfSBmcm9tICcuL3V0aWwvc2libGluZ3MuanMnXG5pbXBvcnQge2Nsb3Npbmd9IGZyb20gJy4vY2xvc2luZy5qcydcbmltcG9ydCB7b21pc3Npb259IGZyb20gJy4vb21pc3Npb24uanMnXG5cbmV4cG9ydCBjb25zdCBvcGVuaW5nID0gb21pc3Npb24oe1xuICBib2R5LFxuICBjb2xncm91cCxcbiAgaGVhZCxcbiAgaHRtbCxcbiAgdGJvZHlcbn0pXG5cbi8qKlxuICogV2hldGhlciB0byBvbWl0IGA8aHRtbD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogICBFbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIG9wZW5pbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiBodG1sKG5vZGUpIHtcbiAgY29uc3QgaGVhZCA9IHNpYmxpbmdBZnRlcihub2RlLCAtMSlcbiAgcmV0dXJuICFoZWFkIHx8IGhlYWQudHlwZSAhPT0gJ2NvbW1lbnQnXG59XG5cbi8qKlxuICogV2hldGhlciB0byBvbWl0IGA8aGVhZD5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogICBFbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhlIG9wZW5pbmcgdGFnIGNhbiBiZSBvbWl0dGVkLlxuICovXG5mdW5jdGlvbiBoZWFkKG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtTZXQ8c3RyaW5nPn0gKi9cbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKVxuXG4gIC8vIFdoZXRoZXIgYHNyY2RvY2Agb3Igbm90LFxuICAvLyBtYWtlIHN1cmUgdGhlIGNvbnRlbnQgbW9kZWwgYXQgbGVhc3QgZG9lc27igJl0IGhhdmUgdG9vIG1hbnkgYGJhc2Vgcy9gdGl0bGVgcy5cbiAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgaWYgKFxuICAgICAgY2hpbGQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAoY2hpbGQudGFnTmFtZSA9PT0gJ2Jhc2UnIHx8IGNoaWxkLnRhZ05hbWUgPT09ICd0aXRsZScpXG4gICAgKSB7XG4gICAgICBpZiAoc2Vlbi5oYXMoY2hpbGQudGFnTmFtZSkpIHJldHVybiBmYWxzZVxuICAgICAgc2Vlbi5hZGQoY2hpbGQudGFnTmFtZSlcbiAgICB9XG4gIH1cblxuICAvLyDigJxNYXkgYmUgb21pdHRlZCBpZiB0aGUgZWxlbWVudCBpcyBlbXB0eSxcbiAgLy8gb3IgaWYgdGhlIGZpcnN0IHRoaW5nIGluc2lkZSB0aGUgaGVhZCBlbGVtZW50IGlzIGFuIGVsZW1lbnQu4oCdXG4gIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlblswXVxuICByZXR1cm4gIWNoaWxkIHx8IGNoaWxkLnR5cGUgPT09ICdlbGVtZW50J1xufVxuXG4vKipcbiAqIFdoZXRoZXIgdG8gb21pdCBgPGJvZHk+YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqICAgRWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIHRoZSBvcGVuaW5nIHRhZyBjYW4gYmUgb21pdHRlZC5cbiAqL1xuZnVuY3Rpb24gYm9keShub2RlKSB7XG4gIGNvbnN0IGhlYWQgPSBzaWJsaW5nQWZ0ZXIobm9kZSwgLTEsIHRydWUpXG5cbiAgcmV0dXJuIChcbiAgICAhaGVhZCB8fFxuICAgIChoZWFkLnR5cGUgIT09ICdjb21tZW50JyAmJlxuICAgICAgIShoZWFkLnR5cGUgPT09ICd0ZXh0JyAmJiB3aGl0ZXNwYWNlKGhlYWQudmFsdWUuY2hhckF0KDApKSkgJiZcbiAgICAgICEoXG4gICAgICAgIGhlYWQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICAgIChoZWFkLnRhZ05hbWUgPT09ICdtZXRhJyB8fFxuICAgICAgICAgIGhlYWQudGFnTmFtZSA9PT0gJ2xpbmsnIHx8XG4gICAgICAgICAgaGVhZC50YWdOYW1lID09PSAnc2NyaXB0JyB8fFxuICAgICAgICAgIGhlYWQudGFnTmFtZSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGhlYWQudGFnTmFtZSA9PT0gJ3RlbXBsYXRlJylcbiAgICAgICkpXG4gIClcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDxjb2xncm91cD5gLlxuICogVGhlIHNwZWMgZGVzY3JpYmVzIHNvbWUgbG9naWMgZm9yIHRoZSBvcGVuaW5nIHRhZywgYnV0IGl04oCZcyBlYXNpZXIgdG9cbiAqIGltcGxlbWVudCBpbiB0aGUgY2xvc2luZyB0YWcsIHRvIHRoZSBzYW1lIGVmZmVjdCwgc28gd2UgaGFuZGxlIGl0IHRoZXJlXG4gKiBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgb3BlbmluZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNvbGdyb3VwKG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgcHJldmlvdXMgPSBzaWJsaW5nQmVmb3JlKHBhcmVudCwgaW5kZXgpXG4gIGNvbnN0IGhlYWQgPSBzaWJsaW5nQWZ0ZXIobm9kZSwgLTEsIHRydWUpXG5cbiAgLy8gUHJldmlvdXMgY29sZ3JvdXAgd2FzIGFscmVhZHkgb21pdHRlZC5cbiAgaWYgKFxuICAgIHBhcmVudCAmJlxuICAgIHByZXZpb3VzICYmXG4gICAgcHJldmlvdXMudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgcHJldmlvdXMudGFnTmFtZSA9PT0gJ2NvbGdyb3VwJyAmJlxuICAgIGNsb3NpbmcocHJldmlvdXMsIHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHByZXZpb3VzKSwgcGFyZW50KVxuICApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBCb29sZWFuKGhlYWQgJiYgaGVhZC50eXBlID09PSAnZWxlbWVudCcgJiYgaGVhZC50YWdOYW1lID09PSAnY29sJylcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRvIG9taXQgYDx0Ym9keT5gLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogICBFbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gKiAgIEluZGV4IG9mIGVsZW1lbnQgaW4gcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGUgb3BlbmluZyB0YWcgY2FuIGJlIG9taXR0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRib2R5KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgY29uc3QgcHJldmlvdXMgPSBzaWJsaW5nQmVmb3JlKHBhcmVudCwgaW5kZXgpXG4gIGNvbnN0IGhlYWQgPSBzaWJsaW5nQWZ0ZXIobm9kZSwgLTEpXG5cbiAgLy8gUHJldmlvdXMgdGFibGUgc2VjdGlvbiB3YXMgYWxyZWFkeSBvbWl0dGVkLlxuICBpZiAoXG4gICAgcGFyZW50ICYmXG4gICAgcHJldmlvdXMgJiZcbiAgICBwcmV2aW91cy50eXBlID09PSAnZWxlbWVudCcgJiZcbiAgICAocHJldmlvdXMudGFnTmFtZSA9PT0gJ3RoZWFkJyB8fCBwcmV2aW91cy50YWdOYW1lID09PSAndGJvZHknKSAmJlxuICAgIGNsb3NpbmcocHJldmlvdXMsIHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHByZXZpb3VzKSwgcGFyZW50KVxuICApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBCb29sZWFuKGhlYWQgJiYgaGVhZC50eXBlID09PSAnZWxlbWVudCcgJiYgaGVhZC50YWdOYW1lID09PSAndHInKVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/opening.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   siblingAfter: () => (/* binding */ siblingAfter),\n/* harmony export */   siblingBefore: () => (/* binding */ siblingBefore)\n/* harmony export */ });\n/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-whitespace */ \"(app-pages-browser)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js\");\n/**\n * @import {Parents, RootContent} from 'hast'\n */\n\n\n\nconst siblingAfter = siblings(1)\nconst siblingBefore = siblings(-1)\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = []\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren\n    let offset = (index || 0) + increment\n    let next = siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && (0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_0__.whitespace)(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL29taXNzaW9uL3V0aWwvc2libGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQzs7QUFFK0M7O0FBRXhDO0FBQ0E7O0FBRVAsV0FBVyxvQkFBb0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBLGFBQWEsb0JBQW9CO0FBQ2pDO0FBQ0EsYUFBYSxvQkFBb0I7QUFDakM7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQztBQUNBLGVBQWUsZ0JBQWdCLDhCQUE4QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsZ0VBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXN0LXV0aWwtdG8taHRtbEA5LjAuNS9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXRvLWh0bWwvbGliL29taXNzaW9uL3V0aWwvc2libGluZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtQYXJlbnRzLCBSb290Q29udGVudH0gZnJvbSAnaGFzdCdcbiAqL1xuXG5pbXBvcnQge3doaXRlc3BhY2V9IGZyb20gJ2hhc3QtdXRpbC13aGl0ZXNwYWNlJ1xuXG5leHBvcnQgY29uc3Qgc2libGluZ0FmdGVyID0gc2libGluZ3MoMSlcbmV4cG9ydCBjb25zdCBzaWJsaW5nQmVmb3JlID0gc2libGluZ3MoLTEpXG5cbi8qKiBAdHlwZSB7QXJyYXk8Um9vdENvbnRlbnQ+fSAqL1xuY29uc3QgZW1wdHlDaGlsZHJlbiA9IFtdXG5cbi8qKlxuICogRmFjdG9yeSB0byBjaGVjayBzaWJsaW5ncyBpbiBhIGRpcmVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5jcmVtZW50XG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdzKGluY3JlbWVudCkge1xuICByZXR1cm4gc2libGluZ1xuXG4gIC8qKlxuICAgKiBGaW5kIGFwcGxpY2FibGUgc2libGluZ3MgaW4gYSBkaXJlY3Rpb24uXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSB7UGFyZW50c30gUGFyZW50XG4gICAqICAgUGFyZW50IHR5cGUuXG4gICAqIEBwYXJhbSB7UGFyZW50IHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAgICogICBQYXJlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICAgKiAgIEluZGV4IG9mIGNoaWxkIGluIGBwYXJlbnRgLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCB1bmRlZmluZWR9IFtpbmNsdWRlV2hpdGVzcGFjZT1mYWxzZV1cbiAgICogICBXaGV0aGVyIHRvIGluY2x1ZGUgd2hpdGVzcGFjZSAoZGVmYXVsdDogYGZhbHNlYCkuXG4gICAqIEByZXR1cm5zIHtQYXJlbnQgZXh0ZW5kcyB7Y2hpbGRyZW46IEFycmF5PGluZmVyIENoaWxkPn0gPyBDaGlsZCB8IHVuZGVmaW5lZCA6IG5ldmVyfVxuICAgKiAgIENoaWxkIG9mIHBhcmVudC5cbiAgICovXG4gIGZ1bmN0aW9uIHNpYmxpbmcocGFyZW50LCBpbmRleCwgaW5jbHVkZVdoaXRlc3BhY2UpIHtcbiAgICBjb25zdCBzaWJsaW5ncyA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbiA6IGVtcHR5Q2hpbGRyZW5cbiAgICBsZXQgb2Zmc2V0ID0gKGluZGV4IHx8IDApICsgaW5jcmVtZW50XG4gICAgbGV0IG5leHQgPSBzaWJsaW5nc1tvZmZzZXRdXG5cbiAgICBpZiAoIWluY2x1ZGVXaGl0ZXNwYWNlKSB7XG4gICAgICB3aGlsZSAobmV4dCAmJiB3aGl0ZXNwYWNlKG5leHQpKSB7XG4gICAgICAgIG9mZnNldCArPSBpbmNyZW1lbnRcbiAgICAgICAgbmV4dCA9IHNpYmxpbmdzW29mZnNldF1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpdOKAmXMgYSBjb3JyZWN0IGNoaWxkLlxuICAgIHJldHVybiBuZXh0XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/html-void-elements@3.0.0/node_modules/html-void-elements/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/html-void-elements@3.0.0/node_modules/html-void-elements/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlVoidElements: () => (/* binding */ htmlVoidElements)\n/* harmony export */ });\n/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nconst htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9odG1sLXZvaWQtZWxlbWVudHNAMy4wLjAvbm9kZV9tb2R1bGVzL2h0bWwtdm9pZC1lbGVtZW50cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9odG1sLXZvaWQtZWxlbWVudHNAMy4wLjAvbm9kZV9tb2R1bGVzL2h0bWwtdm9pZC1lbGVtZW50cy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2YgSFRNTCB2b2lkIHRhZyBuYW1lcy5cbiAqXG4gKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWxWb2lkRWxlbWVudHMgPSBbXG4gICdhcmVhJyxcbiAgJ2Jhc2UnLFxuICAnYmFzZWZvbnQnLFxuICAnYmdzb3VuZCcsXG4gICdicicsXG4gICdjb2wnLFxuICAnY29tbWFuZCcsXG4gICdlbWJlZCcsXG4gICdmcmFtZScsXG4gICdocicsXG4gICdpbWFnZScsXG4gICdpbWcnLFxuICAnaW5wdXQnLFxuICAna2V5Z2VuJyxcbiAgJ2xpbmsnLFxuICAnbWV0YScsXG4gICdwYXJhbScsXG4gICdzb3VyY2UnLFxuICAndHJhY2snLFxuICAnd2JyJ1xuXVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/html-void-elements@3.0.0/node_modules/html-void-elements/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/oniguruma-to-es@3.1.1/node_modules/oniguruma-to-es/dist/esm/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/oniguruma-to-es@3.1.1/node_modules/oniguruma-to-es/dist/esm/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmulatedRegExp: () => (/* binding */ EmulatedRegExp),\n/* harmony export */   toOnigurumaAst: () => (/* binding */ toOnigurumaAst),\n/* harmony export */   toRegExp: () => (/* binding */ toRegExp),\n/* harmony export */   toRegExpDetails: () => (/* binding */ toRegExpDetails)\n/* harmony export */ });\n/* harmony import */ var emoji_regex_xs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! emoji-regex-xs */ \"(app-pages-browser)/./node_modules/.pnpm/emoji-regex-xs@1.0.0/node_modules/emoji-regex-xs/index.mjs\");\n/* harmony import */ var regex_internals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regex/internals */ \"(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js\");\n/* harmony import */ var regex_recursion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! regex-recursion */ \"(app-pages-browser)/./node_modules/.pnpm/regex-recursion@6.0.2/node_modules/regex-recursion/src/index.js\");\n// src/utils.js\nvar cp = String.fromCodePoint;\nvar r = String.raw;\nvar envFlags = {\n  flagGroups: (() => {\n    try {\n      new RegExp(\"(?i:)\");\n    } catch {\n      return false;\n    }\n    return true;\n  })(),\n  unicodeSets: (() => {\n    try {\n      new RegExp(\"\", \"v\");\n    } catch {\n      return false;\n    }\n    return true;\n  })()\n};\nenvFlags.literalHyphenIncorrectlyCreatesRange = (() => {\n  if (!envFlags.unicodeSets) {\n    return false;\n  }\n  try {\n    new RegExp(r`[\\d\\-a]`, \"v\");\n  } catch {\n    return true;\n  }\n  return false;\n})();\nfunction getNewCurrentFlags(current, { enable, disable }) {\n  return {\n    dotAll: !disable?.dotAll && !!(enable?.dotAll || current.dotAll),\n    ignoreCase: !disable?.ignoreCase && !!(enable?.ignoreCase || current.ignoreCase)\n  };\n}\nfunction getOrInsert(map, key, defaultValue) {\n  if (!map.has(key)) {\n    map.set(key, defaultValue);\n  }\n  return map.get(key);\n}\nfunction isMinTarget(target, min) {\n  return EsVersion[target] >= EsVersion[min];\n}\nfunction throwIfNot(value, msg) {\n  if (!value) {\n    throw new Error(msg ?? \"Value expected\");\n  }\n  return value;\n}\n\n// src/options.js\nvar EsVersion = {\n  ES2025: 2025,\n  ES2024: 2024,\n  ES2018: 2018\n};\nvar Target = (\n  /** @type {const} */\n  {\n    auto: \"auto\",\n    ES2025: \"ES2025\",\n    ES2024: \"ES2024\",\n    ES2018: \"ES2018\"\n  }\n);\nfunction getOptions(options) {\n  if (options?.target !== void 0 && !Target[options.target]) {\n    throw new Error(`Unexpected target \"${options.target}\"`);\n  }\n  const opts = {\n    // Sets the level of emulation rigor/strictness.\n    accuracy: \"default\",\n    // Disables advanced emulation that relies on returning a `RegExp` subclass, resulting in\n    // certain patterns not being emulatable.\n    avoidSubclass: false,\n    // Oniguruma flags; a string with `i`, `m`, `x`, `D`, `S`, `W` in any order (all optional).\n    // Oniguruma's `m` is equivalent to JavaScript's `s` (`dotAll`).\n    flags: \"\",\n    // Include JavaScript flag `g` (`global`) in the result.\n    global: false,\n    // Include JavaScript flag `d` (`hasIndices`) in the result.\n    hasIndices: false,\n    // Delay regex construction until first use if the transpiled pattern is at least this length.\n    lazyCompileLength: Infinity,\n    // JavaScript version used for generated regexes. Using `auto` detects the best value based on\n    // your environment. Later targets allow faster processing, simpler generated source, and\n    // support for additional features.\n    target: \"auto\",\n    // Disables optimizations that simplify the pattern when it doesn't change the meaning.\n    verbose: false,\n    ...options,\n    // Advanced options that override standard behavior, error checking, and flags when enabled.\n    rules: {\n      // Useful with TextMate grammars that merge backreferences across patterns.\n      allowOrphanBackrefs: false,\n      // Use ASCII-based `\\b` and `\\B`, which increases search performance of generated regexes.\n      asciiWordBoundaries: false,\n      // Allow unnamed captures and numbered calls (backreferences and subroutines) when using\n      // named capture. This is Oniguruma option `ONIG_OPTION_CAPTURE_GROUP`; on by default in\n      // `vscode-oniguruma`.\n      captureGroup: false,\n      // Change the recursion depth limit from Oniguruma's `20` to an integer `2`–`20`.\n      recursionLimit: 20,\n      // `^` as `\\A`; `$` as`\\Z`. Improves search performance of generated regexes without changing\n      // meaning if searching line by line. This is Oniguruma option `ONIG_OPTION_SINGLELINE`.\n      singleline: false,\n      ...options?.rules\n    }\n  };\n  if (opts.target === \"auto\") {\n    opts.target = envFlags.flagGroups ? \"ES2025\" : envFlags.unicodeSets ? \"ES2024\" : \"ES2018\";\n  }\n  return opts;\n}\n\n// src/unicode.js\nvar CharsWithoutIgnoreCaseExpansion = /* @__PURE__ */ new Set([\n  cp(304),\n  // İ\n  cp(305)\n  // ı\n]);\nfunction getIgnoreCaseMatchChars(char) {\n  if (CharsWithoutIgnoreCaseExpansion.has(char)) {\n    return [char];\n  }\n  const set = /* @__PURE__ */ new Set();\n  const lower = char.toLowerCase();\n  const upper = lower.toUpperCase();\n  const title = LowerToTitleCaseMap.get(lower);\n  const altLower = LowerToAlternativeLowerCaseMap.get(lower);\n  const altUpper = LowerToAlternativeUpperCaseMap.get(lower);\n  if ([...upper].length === 1) {\n    set.add(upper);\n  }\n  altUpper && set.add(altUpper);\n  title && set.add(title);\n  set.add(lower);\n  altLower && set.add(altLower);\n  return [...set];\n}\nvar JsUnicodeProperties = new Set(\n  `C Other\nCc Control cntrl\nCf Format\nCn Unassigned\nCo Private_Use\nCs Surrogate\nL Letter\nLC Cased_Letter\nLl Lowercase_Letter\nLm Modifier_Letter\nLo Other_Letter\nLt Titlecase_Letter\nLu Uppercase_Letter\nM Mark Combining_Mark\nMc Spacing_Mark\nMe Enclosing_Mark\nMn Nonspacing_Mark\nN Number\nNd Decimal_Number digit\nNl Letter_Number\nNo Other_Number\nP Punctuation punct\nPc Connector_Punctuation\nPd Dash_Punctuation\nPe Close_Punctuation\nPf Final_Punctuation\nPi Initial_Punctuation\nPo Other_Punctuation\nPs Open_Punctuation\nS Symbol\nSc Currency_Symbol\nSk Modifier_Symbol\nSm Math_Symbol\nSo Other_Symbol\nZ Separator\nZl Line_Separator\nZp Paragraph_Separator\nZs Space_Separator\nASCII\nASCII_Hex_Digit AHex\nAlphabetic Alpha\nAny\nAssigned\nBidi_Control Bidi_C\nBidi_Mirrored Bidi_M\nCase_Ignorable CI\nCased\nChanges_When_Casefolded CWCF\nChanges_When_Casemapped CWCM\nChanges_When_Lowercased CWL\nChanges_When_NFKC_Casefolded CWKCF\nChanges_When_Titlecased CWT\nChanges_When_Uppercased CWU\nDash\nDefault_Ignorable_Code_Point DI\nDeprecated Dep\nDiacritic Dia\nEmoji\nEmoji_Component EComp\nEmoji_Modifier EMod\nEmoji_Modifier_Base EBase\nEmoji_Presentation EPres\nExtended_Pictographic ExtPict\nExtender Ext\nGrapheme_Base Gr_Base\nGrapheme_Extend Gr_Ext\nHex_Digit Hex\nIDS_Binary_Operator IDSB\nIDS_Trinary_Operator IDST\nID_Continue IDC\nID_Start IDS\nIdeographic Ideo\nJoin_Control Join_C\nLogical_Order_Exception LOE\nLowercase Lower\nMath\nNoncharacter_Code_Point NChar\nPattern_Syntax Pat_Syn\nPattern_White_Space Pat_WS\nQuotation_Mark QMark\nRadical\nRegional_Indicator RI\nSentence_Terminal STerm\nSoft_Dotted SD\nTerminal_Punctuation Term\nUnified_Ideograph UIdeo\nUppercase Upper\nVariation_Selector VS\nWhite_Space space\nXID_Continue XIDC\nXID_Start XIDS`.split(/\\s/)\n);\nvar JsUnicodePropertiesMap = /* @__PURE__ */ new Map();\nfor (const p of JsUnicodeProperties) {\n  JsUnicodePropertiesMap.set(slug(p), p);\n}\nvar JsUnicodePropertiesOfStrings = /* @__PURE__ */ new Set([\n  // ES2024 properties of strings; none are supported by Oniguruma\n  \"Basic_Emoji\",\n  \"Emoji_Keycap_Sequence\",\n  \"RGI_Emoji\",\n  \"RGI_Emoji_Flag_Sequence\",\n  \"RGI_Emoji_Modifier_Sequence\",\n  \"RGI_Emoji_Tag_Sequence\",\n  \"RGI_Emoji_ZWJ_Sequence\"\n]);\nvar JsUnicodePropertiesOfStringsMap = /* @__PURE__ */ new Map();\nfor (const p of JsUnicodePropertiesOfStrings) {\n  JsUnicodePropertiesOfStringsMap.set(slug(p), p);\n}\nvar LowerToAlternativeLowerCaseMap = /* @__PURE__ */ new Map([\n  [\"s\", cp(383)],\n  // s, ſ\n  [cp(383), \"s\"]\n  // ſ, s\n]);\nvar LowerToAlternativeUpperCaseMap = /* @__PURE__ */ new Map([\n  [cp(223), cp(7838)],\n  // ß, ẞ\n  [cp(107), cp(8490)],\n  // k, K (Kelvin)\n  [cp(229), cp(8491)],\n  // å, Å (Angstrom)\n  [cp(969), cp(8486)]\n  // ω, Ω (Ohm)\n]);\nvar LowerToTitleCaseMap = new Map([\n  titleEntry(453),\n  titleEntry(456),\n  titleEntry(459),\n  titleEntry(498),\n  ...titleRange(8072, 8079),\n  ...titleRange(8088, 8095),\n  ...titleRange(8104, 8111),\n  titleEntry(8124),\n  titleEntry(8140),\n  titleEntry(8188)\n]);\nvar PosixClassesMap = /* @__PURE__ */ new Map([\n  [\"alnum\", r`[\\p{Alpha}\\p{Nd}]`],\n  [\"alpha\", r`\\p{Alpha}`],\n  [\"ascii\", r`\\p{ASCII}`],\n  [\"blank\", r`[\\p{Zs}\\t]`],\n  [\"cntrl\", r`\\p{cntrl}`],\n  [\"digit\", r`\\p{Nd}`],\n  [\"graph\", r`[\\P{space}&&\\P{cntrl}&&\\P{Cn}&&\\P{Cs}]`],\n  [\"lower\", r`\\p{Lower}`],\n  [\"print\", r`[[\\P{space}&&\\P{cntrl}&&\\P{Cn}&&\\P{Cs}]\\p{Zs}]`],\n  [\"punct\", r`[\\p{P}\\p{S}]`],\n  // New value from Oniguruma 6.9.9\n  [\"space\", r`\\p{space}`],\n  [\"upper\", r`\\p{Upper}`],\n  [\"word\", r`[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}]`],\n  [\"xdigit\", r`\\p{AHex}`]\n]);\nvar PosixProperties = /* @__PURE__ */ new Set([\n  \"alnum\",\n  \"blank\",\n  \"graph\",\n  \"print\",\n  \"word\",\n  \"xdigit\"\n  // The following are available with the same name in JS (see `JsUnicodeProperties`), so can be\n  // handled as standard Unicode properties\n  // 'alpha', // (JS: Alpha)\n  // 'ascii', // (JS: ASCII)\n  // 'cntrl', // (JS: cntrl)\n  // 'digit', // (JS: digit)\n  // 'lower', // (JS: Lower)\n  // 'punct', // (JS: punct)\n  // 'space', // (JS: space)\n  // 'upper', // (JS: Upper)\n]);\nfunction range(start, end) {\n  const range2 = [];\n  for (let i = start; i <= end; i++) {\n    range2.push(i);\n  }\n  return range2;\n}\nfunction slug(name) {\n  return name.replace(/[- _]+/g, \"\").toLowerCase();\n}\nfunction titleEntry(codePoint) {\n  const char = cp(codePoint);\n  return [char.toLowerCase(), char];\n}\nfunction titleRange(start, end) {\n  return range(start, end).map((codePoint) => titleEntry(codePoint));\n}\nvar UnicodePropertiesWithSpecificCase = /* @__PURE__ */ new Set([\n  \"Lower\",\n  \"Lowercase\",\n  \"Upper\",\n  \"Uppercase\",\n  \"Ll\",\n  \"Lowercase_Letter\",\n  \"Lt\",\n  \"Titlecase_Letter\",\n  \"Lu\",\n  \"Uppercase_Letter\"\n  // The `Changes_When_*` properties (and their aliases) could be included, but they're very rare.\n  // Some other properties include a handful of chars with specific cases only, but these chars are\n  // generally extreme edge cases and using such properties case insensitively generally produces\n  // undesired behavior anyway\n]);\n\n// src/tokenize.js\nvar TokenTypes = (\n  /** @type {const} */\n  {\n    Alternator: \"Alternator\",\n    Assertion: \"Assertion\",\n    Backreference: \"Backreference\",\n    Character: \"Character\",\n    CharacterClassClose: \"CharacterClassClose\",\n    CharacterClassHyphen: \"CharacterClassHyphen\",\n    CharacterClassIntersector: \"CharacterClassIntersector\",\n    CharacterClassOpen: \"CharacterClassOpen\",\n    CharacterSet: \"CharacterSet\",\n    Directive: \"Directive\",\n    GroupClose: \"GroupClose\",\n    GroupOpen: \"GroupOpen\",\n    Subroutine: \"Subroutine\",\n    Quantifier: \"Quantifier\",\n    // These aren't allowed in char classes, so they aren't equivalent to JS `[\\q{}]`\n    VariableLengthCharacterSet: \"VariableLengthCharacterSet\",\n    // Intermediate representation not included in results\n    EscapedNumber: \"EscapedNumber\"\n  }\n);\nvar TokenCharacterSetKinds = {\n  any: \"any\",\n  digit: \"digit\",\n  dot: \"dot\",\n  hex: \"hex\",\n  non_newline: \"non_newline\",\n  posix: \"posix\",\n  property: \"property\",\n  space: \"space\",\n  word: \"word\"\n};\nvar TokenDirectiveKinds = {\n  flags: \"flags\",\n  keep: \"keep\"\n};\nvar TokenGroupKinds = {\n  absent_repeater: \"absent_repeater\",\n  atomic: \"atomic\",\n  capturing: \"capturing\",\n  group: \"group\",\n  lookahead: \"lookahead\",\n  lookbehind: \"lookbehind\"\n};\nvar EscapeCharCodes = /* @__PURE__ */ new Map([\n  [\"a\", 7],\n  // alert/bell (Not available in JS)\n  [\"b\", 8],\n  // backspace (only in char classes)\n  [\"e\", 27],\n  // escape (Not available in JS)\n  [\"f\", 12],\n  // form feed\n  [\"n\", 10],\n  // line feed\n  [\"r\", 13],\n  // carriage return\n  [\"t\", 9],\n  // horizontal tab\n  [\"v\", 11]\n  // vertical tab\n]);\nvar charClassOpenPattern = r`\\[\\^?`;\nvar sharedEscapesPattern = `${// Control char\n\"c.? | C(?:-.?)?\"}|${// Unicode property; Onig considers `\\p` an identity escape, but e.g. `\\p{`, `\\p{ ^L}`, and\n// `\\p{gc=L}` are invalid\nr`[pP]\\{(?:\\^?[-\\x20_]*[A-Za-z][-\\x20\\w]*\\})?`}|${// Hex encoded byte sequence; attempt match before other `\\xNN` hex char\nr`x[89A-Fa-f]\\p{AHex}(?:\\\\x[89A-Fa-f]\\p{AHex})*`}|${// Hex char\nr`u(?:\\p{AHex}{4})? | x\\{[^\\}]*\\}? | x\\p{AHex}{0,2}`}|${// Enclosed octal code point\nr`o\\{[^\\}]*\\}?`}|${// Escaped number\nr`\\d{1,3}`}`;\nvar quantifierRe = /[?*+][?+]?|\\{(?:\\d+(?:,\\d*)?|,\\d+)\\}\\??/;\nvar tokenRe = new RegExp(r`\n  \\\\ (?:\n    ${sharedEscapesPattern}\n    | [gk]<[^>]*>?\n    | [gk]'[^']*'?\n    | .\n  )\n  | \\( (?:\n    \\? (?:\n      [:=!>({]\n      | <[=!]\n      | <[^>]*>\n      | '[^']*'\n      | ~\\|?\n      | #(?:[^)\\\\]|\\\\.?)*\n      | [^:)]*[:)]\n    )?\n    | \\*\n  )?\n  | ${quantifierRe.source}\n  | ${charClassOpenPattern}\n  | .\n`.replace(/\\s+/g, \"\"), \"gsu\");\nvar charClassTokenRe = new RegExp(r`\n  \\\\ (?:\n    ${sharedEscapesPattern}\n    | .\n  )\n  | \\[:(?:\\^?\\p{Alpha}+|\\^):\\]\n  | ${charClassOpenPattern}\n  | &&\n  | .\n`.replace(/\\s+/g, \"\"), \"gsu\");\nfunction tokenize(pattern, flags = \"\", rules) {\n  rules = {\n    // `ONIG_OPTION_CAPTURE_GROUP`\n    captureGroup: false,\n    // `ONIG_OPTION_SINGLELINE`\n    singleline: false,\n    ...rules\n  };\n  if (typeof pattern !== \"string\") {\n    throw new Error(\"String expected as pattern\");\n  }\n  if (!/^[imxDSW]*$/.test(flags)) {\n    throw new Error(`Flags \"${flags}\" includes unsupported value`);\n  }\n  const extended = flags.includes(\"x\");\n  const xStack = [extended];\n  const context = {\n    captureGroup: rules.captureGroup,\n    getCurrentModX: () => xStack.at(-1),\n    numOpenGroups: 0,\n    popModX() {\n      xStack.pop();\n    },\n    pushModX(isXOn) {\n      xStack.push(isXOn);\n    },\n    replaceCurrentModX(isXOn) {\n      xStack[xStack.length - 1] = isXOn;\n    },\n    singleline: rules.singleline\n  };\n  let tokens = [];\n  let match;\n  tokenRe.lastIndex = 0;\n  while (match = tokenRe.exec(pattern)) {\n    const result = getTokenWithDetails(context, pattern, match[0], tokenRe.lastIndex);\n    if (result.tokens) {\n      tokens.push(...result.tokens);\n    } else if (result.token) {\n      tokens.push(result.token);\n    }\n    if (result.lastIndex !== void 0) {\n      tokenRe.lastIndex = result.lastIndex;\n    }\n  }\n  const potentialUnnamedCaptureTokens = [];\n  let numNamedAndOptInUnnamedCaptures = 0;\n  tokens.forEach((t) => {\n    if (t.type === TokenTypes.GroupOpen) {\n      if (t.kind === TokenGroupKinds.capturing) {\n        t.number = ++numNamedAndOptInUnnamedCaptures;\n      } else if (t.raw === \"(\") {\n        potentialUnnamedCaptureTokens.push(t);\n      }\n    }\n  });\n  if (!numNamedAndOptInUnnamedCaptures) {\n    potentialUnnamedCaptureTokens.forEach((t, i) => {\n      t.kind = TokenGroupKinds.capturing;\n      t.number = i + 1;\n    });\n  }\n  const numCaptures = numNamedAndOptInUnnamedCaptures || potentialUnnamedCaptureTokens.length;\n  tokens = tokens.map(\n    (t) => t.type === TokenTypes.EscapedNumber ? splitEscapedNumToken(t, numCaptures) : t\n  ).flat();\n  return {\n    tokens,\n    flags: {\n      ignoreCase: flags.includes(\"i\"),\n      // Flag m is called `multiline` in Onig, but that has a different meaning in JS. Onig flag m\n      // is equivalent to JS flag s\n      dotAll: flags.includes(\"m\"),\n      // Flag x is fully handled during tokenization\n      extended,\n      // Flags D, S, W are currently only supported as top-level flags\n      digitIsAscii: flags.includes(\"D\"),\n      spaceIsAscii: flags.includes(\"S\"),\n      wordIsAscii: flags.includes(\"W\")\n    },\n    rules\n  };\n}\nfunction getTokenWithDetails(context, pattern, m, lastIndex) {\n  const [m0, m1] = m;\n  if (m0 === \"[\") {\n    const result = getAllTokensForCharClass(pattern, m, lastIndex);\n    return {\n      // Array of all of the char class's tokens\n      tokens: result.tokens,\n      // Jump forward to the end of the char class\n      lastIndex: result.lastIndex\n    };\n  }\n  if (m0 === \"\\\\\") {\n    if (\"AbBGzZ\".includes(m1)) {\n      return {\n        token: createToken(TokenTypes.Assertion, m, {\n          kind: m\n        })\n      };\n    }\n    if (/^\\\\g[<']/.test(m)) {\n      if (!/^\\\\g(?:<[^>]+>|'[^']+')$/.test(m)) {\n        throw new Error(`Invalid group name \"${m}\"`);\n      }\n      return {\n        token: createToken(TokenTypes.Subroutine, m)\n      };\n    }\n    if (/^\\\\k[<']/.test(m)) {\n      if (!/^\\\\k(?:<[^>]+>|'[^']+')$/.test(m)) {\n        throw new Error(`Invalid group name \"${m}\"`);\n      }\n      return {\n        token: createToken(TokenTypes.Backreference, m)\n      };\n    }\n    if (m1 === \"K\") {\n      return {\n        token: createToken(TokenTypes.Directive, m, {\n          kind: TokenDirectiveKinds.keep\n        })\n      };\n    }\n    if (m1 === \"N\") {\n      return {\n        token: createToken(TokenTypes.CharacterSet, m, {\n          kind: TokenCharacterSetKinds.non_newline\n        })\n      };\n    }\n    if (m1 === \"O\") {\n      return {\n        token: createToken(TokenTypes.CharacterSet, m, {\n          kind: TokenCharacterSetKinds.any\n        })\n      };\n    }\n    if (\"RX\".includes(m1)) {\n      return {\n        token: createToken(TokenTypes.VariableLengthCharacterSet, m, {\n          kind: m\n        })\n      };\n    }\n    if (\"yY\".includes(m1)) {\n      throw new Error(`Unsupported grapheme boundary \"${m}\"`);\n    }\n    const result = createTokenForSharedEscape(m, { inCharClass: false });\n    return Array.isArray(result) ? { tokens: result } : { token: result };\n  }\n  if (m0 === \"(\") {\n    if (m === \"(*\") {\n      throw new Error(`Unsupported named callout \"${m}\"`);\n    }\n    if (m === \"(?{\") {\n      throw new Error(`Unsupported callout \"${m}\"`);\n    }\n    if (m === \"(?#\") {\n      if (pattern[lastIndex] !== \")\") {\n        throw new Error('Unclosed comment group \"(?#\"');\n      }\n      return {\n        lastIndex: lastIndex + 1\n      };\n    }\n    if (/^\\(\\?[-imx]+[:)]$/.test(m)) {\n      return {\n        token: createTokenForFlagMod(m, context)\n      };\n    }\n    context.pushModX(context.getCurrentModX());\n    context.numOpenGroups++;\n    if (\n      // Unnamed capture if no named captures present and `captureGroup` not enabled, else\n      // noncapturing group\n      m === \"(\" && !context.captureGroup || // Noncapturing group\n      m === \"(?:\"\n    ) {\n      return {\n        token: createToken(TokenTypes.GroupOpen, m, {\n          // For `(`, will later change to `capturing` and add `number` prop if no named captures\n          kind: TokenGroupKinds.group\n        })\n      };\n    }\n    if (m === \"(?>\") {\n      return {\n        token: createToken(TokenTypes.GroupOpen, m, {\n          kind: TokenGroupKinds.atomic\n        })\n      };\n    }\n    if (m === \"(?=\" || m === \"(?!\" || m === \"(?<=\" || m === \"(?<!\") {\n      return {\n        token: createToken(TokenTypes.GroupOpen, m, {\n          kind: m[2] === \"<\" ? TokenGroupKinds.lookbehind : TokenGroupKinds.lookahead,\n          negate: m.endsWith(\"!\")\n        })\n      };\n    }\n    if (m === \"(\" && context.captureGroup || m.startsWith(\"(?<\") && m.endsWith(\">\") || m.startsWith(\"(?'\") && m.endsWith(\"'\")) {\n      const token = createToken(TokenTypes.GroupOpen, m, {\n        kind: TokenGroupKinds.capturing\n        // Will add `number` prop in a second pass\n      });\n      if (m !== \"(\") {\n        token.name = m.slice(3, -1);\n      }\n      return {\n        token\n      };\n    }\n    if (m.startsWith(\"(?~\")) {\n      if (m === \"(?~|\") {\n        throw new Error(`Unsupported absent function kind \"${m}\"`);\n      }\n      return {\n        token: createToken(TokenTypes.GroupOpen, m, {\n          kind: TokenGroupKinds.absent_repeater\n        })\n      };\n    }\n    if (m === \"(?(\") {\n      throw new Error(`Unsupported conditional \"${m}\"`);\n    }\n    throw new Error(`Invalid or unsupported group option \"${m}\"`);\n  }\n  if (m === \")\") {\n    context.popModX();\n    context.numOpenGroups--;\n    if (context.numOpenGroups < 0) {\n      throw new Error('Unmatched \")\"');\n    }\n    return {\n      token: createToken(TokenTypes.GroupClose, m)\n    };\n  }\n  if (m === \"#\" && context.getCurrentModX()) {\n    const end = pattern.indexOf(\"\\n\", lastIndex);\n    return {\n      // Jump forward to the end of the comment\n      lastIndex: end === -1 ? pattern.length : end\n    };\n  }\n  if (/^\\s$/.test(m) && context.getCurrentModX()) {\n    const re = /\\s+/y;\n    re.lastIndex = lastIndex;\n    const rest = re.exec(pattern);\n    return {\n      // Jump forward to the end of the whitespace\n      lastIndex: rest ? re.lastIndex : lastIndex\n    };\n  }\n  if (m === \".\") {\n    return {\n      token: createToken(TokenTypes.CharacterSet, m, {\n        kind: TokenCharacterSetKinds.dot\n      })\n    };\n  }\n  if (m === \"^\" || m === \"$\") {\n    const kind = context.singleline ? {\n      \"^\": r`\\A`,\n      \"$\": r`\\Z`\n    }[m] : m;\n    return {\n      token: createToken(TokenTypes.Assertion, m, {\n        kind\n      })\n    };\n  }\n  if (m === \"|\") {\n    return {\n      token: createToken(TokenTypes.Alternator, m)\n    };\n  }\n  if (quantifierRe.test(m)) {\n    return {\n      token: createTokenForQuantifier(m)\n    };\n  }\n  assertSingleCodePoint(m);\n  return {\n    token: createToken(TokenTypes.Character, m, {\n      value: m.codePointAt(0)\n    })\n  };\n}\nfunction getAllTokensForCharClass(pattern, opener, lastIndex) {\n  const tokens = [createToken(TokenTypes.CharacterClassOpen, opener, {\n    negate: opener[1] === \"^\"\n  })];\n  let numCharClassesOpen = 1;\n  let match;\n  charClassTokenRe.lastIndex = lastIndex;\n  while (match = charClassTokenRe.exec(pattern)) {\n    const m = match[0];\n    if (m[0] === \"[\" && m[1] !== \":\") {\n      numCharClassesOpen++;\n      tokens.push(createToken(TokenTypes.CharacterClassOpen, m, {\n        negate: m[1] === \"^\"\n      }));\n    } else if (m === \"]\") {\n      if (tokens.at(-1).type === TokenTypes.CharacterClassOpen) {\n        tokens.push(createToken(TokenTypes.Character, m, {\n          value: 93\n        }));\n      } else {\n        numCharClassesOpen--;\n        tokens.push(createToken(TokenTypes.CharacterClassClose, m));\n        if (!numCharClassesOpen) {\n          break;\n        }\n      }\n    } else {\n      const result = createTokenForAnyTokenWithinCharClass(m);\n      if (Array.isArray(result)) {\n        tokens.push(...result);\n      } else {\n        tokens.push(result);\n      }\n    }\n  }\n  return {\n    tokens,\n    lastIndex: charClassTokenRe.lastIndex || pattern.length\n  };\n}\nfunction createTokenForAnyTokenWithinCharClass(raw) {\n  if (raw[0] === \"\\\\\") {\n    return createTokenForSharedEscape(raw, { inCharClass: true });\n  }\n  if (raw[0] === \"[\") {\n    const posix = /\\[:(?<negate>\\^?)(?<name>[a-z]+):\\]/.exec(raw);\n    if (!posix || !PosixClassesMap.get(posix.groups.name)) {\n      throw new Error(`Invalid POSIX class \"${raw}\"`);\n    }\n    return createToken(TokenTypes.CharacterSet, raw, {\n      kind: TokenCharacterSetKinds.posix,\n      negate: !!posix.groups.negate,\n      value: posix.groups.name\n    });\n  }\n  if (raw === \"-\") {\n    return createToken(TokenTypes.CharacterClassHyphen, raw);\n  }\n  if (raw === \"&&\") {\n    return createToken(TokenTypes.CharacterClassIntersector, raw);\n  }\n  assertSingleCodePoint(raw);\n  return createToken(TokenTypes.Character, raw, {\n    value: raw.codePointAt(0)\n  });\n}\nfunction createTokenForSharedEscape(raw, { inCharClass }) {\n  const char1 = raw[1];\n  if (char1 === \"c\" || char1 === \"C\") {\n    return createTokenForControlChar(raw);\n  }\n  if (\"dDhHsSwW\".includes(char1)) {\n    return createTokenForShorthandCharClass(raw);\n  }\n  if (raw.startsWith(r`\\o{`)) {\n    throw new Error(`Incomplete, invalid, or unsupported octal code point \"${raw}\"`);\n  }\n  if (/^\\\\[pP]\\{/.test(raw)) {\n    if (raw.length === 3) {\n      throw new Error(`Incomplete or invalid Unicode property \"${raw}\"`);\n    }\n    return createTokenForUnicodeProperty(raw);\n  }\n  if (/^\\\\x[89A-Fa-f]\\p{AHex}/u.test(raw)) {\n    try {\n      const bytes = raw.split(/\\\\x/).slice(1).map((hex) => parseInt(hex, 16));\n      const decoded = new TextDecoder(\"utf-8\", {\n        ignoreBOM: true,\n        fatal: true\n      }).decode(new Uint8Array(bytes));\n      const encoder = new TextEncoder();\n      const tokens = [...decoded].map((char) => {\n        const raw2 = [...encoder.encode(char)].map((byte) => `\\\\x${byte.toString(16)}`).join(\"\");\n        return createToken(TokenTypes.Character, raw2, {\n          value: char.codePointAt(0)\n        });\n      });\n      return tokens;\n    } catch {\n      throw new Error(`Multibyte code \"${raw}\" incomplete or invalid in Oniguruma`);\n    }\n  }\n  if (char1 === \"u\" || char1 === \"x\") {\n    return createToken(TokenTypes.Character, raw, {\n      value: getValidatedHexCharCode(raw)\n    });\n  }\n  if (EscapeCharCodes.has(char1)) {\n    return createToken(TokenTypes.Character, raw, {\n      value: EscapeCharCodes.get(char1)\n    });\n  }\n  if (/\\d/.test(char1)) {\n    return createToken(TokenTypes.EscapedNumber, raw, {\n      inCharClass\n    });\n  }\n  if (raw === \"\\\\\") {\n    throw new Error(r`Incomplete escape \"\\\"`);\n  }\n  if (char1 === \"M\") {\n    throw new Error(`Unsupported meta \"${raw}\"`);\n  }\n  if ([...raw].length === 2) {\n    return createToken(TokenTypes.Character, raw, {\n      value: raw.codePointAt(1)\n    });\n  }\n  throw new Error(`Unexpected escape \"${raw}\"`);\n}\nfunction createToken(type, raw, data) {\n  return {\n    type,\n    raw,\n    ...data\n  };\n}\nfunction createTokenForControlChar(raw) {\n  const char = raw[1] === \"c\" ? raw[2] : raw[3];\n  if (!char || !/[A-Za-z]/.test(char)) {\n    throw new Error(`Unsupported control character \"${raw}\"`);\n  }\n  return createToken(TokenTypes.Character, raw, {\n    value: char.toUpperCase().codePointAt(0) - 64\n  });\n}\nfunction createTokenForFlagMod(raw, context) {\n  let { on, off } = /^\\(\\?(?<on>[imx]*)(?:-(?<off>[-imx]*))?/.exec(raw).groups;\n  off ??= \"\";\n  const isXOn = (context.getCurrentModX() || on.includes(\"x\")) && !off.includes(\"x\");\n  const enabledFlags = getFlagPropsForToken(on);\n  const disabledFlags = getFlagPropsForToken(off);\n  const flagChanges = {};\n  enabledFlags && (flagChanges.enable = enabledFlags);\n  disabledFlags && (flagChanges.disable = disabledFlags);\n  if (raw.endsWith(\")\")) {\n    context.replaceCurrentModX(isXOn);\n    return createToken(TokenTypes.Directive, raw, {\n      kind: TokenDirectiveKinds.flags,\n      flags: flagChanges\n    });\n  }\n  if (raw.endsWith(\":\")) {\n    context.pushModX(isXOn);\n    context.numOpenGroups++;\n    const token = createToken(TokenTypes.GroupOpen, raw, {\n      kind: TokenGroupKinds.group\n    });\n    if (enabledFlags || disabledFlags) {\n      token.flags = flagChanges;\n    }\n    return token;\n  }\n  throw new Error(`Unexpected flag modifier \"${raw}\"`);\n}\nfunction createTokenForQuantifier(raw) {\n  const data = {};\n  if (raw[0] === \"{\") {\n    const { min, max } = /^\\{(?<min>\\d*)(?:,(?<max>\\d*))?/.exec(raw).groups;\n    const limit = 1e5;\n    if (+min > limit || +max > limit) {\n      throw new Error(\"Quantifier value unsupported in Oniguruma\");\n    }\n    data.min = +min;\n    data.max = max === void 0 ? +min : max === \"\" ? Infinity : +max;\n    data.greedy = !raw.endsWith(\"?\");\n    data.possessive = false;\n  } else {\n    data.min = raw[0] === \"+\" ? 1 : 0;\n    data.max = raw[0] === \"?\" ? 1 : Infinity;\n    data.greedy = raw[1] !== \"?\";\n    data.possessive = raw[1] === \"+\";\n  }\n  return createToken(TokenTypes.Quantifier, raw, data);\n}\nfunction createTokenForShorthandCharClass(raw) {\n  const lower = raw[1].toLowerCase();\n  return createToken(TokenTypes.CharacterSet, raw, {\n    kind: {\n      \"d\": TokenCharacterSetKinds.digit,\n      \"h\": TokenCharacterSetKinds.hex,\n      // Not available in JS\n      \"s\": TokenCharacterSetKinds.space,\n      // Different than JS\n      \"w\": TokenCharacterSetKinds.word\n    }[lower],\n    negate: raw[1] !== lower\n  });\n}\nfunction createTokenForUnicodeProperty(raw) {\n  const { p, neg, value } = /^\\\\(?<p>[pP])\\{(?<neg>\\^?)(?<value>[^}]+)/.exec(raw).groups;\n  const negate = p === \"P\" && !neg || p === \"p\" && !!neg;\n  return createToken(TokenTypes.CharacterSet, raw, {\n    kind: TokenCharacterSetKinds.property,\n    negate,\n    value\n  });\n}\nfunction getFlagPropsForToken(flags) {\n  const obj = {};\n  if (flags.includes(\"i\")) {\n    obj.ignoreCase = true;\n  }\n  if (flags.includes(\"m\")) {\n    obj.dotAll = true;\n  }\n  if (flags.includes(\"x\")) {\n    obj.extended = true;\n  }\n  return Object.keys(obj).length ? obj : null;\n}\nfunction getValidatedHexCharCode(raw) {\n  if (/^(?:\\\\u(?!\\p{AHex}{4})|\\\\x(?!\\p{AHex}{1,2}|\\{\\p{AHex}{1,8}\\}))/u.test(raw)) {\n    throw new Error(`Incomplete or invalid escape \"${raw}\"`);\n  }\n  const hex = raw[2] === \"{\" ? /^\\\\x\\{\\s*(?<hex>\\p{AHex}+)/u.exec(raw).groups.hex : raw.slice(2);\n  const dec = parseInt(hex, 16);\n  return dec;\n}\nfunction splitEscapedNumToken(token, numCaptures) {\n  const { raw, inCharClass } = token;\n  const value = raw.slice(1);\n  if (!inCharClass && // Single digit 1-9 outside a char class is always treated as a backref\n  (value !== \"0\" && value.length === 1 || // Leading 0 makes it octal; backrefs can't include following literal digits\n  value[0] !== \"0\" && +value <= numCaptures)) {\n    return [createToken(TokenTypes.Backreference, raw)];\n  }\n  const tokens = [];\n  const matches = value.match(/^[0-7]+|\\d/g);\n  for (let i = 0; i < matches.length; i++) {\n    const m = matches[i];\n    let value2;\n    if (i === 0 && m !== \"8\" && m !== \"9\") {\n      value2 = parseInt(m, 8);\n      if (value2 > 127) {\n        throw new Error(r`Octal encoded byte above 177 unsupported \"${raw}\"`);\n      }\n    } else {\n      value2 = m.codePointAt(0);\n    }\n    tokens.push(createToken(TokenTypes.Character, (i === 0 ? \"\\\\\" : \"\") + m, {\n      value: value2\n    }));\n  }\n  return tokens;\n}\nfunction assertSingleCodePoint(raw) {\n  if ([...raw].length !== 1) {\n    throw new Error(`Expected \"${raw}\" to be a single code point`);\n  }\n}\n\n// src/utils-ast.js\nfunction hasOnlyChild({ alternatives }, kidFn) {\n  return alternatives.length === 1 && alternatives[0].elements.length === 1 && (!kidFn || kidFn(alternatives[0].elements[0]));\n}\nfunction isAlwaysZeroLength({ type }) {\n  return type === AstTypes.Assertion || type === AstTypes.Directive;\n}\nfunction isAlwaysNonZeroLength(node) {\n  const types = [\n    AstTypes.Character,\n    AstTypes.CharacterClass,\n    AstTypes.CharacterSet\n  ];\n  return types.includes(node.type) || node.type === AstTypes.Quantifier && node.min && types.includes(node.element.type);\n}\nfunction isConsumptiveGroup({ type }) {\n  return type === AstTypes.CapturingGroup || type === AstTypes.Group;\n}\nfunction isLookaround({ type, kind }) {\n  return type === AstTypes.Assertion && (kind === AstAssertionKinds.lookahead || kind === AstAssertionKinds.lookbehind);\n}\n\n// src/traverse.js\nfunction traverse(path, state, visitor) {\n  let ast = path.node;\n  while (ast.parent) {\n    ast = ast.parent;\n  }\n  function traverseArray(array, parent) {\n    for (let i = 0; i < array.length; i++) {\n      const keyShift = traverseNode(array[i], parent, i, array);\n      i = Math.max(-1, i + keyShift);\n    }\n  }\n  function traverseNode(node, parent = null, key = null, container = null) {\n    let keyShift = 0;\n    let skipTraversingKidsOfPath = false;\n    const path2 = {\n      node,\n      parent,\n      key,\n      container,\n      ast,\n      remove() {\n        throwIfNot(container, \"Container expected\").splice(Math.max(0, key + keyShift), 1);\n        keyShift -= 1;\n      },\n      removeAllNextSiblings() {\n        return throwIfNot(container, \"Container expected\").splice(key + 1);\n      },\n      removeAllPrevSiblings() {\n        const shifted = key + keyShift;\n        keyShift -= shifted;\n        return throwIfNot(container, \"Container expected\").splice(0, Math.max(0, shifted));\n      },\n      replaceWith(newNode) {\n        setParent(newNode, parent);\n        if (container) {\n          container[Math.max(0, key + keyShift)] = newNode;\n        } else {\n          parent[key] = newNode;\n        }\n      },\n      skip() {\n        skipTraversingKidsOfPath = true;\n      }\n    };\n    const visitorKey = getAstTypeAliases(node).find((key2) => !!visitor[key2]);\n    const methods = visitorKey && visitor[visitorKey];\n    const enterFn = typeof methods === \"function\" ? methods : methods?.enter;\n    const exitFn = methods?.exit;\n    enterFn?.(path2, state);\n    if (!skipTraversingKidsOfPath) {\n      switch (node.type) {\n        case AstTypes.Regex:\n          traverseNode(node.pattern, node, \"pattern\");\n          traverseNode(node.flags, node, \"flags\");\n          break;\n        case AstTypes.Alternative:\n        case AstTypes.CharacterClass:\n          traverseArray(node.elements, node);\n          break;\n        case AstTypes.Assertion:\n          if (isLookaround(node)) {\n            traverseArray(node.alternatives, node);\n          }\n          break;\n        case AstTypes.Backreference:\n        case AstTypes.Character:\n        case AstTypes.CharacterSet:\n        case AstTypes.Directive:\n        case AstTypes.Flags:\n        case AstTypes.Recursion:\n        case AstTypes.Subroutine:\n        case AstTypes.VariableLengthCharacterSet:\n          break;\n        case AstTypes.AbsentFunction:\n        case AstTypes.CapturingGroup:\n        case AstTypes.Group:\n        case AstTypes.Pattern:\n          traverseArray(node.alternatives, node);\n          break;\n        case AstTypes.CharacterClassIntersection:\n          traverseArray(node.classes, node);\n          break;\n        case AstTypes.CharacterClassRange:\n          traverseNode(node.min, node, \"min\");\n          traverseNode(node.max, node, \"max\");\n          break;\n        case AstTypes.Quantifier:\n          traverseNode(node.element, node, \"element\");\n          break;\n        default:\n          throw new Error(`Unexpected node type \"${node.type}\"`);\n      }\n    }\n    exitFn?.(path2, state);\n    return keyShift;\n  }\n  traverseNode(path.node, path.parent, path.key, path.container);\n}\nvar AstTypeAliases = {\n  AnyGroup: \"AnyGroup\",\n  AnyNode: \"AnyNode\"\n};\nfunction getAstTypeAliases(node) {\n  const types = [AstTypeAliases.AnyNode];\n  if (isConsumptiveGroup(node) || isLookaround(node)) {\n    types.push(AstTypeAliases.AnyGroup);\n  }\n  types.push(node.type);\n  return types;\n}\nfunction setParent(node, parent) {\n  if (\"parent\" in parent) {\n    node.parent = parent;\n  }\n}\n\n// src/parse.js\nvar AstTypes = {\n  AbsentFunction: \"AbsentFunction\",\n  Alternative: \"Alternative\",\n  Assertion: \"Assertion\",\n  Backreference: \"Backreference\",\n  CapturingGroup: \"CapturingGroup\",\n  Character: \"Character\",\n  CharacterClass: \"CharacterClass\",\n  CharacterClassIntersection: \"CharacterClassIntersection\",\n  CharacterClassRange: \"CharacterClassRange\",\n  CharacterSet: \"CharacterSet\",\n  Directive: \"Directive\",\n  Flags: \"Flags\",\n  Group: \"Group\",\n  Pattern: \"Pattern\",\n  Quantifier: \"Quantifier\",\n  Regex: \"Regex\",\n  Subroutine: \"Subroutine\",\n  VariableLengthCharacterSet: \"VariableLengthCharacterSet\",\n  // Used only by the transformer for Regex+ ASTs\n  Recursion: \"Recursion\"\n};\nvar AstAbsentFunctionKinds = {\n  // See <github.com/slevithan/oniguruma-to-es/issues/13>\n  repeater: \"repeater\"\n};\nvar AstAssertionKinds = {\n  line_end: \"line_end\",\n  line_start: \"line_start\",\n  lookahead: \"lookahead\",\n  lookbehind: \"lookbehind\",\n  search_start: \"search_start\",\n  string_end: \"string_end\",\n  string_end_newline: \"string_end_newline\",\n  string_start: \"string_start\",\n  word_boundary: \"word_boundary\"\n};\nvar AstCharacterSetKinds = TokenCharacterSetKinds;\nvar AstDirectiveKinds = TokenDirectiveKinds;\nvar AstVariableLengthCharacterSetKinds = {\n  grapheme: \"grapheme\",\n  newline: \"newline\"\n};\nfunction parse({ tokens, flags, rules }, options) {\n  const opts = {\n    skipBackrefValidation: false,\n    skipLookbehindValidation: false,\n    skipPropertyNameValidation: false,\n    verbose: false,\n    ...options\n  };\n  const context = {\n    capturingGroups: [],\n    current: 0,\n    hasNumberedRef: false,\n    namedGroupsByName: /* @__PURE__ */ new Map(),\n    parent: null,\n    skipBackrefValidation: opts.skipBackrefValidation,\n    skipLookbehindValidation: opts.skipLookbehindValidation,\n    skipPropertyNameValidation: opts.skipPropertyNameValidation,\n    subroutines: [],\n    token: null,\n    tokens,\n    verbose: opts.verbose,\n    walk\n  };\n  function walk(parent, state) {\n    const token = tokens[context.current];\n    context.parent = parent;\n    context.token = token;\n    context.current++;\n    switch (token.type) {\n      case TokenTypes.Alternator:\n        return createAlternative();\n      case TokenTypes.Assertion:\n        return createAssertionFromToken(token);\n      case TokenTypes.Backreference:\n        return parseBackreference(context);\n      case TokenTypes.Character:\n        return createCharacter(token.value, { useLastValid: !!state.isCheckingRangeEnd });\n      case TokenTypes.CharacterClassHyphen:\n        return parseCharacterClassHyphen(context, state);\n      case TokenTypes.CharacterClassOpen:\n        return parseCharacterClassOpen(context, state);\n      case TokenTypes.CharacterSet:\n        return parseCharacterSet(context);\n      case TokenTypes.Directive:\n        return createDirectiveFromToken(token);\n      case TokenTypes.GroupOpen:\n        return parseGroupOpen(context, state);\n      case TokenTypes.Quantifier:\n        return parseQuantifier(context);\n      case TokenTypes.Subroutine:\n        return parseSubroutine(context);\n      case TokenTypes.VariableLengthCharacterSet:\n        return createVariableLengthCharacterSet(token.kind);\n      default:\n        throw new Error(`Unexpected token type \"${token.type}\"`);\n    }\n  }\n  const ast = createRegex(createPattern(), createFlags(flags));\n  let top = ast.pattern.alternatives[0];\n  while (context.current < tokens.length) {\n    const node = walk(top, {});\n    if (node.type === AstTypes.Alternative) {\n      ast.pattern.alternatives.push(node);\n      top = node;\n    } else {\n      top.elements.push(node);\n    }\n  }\n  const { capturingGroups, hasNumberedRef, namedGroupsByName, subroutines } = context;\n  if (hasNumberedRef && namedGroupsByName.size && !rules.captureGroup) {\n    throw new Error(\"Numbered backref/subroutine not allowed when using named capture\");\n  }\n  for (const { ref } of subroutines) {\n    if (typeof ref === \"number\") {\n      if (ref > capturingGroups.length) {\n        throw new Error(`Subroutine uses a group number that's not defined`);\n      }\n    } else if (!namedGroupsByName.has(ref)) {\n      throw new Error(r`Subroutine uses a group name that's not defined \"\\g<${ref}>\"`);\n    } else if (namedGroupsByName.get(ref).length > 1) {\n      throw new Error(r`Subroutine uses a duplicate group name \"\\g<${ref}>\"`);\n    }\n  }\n  traverse({ node: ast }, null, {\n    AnyNode({ node, parent }) {\n      node.parent = parent;\n    }\n  });\n  return ast;\n}\nfunction parseBackreference(context) {\n  const { raw } = context.token;\n  const hasKWrapper = /^\\\\k[<']/.test(raw);\n  const ref = hasKWrapper ? raw.slice(3, -1) : raw.slice(1);\n  const fromNum = (num, isRelative = false) => {\n    const numCapturesToLeft = context.capturingGroups.length;\n    let orphan = false;\n    if (num > numCapturesToLeft) {\n      if (context.skipBackrefValidation) {\n        orphan = true;\n      } else {\n        throw new Error(`Not enough capturing groups defined to the left \"${raw}\"`);\n      }\n    }\n    context.hasNumberedRef = true;\n    return createBackreference(isRelative ? numCapturesToLeft + 1 - num : num, { orphan });\n  };\n  if (hasKWrapper) {\n    const numberedRef = /^(?<sign>-?)0*(?<num>[1-9]\\d*)$/.exec(ref);\n    if (numberedRef) {\n      return fromNum(+numberedRef.groups.num, !!numberedRef.groups.sign);\n    }\n    if (/[-+]/.test(ref)) {\n      throw new Error(`Invalid backref name \"${raw}\"`);\n    }\n    if (!context.namedGroupsByName.has(ref)) {\n      throw new Error(`Group name not defined to the left \"${raw}\"`);\n    }\n    return createBackreference(ref);\n  }\n  return fromNum(+ref);\n}\nfunction parseCharacterClassHyphen(context, state) {\n  const { parent, tokens, walk } = context;\n  const prevSiblingNode = parent.elements.at(-1);\n  const nextToken = tokens[context.current];\n  if (!state.isCheckingRangeEnd && prevSiblingNode && prevSiblingNode.type !== AstTypes.CharacterClass && prevSiblingNode.type !== AstTypes.CharacterClassRange && nextToken && nextToken.type !== TokenTypes.CharacterClassOpen && nextToken.type !== TokenTypes.CharacterClassClose && nextToken.type !== TokenTypes.CharacterClassIntersector) {\n    const nextNode = walk(parent, {\n      ...state,\n      isCheckingRangeEnd: true\n    });\n    if (prevSiblingNode.type === AstTypes.Character && nextNode.type === AstTypes.Character) {\n      parent.elements.pop();\n      return createCharacterClassRange(prevSiblingNode, nextNode);\n    }\n    throw new Error(\"Invalid character class range\");\n  }\n  return createCharacter(45);\n}\nfunction parseCharacterClassOpen(context, state) {\n  const { token, tokens, verbose, walk } = context;\n  const firstClassToken = tokens[context.current];\n  let node = createCharacterClass({ negate: token.negate });\n  const intersection = node.elements[0];\n  let nextToken = throwIfUnclosedCharacterClass(firstClassToken);\n  while (nextToken.type !== TokenTypes.CharacterClassClose) {\n    if (nextToken.type === TokenTypes.CharacterClassIntersector) {\n      intersection.classes.push(createCharacterClass({ negate: false, baseOnly: true }));\n      context.current++;\n    } else {\n      const cc = intersection.classes.at(-1);\n      cc.elements.push(walk(cc, state));\n    }\n    nextToken = throwIfUnclosedCharacterClass(tokens[context.current], firstClassToken);\n  }\n  if (!verbose) {\n    optimizeCharacterClassIntersection(intersection);\n  }\n  if (intersection.classes.length === 1) {\n    const cc = intersection.classes[0];\n    cc.negate = node.negate !== cc.negate;\n    node = cc;\n  }\n  context.current++;\n  return node;\n}\nfunction parseCharacterSet({ token, skipPropertyNameValidation }) {\n  let { kind, negate, value } = token;\n  if (kind === TokenCharacterSetKinds.property) {\n    const normalized = slug(value);\n    if (PosixProperties.has(normalized)) {\n      kind = TokenCharacterSetKinds.posix;\n      value = normalized;\n    } else {\n      return createUnicodeProperty(value, {\n        negate,\n        skipPropertyNameValidation\n      });\n    }\n  }\n  if (kind === TokenCharacterSetKinds.posix) {\n    return {\n      type: AstTypes.CharacterSet,\n      kind: AstCharacterSetKinds.posix,\n      negate,\n      value\n    };\n  }\n  return createCharacterSet(kind, { negate });\n}\nfunction parseGroupOpen(context, state) {\n  const { token, tokens, capturingGroups, namedGroupsByName, skipLookbehindValidation, verbose, walk } = context;\n  let node = createByGroupKind(token);\n  const isAbsentFunction = node.type === AstTypes.AbsentFunction;\n  const isLookbehind = node.kind === AstAssertionKinds.lookbehind;\n  const isNegLookbehind = isLookbehind && node.negate;\n  if (node.type === AstTypes.CapturingGroup) {\n    capturingGroups.push(node);\n    if (node.name) {\n      getOrInsert(namedGroupsByName, node.name, []).push(node);\n    }\n  }\n  if (isAbsentFunction && state.isInAbsentFunction) {\n    throw new Error(\"Nested absent function not supported by Oniguruma\");\n  }\n  let nextToken = throwIfUnclosedGroup(tokens[context.current]);\n  while (nextToken.type !== TokenTypes.GroupClose) {\n    if (nextToken.type === TokenTypes.Alternator) {\n      node.alternatives.push(createAlternative());\n      context.current++;\n    } else {\n      const alt = node.alternatives.at(-1);\n      const child = walk(alt, {\n        ...state,\n        isInAbsentFunction: state.isInAbsentFunction || isAbsentFunction,\n        isInLookbehind: state.isInLookbehind || isLookbehind,\n        isInNegLookbehind: state.isInNegLookbehind || isNegLookbehind\n      });\n      alt.elements.push(child);\n      if ((isLookbehind || state.isInLookbehind) && !skipLookbehindValidation) {\n        const msg = \"Lookbehind includes a pattern not allowed by Oniguruma\";\n        if (isNegLookbehind || state.isInNegLookbehind) {\n          if (child.kind === AstAssertionKinds.lookahead || child.type === AstTypes.CapturingGroup) {\n            throw new Error(msg);\n          }\n        } else {\n          if (child.kind === AstAssertionKinds.lookahead || child.kind === AstAssertionKinds.lookbehind && child.negate) {\n            throw new Error(msg);\n          }\n        }\n      }\n    }\n    nextToken = throwIfUnclosedGroup(tokens[context.current]);\n  }\n  if (!verbose) {\n    node = getOptimizedGroup(node);\n  }\n  context.current++;\n  return node;\n}\nfunction parseQuantifier({ token, parent }) {\n  const { min, max, greedy, possessive: possessive2 } = token;\n  const quantifiedNode = parent.elements.at(-1);\n  if (!quantifiedNode || quantifiedNode.type === AstTypes.Assertion || quantifiedNode.type === AstTypes.Directive) {\n    throw new Error(`Quantifier requires a repeatable token`);\n  }\n  const node = createQuantifier(quantifiedNode, min, max, greedy, possessive2);\n  parent.elements.pop();\n  return node;\n}\nfunction parseSubroutine(context) {\n  const { token, capturingGroups, subroutines } = context;\n  let ref = token.raw.slice(3, -1);\n  const numberedRef = /^(?<sign>[-+]?)0*(?<num>[1-9]\\d*)$/.exec(ref);\n  if (numberedRef) {\n    const num = +numberedRef.groups.num;\n    const numCapturesToLeft = capturingGroups.length;\n    context.hasNumberedRef = true;\n    ref = {\n      \"\": num,\n      \"+\": numCapturesToLeft + num,\n      \"-\": numCapturesToLeft + 1 - num\n    }[numberedRef.groups.sign];\n    if (ref < 1) {\n      throw new Error(\"Invalid subroutine number\");\n    }\n  } else if (ref === \"0\") {\n    ref = 0;\n  }\n  const node = createSubroutine(ref);\n  subroutines.push(node);\n  return node;\n}\nfunction createAbsentFunction(kind) {\n  if (kind !== AstAbsentFunctionKinds.repeater) {\n    throw new Error(`Unexpected absent function kind \"${kind}\"`);\n  }\n  return {\n    type: AstTypes.AbsentFunction,\n    kind,\n    alternatives: [createAlternative()]\n  };\n}\nfunction createAlternative() {\n  return {\n    type: AstTypes.Alternative,\n    elements: []\n  };\n}\nfunction createAssertion(kind, options) {\n  const negate = !!options?.negate;\n  return {\n    type: AstTypes.Assertion,\n    kind,\n    ...kind === AstAssertionKinds.word_boundary && { negate }\n  };\n}\nfunction createAssertionFromToken({ kind }) {\n  return createAssertion(\n    throwIfNot({\n      \"^\": AstAssertionKinds.line_start,\n      \"$\": AstAssertionKinds.line_end,\n      \"\\\\A\": AstAssertionKinds.string_start,\n      \"\\\\b\": AstAssertionKinds.word_boundary,\n      \"\\\\B\": AstAssertionKinds.word_boundary,\n      \"\\\\G\": AstAssertionKinds.search_start,\n      \"\\\\z\": AstAssertionKinds.string_end,\n      \"\\\\Z\": AstAssertionKinds.string_end_newline\n    }[kind], `Unexpected assertion kind \"${kind}\"`),\n    { negate: kind === r`\\B` }\n  );\n}\nfunction createBackreference(ref, options) {\n  const orphan = !!options?.orphan;\n  return {\n    type: AstTypes.Backreference,\n    ...orphan && { orphan },\n    ref\n  };\n}\nfunction createByGroupKind({ flags, kind, name, negate, number }) {\n  switch (kind) {\n    case TokenGroupKinds.absent_repeater:\n      return createAbsentFunction(AstAbsentFunctionKinds.repeater);\n    case TokenGroupKinds.atomic:\n      return createGroup({ atomic: true });\n    case TokenGroupKinds.capturing:\n      return createCapturingGroup(number, name);\n    case TokenGroupKinds.group:\n      return createGroup({ flags });\n    case TokenGroupKinds.lookahead:\n    case TokenGroupKinds.lookbehind:\n      return createLookaround({\n        behind: kind === TokenGroupKinds.lookbehind,\n        negate\n      });\n    default:\n      throw new Error(`Unexpected group kind \"${kind}\"`);\n  }\n}\nfunction createCapturingGroup(number, name) {\n  const hasName = name !== void 0;\n  if (hasName && !isValidGroupNameOniguruma(name)) {\n    throw new Error(`Group name \"${name}\" invalid in Oniguruma`);\n  }\n  return {\n    type: AstTypes.CapturingGroup,\n    number,\n    ...hasName && { name },\n    alternatives: [createAlternative()]\n  };\n}\nfunction createCharacter(charCode, options) {\n  const opts = {\n    useLastValid: false,\n    ...options\n  };\n  if (charCode > 1114111) {\n    const hex = charCode.toString(16);\n    if (opts.useLastValid) {\n      charCode = 1114111;\n    } else if (charCode > 1310719) {\n      throw new Error(`Invalid code point out of range \"\\\\x{${hex}}\"`);\n    } else {\n      throw new Error(`Invalid code point out of range in JS \"\\\\x{${hex}}\"`);\n    }\n  }\n  return {\n    type: AstTypes.Character,\n    value: charCode\n  };\n}\nfunction createCharacterClass(options) {\n  const opts = {\n    baseOnly: false,\n    negate: false,\n    ...options\n  };\n  return {\n    type: AstTypes.CharacterClass,\n    negate: opts.negate,\n    elements: opts.baseOnly ? [] : [createCharacterClassIntersection()]\n  };\n}\nfunction createCharacterClassIntersection() {\n  return {\n    type: AstTypes.CharacterClassIntersection,\n    classes: [createCharacterClass({ negate: false, baseOnly: true })]\n  };\n}\nfunction createCharacterClassRange(min, max) {\n  if (max.value < min.value) {\n    throw new Error(\"Character class range out of order\");\n  }\n  return {\n    type: AstTypes.CharacterClassRange,\n    min,\n    max\n  };\n}\nfunction createCharacterSet(kind, { negate }) {\n  const node = {\n    type: AstTypes.CharacterSet,\n    kind: throwIfNot(AstCharacterSetKinds[kind], `Unexpected character set kind \"${kind}\"`)\n  };\n  if (kind === TokenCharacterSetKinds.digit || kind === TokenCharacterSetKinds.hex || kind === TokenCharacterSetKinds.space || kind === TokenCharacterSetKinds.word) {\n    node.negate = negate;\n  }\n  return node;\n}\nfunction createDirectiveFromToken({ kind, flags }) {\n  const node = {\n    type: AstTypes.Directive,\n    kind: throwIfNot(AstDirectiveKinds[kind], `Unexpected directive kind \"${kind}\"`)\n  };\n  if (kind === TokenDirectiveKinds.flags) {\n    node.flags = flags;\n  }\n  return node;\n}\nfunction createFlags({ ignoreCase, dotAll, extended, digitIsAscii, spaceIsAscii, wordIsAscii }) {\n  return {\n    type: AstTypes.Flags,\n    ignoreCase,\n    dotAll,\n    extended,\n    digitIsAscii,\n    spaceIsAscii,\n    wordIsAscii\n  };\n}\nfunction createGroup(options) {\n  const atomic2 = options?.atomic;\n  const flags = options?.flags;\n  return {\n    type: AstTypes.Group,\n    ...atomic2 && { atomic: atomic2 },\n    ...flags && { flags },\n    alternatives: [createAlternative()]\n  };\n}\nfunction createLookaround(options) {\n  const opts = {\n    behind: false,\n    negate: false,\n    ...options\n  };\n  return {\n    type: AstTypes.Assertion,\n    kind: opts.behind ? AstAssertionKinds.lookbehind : AstAssertionKinds.lookahead,\n    negate: opts.negate,\n    alternatives: [createAlternative()]\n  };\n}\nfunction createPattern() {\n  return {\n    type: AstTypes.Pattern,\n    alternatives: [createAlternative()]\n  };\n}\nfunction createQuantifier(element, min, max, greedy = true, possessive2 = false) {\n  const node = {\n    type: AstTypes.Quantifier,\n    min,\n    max,\n    greedy,\n    possessive: possessive2,\n    element\n  };\n  if (max < min) {\n    return {\n      ...node,\n      min: max,\n      max: min,\n      possessive: true\n    };\n  }\n  return node;\n}\nfunction createRegex(pattern, flags) {\n  return {\n    type: AstTypes.Regex,\n    pattern,\n    flags\n  };\n}\nfunction createSubroutine(ref) {\n  return {\n    type: AstTypes.Subroutine,\n    ref\n  };\n}\nfunction createUnicodeProperty(value, options) {\n  const opts = {\n    negate: false,\n    skipPropertyNameValidation: false,\n    ...options\n  };\n  return {\n    type: AstTypes.CharacterSet,\n    kind: AstCharacterSetKinds.property,\n    value: opts.skipPropertyNameValidation ? value : getJsUnicodePropertyName(value),\n    negate: opts.negate\n  };\n}\nfunction createVariableLengthCharacterSet(kind) {\n  return {\n    type: AstTypes.VariableLengthCharacterSet,\n    kind: throwIfNot({\n      \"\\\\R\": AstVariableLengthCharacterSetKinds.newline,\n      \"\\\\X\": AstVariableLengthCharacterSetKinds.grapheme\n    }[kind], `Unexpected varcharset kind \"${kind}\"`)\n  };\n}\nfunction getJsUnicodePropertyName(value) {\n  const slugged = slug(value);\n  if (JsUnicodePropertiesOfStringsMap.has(slugged)) {\n    throw new Error(r`Unicode property \"\\p{${value}}\" unsupported in Oniguruma`);\n  }\n  const jsName = JsUnicodePropertiesMap.get(slugged);\n  if (jsName) {\n    return jsName;\n  }\n  return value.trim().replace(/[- _]+/g, \"_\").replace(/[A-Z][a-z]+(?=[A-Z])/g, \"$&_\").replace(/[A-Za-z]+/g, (m) => m[0].toUpperCase() + m.slice(1).toLowerCase());\n}\nfunction getOptimizedGroup(node) {\n  const firstAltFirstEl = node.alternatives[0].elements[0];\n  if (node.type === AstTypes.Group && hasOnlyChild(node, (kid) => kid.type === AstTypes.Group) && !(node.atomic && firstAltFirstEl.flags) && !(node.flags && (firstAltFirstEl.atomic || firstAltFirstEl.flags))) {\n    if (node.atomic) {\n      firstAltFirstEl.atomic = true;\n    } else if (node.flags) {\n      firstAltFirstEl.flags = node.flags;\n    }\n    return firstAltFirstEl;\n  }\n  return node;\n}\nfunction isValidGroupNameOniguruma(name) {\n  return /^[\\p{Alpha}\\p{Pc}][^)]*$/u.test(name);\n}\nfunction optimizeCharacterClassIntersection(intersection) {\n  for (let i = 0; i < intersection.classes.length; i++) {\n    const cc = intersection.classes[i];\n    const firstChild = cc.elements[0];\n    if (cc.elements.length === 1 && firstChild.type === AstTypes.CharacterClass) {\n      intersection.classes[i] = firstChild;\n      firstChild.negate = cc.negate !== firstChild.negate;\n    }\n  }\n}\nfunction throwIfUnclosedCharacterClass(token, firstClassToken) {\n  return throwIfNot(\n    token,\n    // Easier to understand error when applicable\n    `${firstClassToken?.value === 93 ? \"Empty\" : \"Unclosed\"} character class`\n  );\n}\nfunction throwIfUnclosedGroup(token) {\n  return throwIfNot(token, \"Unclosed group\");\n}\n\n// src/transform.js\n\nfunction transform(ast, options) {\n  const opts = {\n    // A couple edge cases exist where options `accuracy` and `bestEffortTarget` are used:\n    // - `VariableLengthCharacterSet` kind `grapheme` (`\\X`): An exact representation would require\n    //   heavy Unicode data; a best-effort approximation requires knowing the target.\n    // - `CharacterSet` kind `posix` with values `graph` and `print`: Their complex Unicode-based\n    //   representations would be hard to change to ASCII-based after the fact in the generator\n    //   based on `target`/`accuracy`, so produce the appropriate structure here.\n    accuracy: \"default\",\n    asciiWordBoundaries: false,\n    avoidSubclass: false,\n    bestEffortTarget: \"ES2025\",\n    ...options\n  };\n  const firstPassState = {\n    accuracy: opts.accuracy,\n    asciiWordBoundaries: opts.asciiWordBoundaries,\n    avoidSubclass: opts.avoidSubclass,\n    flagDirectivesByAlt: /* @__PURE__ */ new Map(),\n    jsGroupNameMap: /* @__PURE__ */ new Map(),\n    minTargetEs2024: isMinTarget(opts.bestEffortTarget, \"ES2024\"),\n    passedLookbehind: false,\n    strategy: null,\n    // Subroutines can appear before the groups they ref, so collect reffed nodes for a second pass \n    subroutineRefMap: /* @__PURE__ */ new Map(),\n    supportedGNodes: /* @__PURE__ */ new Set(),\n    digitIsAscii: ast.flags.digitIsAscii,\n    spaceIsAscii: ast.flags.spaceIsAscii,\n    wordIsAscii: ast.flags.wordIsAscii\n  };\n  traverse({ node: ast }, firstPassState, FirstPassVisitor);\n  const globalFlags = {\n    dotAll: ast.flags.dotAll,\n    ignoreCase: ast.flags.ignoreCase\n  };\n  const secondPassState = {\n    currentFlags: globalFlags,\n    prevFlags: null,\n    globalFlags,\n    groupOriginByCopy: /* @__PURE__ */ new Map(),\n    groupsByName: /* @__PURE__ */ new Map(),\n    multiplexCapturesToLeftByRef: /* @__PURE__ */ new Map(),\n    openRefs: /* @__PURE__ */ new Map(),\n    reffedNodesByReferencer: /* @__PURE__ */ new Map(),\n    subroutineRefMap: firstPassState.subroutineRefMap\n  };\n  traverse({ node: ast }, secondPassState, SecondPassVisitor);\n  const thirdPassState = {\n    groupsByName: secondPassState.groupsByName,\n    highestOrphanBackref: 0,\n    numCapturesToLeft: 0,\n    reffedNodesByReferencer: secondPassState.reffedNodesByReferencer\n  };\n  traverse({ node: ast }, thirdPassState, ThirdPassVisitor);\n  ast._originMap = secondPassState.groupOriginByCopy;\n  ast._strategy = firstPassState.strategy;\n  return ast;\n}\nvar FirstPassVisitor = {\n  AbsentFunction({ node, replaceWith }) {\n    const group = prepContainer(createGroup(), [\n      adoptAndSwapKids(createLookaround({ negate: true }), node.alternatives),\n      createUnicodeProperty(\"Any\")\n    ]);\n    const quantifier = createQuantifier(group, 0, Infinity);\n    group.parent = quantifier;\n    replaceWith(prepContainer(createGroup(), [quantifier]));\n  },\n  Alternative: {\n    enter({ node, parent, key }, { flagDirectivesByAlt }) {\n      const flagDirectives = node.elements.filter((el) => el.kind === AstDirectiveKinds.flags);\n      for (let i = key + 1; i < parent.alternatives.length; i++) {\n        const forwardSiblingAlt = parent.alternatives[i];\n        getOrInsert(flagDirectivesByAlt, forwardSiblingAlt, []).push(...flagDirectives);\n      }\n    },\n    exit({ node }, { flagDirectivesByAlt }) {\n      if (flagDirectivesByAlt.get(node)?.length) {\n        const flags = getCombinedFlagModsFromFlagNodes(flagDirectivesByAlt.get(node));\n        if (flags) {\n          const flagGroup = prepContainer(createGroup({ flags }), node.elements);\n          flagGroup.parent = node;\n          node.elements = [flagGroup];\n        }\n      }\n    }\n  },\n  Assertion({ node, key, container, ast, remove, replaceWith }, state) {\n    const { kind, negate } = node;\n    const { asciiWordBoundaries, avoidSubclass, supportedGNodes, wordIsAscii } = state;\n    if (kind === AstAssertionKinds.line_end) {\n      replaceWith(parseFragment(r`(?=\\z|\\n)`));\n    } else if (kind === AstAssertionKinds.line_start) {\n      replaceWith(parseFragment(r`(?<=\\A|\\n(?!\\z))`, { skipLookbehindValidation: true }));\n    } else if (kind === AstAssertionKinds.lookbehind) {\n      state.passedLookbehind = true;\n    } else if (kind === AstAssertionKinds.search_start) {\n      if (supportedGNodes.has(node)) {\n        ast.flags.sticky = true;\n        remove();\n      } else {\n        const prev = container[key - 1];\n        if (prev && isAlwaysNonZeroLength(prev)) {\n          replaceWith(prepContainer(createLookaround({ negate: true })));\n        } else if (avoidSubclass) {\n          throw new Error(r`Uses \"\\G\" in a way that requires a subclass`);\n        } else {\n          replaceWith(createAssertion(AstAssertionKinds.string_start));\n          state.strategy = \"clip_search\";\n        }\n      }\n    } else if (kind === AstAssertionKinds.string_end_newline) {\n      replaceWith(parseFragment(r`(?=\\n?\\z)`));\n    } else if (kind === AstAssertionKinds.word_boundary && !wordIsAscii && !asciiWordBoundaries) {\n      const b = `(?:(?<=${defaultWordChar})(?!${defaultWordChar})|(?<!${defaultWordChar})(?=${defaultWordChar}))`;\n      const B = `(?:(?<=${defaultWordChar})(?=${defaultWordChar})|(?<!${defaultWordChar})(?!${defaultWordChar}))`;\n      replaceWith(parseFragment(negate ? B : b));\n    }\n  },\n  Backreference({ node }, { jsGroupNameMap }) {\n    let { ref } = node;\n    if (typeof ref === \"string\" && !isValidGroupNameJs(ref)) {\n      ref = getAndStoreJsGroupName(ref, jsGroupNameMap);\n      node.ref = ref;\n    }\n  },\n  CapturingGroup({ node }, { jsGroupNameMap, subroutineRefMap }) {\n    let { name } = node;\n    if (name && !isValidGroupNameJs(name)) {\n      name = getAndStoreJsGroupName(name, jsGroupNameMap);\n      node.name = name;\n    }\n    subroutineRefMap.set(node.number, node);\n    if (name) {\n      subroutineRefMap.set(name, node);\n    }\n  },\n  CharacterSet({ node, replaceWith }, { accuracy, minTargetEs2024, digitIsAscii, spaceIsAscii, wordIsAscii }) {\n    const { kind, negate, value } = node;\n    if (digitIsAscii && (kind === AstCharacterSetKinds.digit || value === \"digit\")) {\n      replaceWith(createCharacterSet(AstCharacterSetKinds.digit, { negate }));\n      return;\n    }\n    if (spaceIsAscii && (kind === AstCharacterSetKinds.space || value === \"space\")) {\n      replaceWith(setNegate(parseFragment(asciiSpaceChar), negate));\n      return;\n    }\n    if (wordIsAscii && (kind === AstCharacterSetKinds.word || value === \"word\")) {\n      replaceWith(createCharacterSet(AstCharacterSetKinds.word, { negate }));\n      return;\n    }\n    if (kind === AstCharacterSetKinds.any) {\n      replaceWith(createUnicodeProperty(\"Any\"));\n    } else if (kind === AstCharacterSetKinds.digit) {\n      replaceWith(createUnicodeProperty(\"Nd\", { negate }));\n    } else if (kind === AstCharacterSetKinds.hex) {\n      replaceWith(createUnicodeProperty(\"AHex\", { negate }));\n    } else if (kind === AstCharacterSetKinds.non_newline) {\n      replaceWith(parseFragment(r`[^\\n]`));\n    } else if (kind === AstCharacterSetKinds.space) {\n      replaceWith(createUnicodeProperty(\"space\", { negate }));\n    } else if (kind === AstCharacterSetKinds.word) {\n      replaceWith(setNegate(parseFragment(defaultWordChar), negate));\n    } else if (kind === AstCharacterSetKinds.property) {\n      if (!JsUnicodeProperties.has(value)) {\n        node.key = \"sc\";\n      }\n    } else if (kind === AstCharacterSetKinds.posix) {\n      if (!minTargetEs2024 && (value === \"graph\" || value === \"print\")) {\n        if (accuracy === \"strict\") {\n          throw new Error(`POSIX class \"${value}\" requires min target ES2024 or non-strict accuracy`);\n        }\n        let ascii = {\n          graph: \"!-~\",\n          print: \" -~\"\n        }[value];\n        if (negate) {\n          ascii = `\\0-${cp(ascii.codePointAt(0) - 1)}${cp(ascii.codePointAt(2) + 1)}-\\u{10FFFF}`;\n        }\n        replaceWith(parseFragment(`[${ascii}]`));\n      } else {\n        replaceWith(setNegate(parseFragment(PosixClassesMap.get(value)), negate));\n      }\n    }\n  },\n  Directive(path, state) {\n    const { node, parent, ast, remove, replaceWith, removeAllPrevSiblings, removeAllNextSiblings } = path;\n    const { kind, flags } = node;\n    if (kind === AstDirectiveKinds.flags) {\n      if (!flags.enable && !flags.disable) {\n        remove();\n      } else {\n        const flagGroup = prepContainer(createGroup({ flags }), removeAllNextSiblings());\n        replaceWith(flagGroup);\n        traverseReplacement(flagGroup, path, state, FirstPassVisitor);\n      }\n    } else if (kind === AstDirectiveKinds.keep) {\n      const firstAltFirstEl = ast.pattern.alternatives[0].elements[0];\n      const hasWrapperGroup = (\n        // Not emulatable if within a `CapturingGroup`\n        hasOnlyChild(ast.pattern, (kid) => kid.type === AstTypes.Group) && firstAltFirstEl.alternatives.length === 1\n      );\n      const topLevel = hasWrapperGroup ? firstAltFirstEl : ast.pattern;\n      if (parent.parent !== topLevel || topLevel.alternatives.length > 1) {\n        throw new Error(r`Uses \"\\K\" in a way that's unsupported`);\n      }\n      replaceWith(prepContainer(createLookaround({ behind: true }), removeAllPrevSiblings()));\n    }\n  },\n  Flags({ node, parent }) {\n    [\n      \"digitIsAscii\",\n      // Flag D\n      \"extended\",\n      // Flag x\n      \"spaceIsAscii\",\n      // Flag S\n      \"wordIsAscii\"\n      // Flag W\n    ].forEach((f) => delete node[f]);\n    Object.assign(node, {\n      // JS flag g; no Onig equiv\n      global: false,\n      // JS flag d; no Onig equiv\n      hasIndices: false,\n      // JS flag m; no Onig equiv but its behavior is always on in Onig. Onig's only line break\n      // char is line feed, unlike JS, so this flag isn't used since it would produce inaccurate\n      // results (also allows `^` and `$` to be used in the generator for string start and end)\n      multiline: false,\n      // JS flag y; no Onig equiv, but used for `\\G` emulation\n      sticky: node.sticky ?? false\n      // Note: Regex+ doesn't allow explicitly adding flags it handles implicitly, so leave out\n      // properties `unicode` (JS flag u) and `unicodeSets` (JS flag v). Keep the existing values\n      // for `ignoreCase` (flag i) and `dotAll` (JS flag s, but Onig flag m)\n    });\n    parent.options = {\n      disable: {\n        // Onig uses different rules for flag x than Regex+, so disable the implicit flag\n        x: true,\n        // Onig has no flag to control \"named capture only\" mode but contextually applies its\n        // behavior when named capturing is used, so disable Regex+'s implicit flag for it\n        n: true\n      },\n      force: {\n        // Always add flag v because we're generating an AST that relies on it (it enables JS\n        // support for Onig features nested classes, set intersection, Unicode properties, etc.).\n        // However, the generator might disable flag v based on its `target` option\n        v: true\n      }\n    };\n  },\n  Group({ node }) {\n    if (!node.flags) {\n      return;\n    }\n    const { enable, disable } = node.flags;\n    enable?.extended && delete enable.extended;\n    disable?.extended && delete disable.extended;\n    enable?.dotAll && disable?.dotAll && delete enable.dotAll;\n    enable?.ignoreCase && disable?.ignoreCase && delete enable.ignoreCase;\n    enable && !Object.keys(enable).length && delete node.flags.enable;\n    disable && !Object.keys(disable).length && delete node.flags.disable;\n    !node.flags.enable && !node.flags.disable && delete node.flags;\n  },\n  Pattern: {\n    enter({ node }, { supportedGNodes }) {\n      const leadingGs = [];\n      let hasAltWithLeadG = false;\n      let hasAltWithoutLeadG = false;\n      for (const alt of node.alternatives) {\n        if (alt.elements.length === 1 && alt.elements[0].kind === AstAssertionKinds.search_start) {\n          alt.elements.pop();\n        } else {\n          const leadingG = getLeadingG(alt.elements);\n          if (leadingG) {\n            hasAltWithLeadG = true;\n            Array.isArray(leadingG) ? leadingGs.push(...leadingG) : leadingGs.push(leadingG);\n          } else {\n            hasAltWithoutLeadG = true;\n          }\n        }\n      }\n      if (hasAltWithLeadG && !hasAltWithoutLeadG) {\n        leadingGs.forEach((g) => supportedGNodes.add(g));\n      }\n    },\n    exit(_, { accuracy, passedLookbehind, strategy }) {\n      if (accuracy === \"strict\" && passedLookbehind && strategy) {\n        throw new Error(r`Uses \"\\G\" in a way that requires non-strict accuracy`);\n      }\n    }\n  },\n  Quantifier({ node }) {\n    if (node.element.type === AstTypes.Quantifier) {\n      const group = prepContainer(createGroup(), [node.element]);\n      group.parent = node;\n      node.element = group;\n    }\n  },\n  Subroutine({ node }, { jsGroupNameMap }) {\n    let { ref } = node;\n    if (typeof ref === \"string\" && !isValidGroupNameJs(ref)) {\n      ref = getAndStoreJsGroupName(ref, jsGroupNameMap);\n      node.ref = ref;\n    }\n  },\n  VariableLengthCharacterSet({ node, replaceWith }, { accuracy, minTargetEs2024 }) {\n    const { kind } = node;\n    if (kind === AstVariableLengthCharacterSetKinds.newline) {\n      replaceWith(parseFragment(\"(?>\\r\\n?|[\\n\\v\\f\\x85\\u2028\\u2029])\"));\n    } else if (kind === AstVariableLengthCharacterSetKinds.grapheme) {\n      if (accuracy === \"strict\") {\n        throw new Error(r`Use of \"\\X\" requires non-strict accuracy`);\n      }\n      const emoji = minTargetEs2024 ? r`\\p{RGI_Emoji}` : (0,emoji_regex_xs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().source.replace(/\\\\u\\{/g, `\\\\x{`);\n      replaceWith(parseFragment(r`(?>\\r\\n|${emoji}|\\P{M}\\p{M}*)`, { skipPropertyNameValidation: true }));\n    } else {\n      throw new Error(`Unexpected varcharset kind \"${kind}\"`);\n    }\n  }\n};\nvar SecondPassVisitor = {\n  Backreference({ node }, { multiplexCapturesToLeftByRef, reffedNodesByReferencer }) {\n    const { orphan, ref } = node;\n    if (!orphan) {\n      reffedNodesByReferencer.set(node, [...multiplexCapturesToLeftByRef.get(ref).map(({ node: node2 }) => node2)]);\n    }\n  },\n  CapturingGroup: {\n    enter({\n      node,\n      replaceWith,\n      skip\n    }, {\n      groupOriginByCopy,\n      groupsByName,\n      multiplexCapturesToLeftByRef,\n      openRefs,\n      reffedNodesByReferencer\n    }) {\n      const origin = groupOriginByCopy.get(node);\n      if (origin && openRefs.has(node.number)) {\n        const recursion2 = createRecursion(node.number);\n        reffedNodesByReferencer.set(recursion2, openRefs.get(node.number));\n        replaceWith(recursion2);\n        skip();\n        return;\n      }\n      openRefs.set(node.number, node);\n      multiplexCapturesToLeftByRef.set(node.number, []);\n      if (node.name) {\n        getOrInsert(multiplexCapturesToLeftByRef, node.name, []);\n      }\n      const multiplexNodes = multiplexCapturesToLeftByRef.get(node.name ?? node.number);\n      for (let i = 0; i < multiplexNodes.length; i++) {\n        const multiplex = multiplexNodes[i];\n        if (\n          // This group is from subroutine expansion, and there's a multiplex value from either the\n          // origin node or a prior subroutine expansion group with the same origin\n          origin === multiplex.node || origin && origin === multiplex.origin || // This group is not from subroutine expansion, and it comes after a subroutine expansion\n          // group that refers to this group\n          node === multiplex.origin\n        ) {\n          multiplexNodes.splice(i, 1);\n          break;\n        }\n      }\n      multiplexCapturesToLeftByRef.get(node.number).push({ node, origin });\n      if (node.name) {\n        multiplexCapturesToLeftByRef.get(node.name).push({ node, origin });\n      }\n      if (node.name) {\n        const groupsWithSameName = getOrInsert(groupsByName, node.name, /* @__PURE__ */ new Map());\n        let hasDuplicateNameToRemove = false;\n        if (origin) {\n          hasDuplicateNameToRemove = true;\n        } else {\n          for (const groupInfo of groupsWithSameName.values()) {\n            if (!groupInfo.hasDuplicateNameToRemove) {\n              hasDuplicateNameToRemove = true;\n              break;\n            }\n          }\n        }\n        groupsByName.get(node.name).set(node, { node, hasDuplicateNameToRemove });\n      }\n    },\n    exit({ node }, { openRefs }) {\n      openRefs.delete(node.number);\n    }\n  },\n  Group: {\n    enter({ node }, state) {\n      state.prevFlags = state.currentFlags;\n      if (node.flags) {\n        state.currentFlags = getNewCurrentFlags(state.currentFlags, node.flags);\n      }\n    },\n    exit(_, state) {\n      state.currentFlags = state.prevFlags;\n    }\n  },\n  Recursion({ node, parent }, { reffedNodesByReferencer }) {\n    const { ref } = node;\n    let reffed = parent;\n    while (reffed = reffed.parent) {\n      if (reffed.type === AstTypes.CapturingGroup && (reffed.name === ref || reffed.number === ref)) {\n        break;\n      }\n    }\n    reffedNodesByReferencer.set(node, reffed);\n  },\n  Subroutine(path, state) {\n    const { node, replaceWith } = path;\n    const { ref } = node;\n    const reffedGroupNode = state.subroutineRefMap.get(ref);\n    const isGlobalRecursion = ref === 0;\n    const expandedSubroutine = isGlobalRecursion ? createRecursion(0) : (\n      // The reffed group might itself contain subroutines, which are expanded during sub-traversal\n      cloneCapturingGroup(reffedGroupNode, state.groupOriginByCopy, null)\n    );\n    let replacement = expandedSubroutine;\n    if (!isGlobalRecursion) {\n      const reffedGroupFlagMods = getCombinedFlagModsFromFlagNodes(getAllParents(reffedGroupNode, (node2) => {\n        return node2.type === AstTypes.Group && !!node2.flags;\n      }));\n      const reffedGroupFlags = reffedGroupFlagMods ? getNewCurrentFlags(state.globalFlags, reffedGroupFlagMods) : state.globalFlags;\n      if (!areFlagsEqual(reffedGroupFlags, state.currentFlags)) {\n        replacement = prepContainer(createGroup({\n          flags: getFlagModsFromFlags(reffedGroupFlags)\n        }), [expandedSubroutine]);\n      }\n    }\n    replaceWith(replacement);\n    if (!isGlobalRecursion) {\n      traverseReplacement(replacement, path, state, SecondPassVisitor);\n    }\n  }\n};\nvar ThirdPassVisitor = {\n  Backreference({ node, replaceWith }, state) {\n    if (node.orphan) {\n      state.highestOrphanBackref = Math.max(state.highestOrphanBackref, node.ref);\n      return;\n    }\n    const reffedNodes = state.reffedNodesByReferencer.get(node);\n    const participants = reffedNodes.filter((reffed) => canParticipateWithNode(reffed, node));\n    if (!participants.length) {\n      replaceWith(prepContainer(createLookaround({ negate: true })));\n    } else if (participants.length > 1) {\n      const alts = participants.map((reffed) => adoptAndSwapKids(\n        createAlternative(),\n        [createBackreference(reffed.number)]\n      ));\n      replaceWith(adoptAndSwapKids(createGroup(), alts));\n    } else {\n      node.ref = participants[0].number;\n    }\n  },\n  CapturingGroup({ node }, state) {\n    node.number = ++state.numCapturesToLeft;\n    if (node.name) {\n      if (state.groupsByName.get(node.name).get(node).hasDuplicateNameToRemove) {\n        delete node.name;\n      }\n    }\n  },\n  Recursion({ node }, state) {\n    if (node.ref === 0) {\n      return;\n    }\n    node.ref = state.reffedNodesByReferencer.get(node).number;\n  },\n  Regex: {\n    exit({ node }, state) {\n      const numCapsNeeded = Math.max(state.highestOrphanBackref - state.numCapturesToLeft, 0);\n      for (let i = 0; i < numCapsNeeded; i++) {\n        const emptyCapture = createCapturingGroup();\n        node.pattern.alternatives.at(-1).elements.push(emptyCapture);\n      }\n    }\n  }\n};\nvar asciiSpaceChar = \"[\t-\\r ]\";\nvar defaultWordChar = r`[\\p{L}\\p{M}\\p{N}\\p{Pc}]`;\nfunction adoptAndSwapKids(parent, kids) {\n  kids.forEach((kid) => kid.parent = parent);\n  parent[getContainerAccessor(parent)] = kids;\n  return parent;\n}\nfunction areFlagsEqual(a, b) {\n  return a.dotAll === b.dotAll && a.ignoreCase === b.ignoreCase;\n}\nfunction canParticipateWithNode(capture, node) {\n  let rightmostPoint = node;\n  do {\n    if (rightmostPoint.type === AstTypes.Pattern) {\n      return false;\n    }\n    if (rightmostPoint.type === AstTypes.Alternative) {\n      continue;\n    }\n    if (rightmostPoint === capture) {\n      return false;\n    }\n    const kidsOfParent = getKids(rightmostPoint.parent);\n    for (const kid of kidsOfParent) {\n      if (kid === rightmostPoint) {\n        break;\n      }\n      if (kid === capture) {\n        return true;\n      }\n      if (hasDescendant(kid, capture)) {\n        return true;\n      }\n    }\n  } while (rightmostPoint = rightmostPoint.parent);\n  throw new Error(\"Unexpected path\");\n}\nfunction cloneCapturingGroup(obj, originMap, up, up2) {\n  const store = Array.isArray(obj) ? [] : {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (key === \"parent\") {\n      store.parent = Array.isArray(up) ? up2 : up;\n    } else if (value && typeof value === \"object\") {\n      store[key] = cloneCapturingGroup(value, originMap, store, up);\n    } else {\n      if (key === \"type\" && value === AstTypes.CapturingGroup) {\n        originMap.set(store, originMap.get(obj) ?? obj);\n      }\n      store[key] = value;\n    }\n  }\n  return store;\n}\nfunction createRecursion(ref) {\n  return {\n    type: AstTypes.Recursion,\n    ref\n  };\n}\nfunction getAllParents(node, filterFn) {\n  const results = [];\n  while (node = node.parent) {\n    if (!filterFn || filterFn(node)) {\n      results.push(node);\n    }\n  }\n  return results;\n}\nfunction getAndStoreJsGroupName(name, map) {\n  if (map.has(name)) {\n    return map.get(name);\n  }\n  const jsName = `$${map.size}_${name.replace(/^[^$_\\p{IDS}]|[^$\\u200C\\u200D\\p{IDC}]/ug, \"_\")}`;\n  map.set(name, jsName);\n  return jsName;\n}\nfunction getContainerAccessor(node) {\n  for (const accessor of [\"alternatives\", \"classes\", \"elements\"]) {\n    if (node[accessor]) {\n      return accessor;\n    }\n  }\n  return null;\n}\nfunction getCombinedFlagModsFromFlagNodes(flagNodes) {\n  const flagProps = [\"dotAll\", \"ignoreCase\"];\n  const combinedFlags = { enable: {}, disable: {} };\n  flagNodes.forEach(({ flags }) => {\n    flagProps.forEach((prop) => {\n      if (flags.enable?.[prop]) {\n        delete combinedFlags.disable[prop];\n        combinedFlags.enable[prop] = true;\n      }\n      if (flags.disable?.[prop]) {\n        combinedFlags.disable[prop] = true;\n      }\n    });\n  });\n  if (!Object.keys(combinedFlags.enable).length) {\n    delete combinedFlags.enable;\n  }\n  if (!Object.keys(combinedFlags.disable).length) {\n    delete combinedFlags.disable;\n  }\n  if (combinedFlags.enable || combinedFlags.disable) {\n    return combinedFlags;\n  }\n  return null;\n}\nfunction getFlagModsFromFlags({ dotAll, ignoreCase }) {\n  const mods = {};\n  if (dotAll || ignoreCase) {\n    mods.enable = {};\n    dotAll && (mods.enable.dotAll = true);\n    ignoreCase && (mods.enable.ignoreCase = true);\n  }\n  if (!dotAll || !ignoreCase) {\n    mods.disable = {};\n    !dotAll && (mods.disable.dotAll = true);\n    !ignoreCase && (mods.disable.ignoreCase = true);\n  }\n  return mods;\n}\nfunction getKids(node) {\n  if (!node) {\n    throw new Error(\"Node expected\");\n  }\n  if (node.type === AstTypes.Quantifier) {\n    return [node.element];\n  }\n  const accessor = getContainerAccessor(node);\n  return accessor && node[accessor];\n}\nfunction getLeadingG(els) {\n  const firstToConsider = els.find((el) => el.kind === AstAssertionKinds.search_start || isLoneGLookaround(el, { negate: false }) || !isAlwaysZeroLength(el));\n  if (!firstToConsider) {\n    return null;\n  }\n  if (firstToConsider.kind === AstAssertionKinds.search_start) {\n    return firstToConsider;\n  }\n  if (isLookaround(firstToConsider)) {\n    return firstToConsider.alternatives[0].elements[0];\n  }\n  if (isConsumptiveGroup(firstToConsider)) {\n    const gNodesForGroup = [];\n    for (const alt of firstToConsider.alternatives) {\n      const leadingG = getLeadingG(alt.elements);\n      if (!leadingG) {\n        return null;\n      }\n      Array.isArray(leadingG) ? gNodesForGroup.push(...leadingG) : gNodesForGroup.push(leadingG);\n    }\n    return gNodesForGroup;\n  }\n  return null;\n}\nfunction hasDescendant(node, descendant) {\n  const kids = getKids(node) ?? [];\n  for (const kid of kids) {\n    if (kid === descendant || hasDescendant(kid, descendant)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isLoneGLookaround(node, options) {\n  const opts = {\n    negate: null,\n    ...options\n  };\n  return isLookaround(node) && (opts.negate === null || node.negate === opts.negate) && hasOnlyChild(node, (kid) => kid.kind === AstAssertionKinds.search_start);\n}\nfunction isValidGroupNameJs(name) {\n  return /^[$_\\p{IDS}][$\\u200C\\u200D\\p{IDC}]*$/u.test(name);\n}\nfunction parseFragment(pattern, options) {\n  const ast = parse(tokenize(pattern), options);\n  const alts = ast.pattern.alternatives;\n  if (alts.length > 1 || alts[0].elements.length > 1) {\n    return adoptAndSwapKids(createGroup(), alts);\n  }\n  return alts[0].elements[0];\n}\nfunction prepContainer(node, kids) {\n  const accessor = getContainerAccessor(node);\n  node[accessor][0].parent = node;\n  if (kids) {\n    adoptAndSwapKids(node[accessor][0], kids);\n  }\n  return node;\n}\nfunction setNegate(node, negate) {\n  node.negate = negate;\n  return node;\n}\nfunction traverseReplacement(replacement, { parent, key, container }, state, visitor) {\n  traverse({\n    // Don't use the `node` from `path`\n    node: replacement,\n    parent,\n    key,\n    container\n  }, state, visitor);\n}\n\n// src/generate.js\nfunction generate(ast, options) {\n  const opts = getOptions(options);\n  const minTargetEs2024 = isMinTarget(opts.target, \"ES2024\");\n  const minTargetEs2025 = isMinTarget(opts.target, \"ES2025\");\n  const recursionLimit = opts.rules.recursionLimit;\n  if (!Number.isInteger(recursionLimit) || recursionLimit < 2 || recursionLimit > 20) {\n    throw new Error(\"Invalid recursionLimit; use 2-20\");\n  }\n  let hasCaseInsensitiveNode = null;\n  let hasCaseSensitiveNode = null;\n  if (!minTargetEs2025) {\n    const iStack = [ast.flags.ignoreCase];\n    traverse({ node: ast }, {\n      getCurrentModI: () => iStack.at(-1),\n      popModI() {\n        iStack.pop();\n      },\n      pushModI(isIOn) {\n        iStack.push(isIOn);\n      },\n      setHasCasedChar() {\n        if (iStack.at(-1)) {\n          hasCaseInsensitiveNode = true;\n        } else {\n          hasCaseSensitiveNode = true;\n        }\n      }\n    }, FlagModifierVisitor);\n  }\n  const appliedGlobalFlags = {\n    dotAll: ast.flags.dotAll,\n    // - Turn global flag i on if a case insensitive node was used and no case sensitive nodes were\n    //   used (to avoid unnecessary node expansion).\n    // - Turn global flag i off if a case sensitive node was used (since case sensitivity can't be\n    //   forced without the use of ES2025 flag groups)\n    ignoreCase: !!((ast.flags.ignoreCase || hasCaseInsensitiveNode) && !hasCaseSensitiveNode)\n  };\n  let lastNode = null;\n  const state = {\n    accuracy: opts.accuracy,\n    appliedGlobalFlags,\n    captureMap: /* @__PURE__ */ new Map(),\n    currentFlags: {\n      dotAll: ast.flags.dotAll,\n      ignoreCase: ast.flags.ignoreCase\n    },\n    inCharClass: false,\n    lastNode,\n    originMap: ast._originMap,\n    recursionLimit,\n    useAppliedIgnoreCase: !!(!minTargetEs2025 && hasCaseInsensitiveNode && hasCaseSensitiveNode),\n    useFlagMods: minTargetEs2025,\n    useFlagV: minTargetEs2024,\n    verbose: opts.verbose\n  };\n  function gen(node) {\n    state.lastNode = lastNode;\n    lastNode = node;\n    switch (node.type) {\n      case AstTypes.Regex:\n        return {\n          pattern: gen(node.pattern),\n          flags: gen(node.flags),\n          options: { ...node.options }\n        };\n      case AstTypes.Alternative:\n        return node.elements.map(gen).join(\"\");\n      case AstTypes.Assertion:\n        return genAssertion(node, state, gen);\n      case AstTypes.Backreference:\n        return genBackreference(node, state);\n      case AstTypes.CapturingGroup:\n        return genCapturingGroup(node, state, gen);\n      case AstTypes.Character:\n        return genCharacter(node, state);\n      case AstTypes.CharacterClass:\n        return genCharacterClass(node, state, gen);\n      case AstTypes.CharacterClassIntersection:\n        if (!state.useFlagV) {\n          throw new Error(\"Use of class intersection requires min target ES2024\");\n        }\n        return node.classes.map(gen).join(\"&&\");\n      case AstTypes.CharacterClassRange:\n        return genCharacterClassRange(node, state);\n      case AstTypes.CharacterSet:\n        return genCharacterSet(node, state);\n      case AstTypes.Flags:\n        return genFlags(node, state);\n      case AstTypes.Group:\n        return genGroup(node, state, gen);\n      case AstTypes.Pattern:\n        return node.alternatives.map(gen).join(\"|\");\n      case AstTypes.Quantifier:\n        return gen(node.element) + getQuantifierStr(node);\n      case AstTypes.Recursion:\n        return genRecursion(node, state);\n      default:\n        throw new Error(`Unexpected node type \"${node.type}\"`);\n    }\n  }\n  const result = gen(ast);\n  if (!minTargetEs2024) {\n    delete result.options.force.v;\n    result.options.disable.v = true;\n    result.options.unicodeSetsPlugin = null;\n  }\n  result._captureTransfers = /* @__PURE__ */ new Map();\n  result._hiddenCaptures = [];\n  state.captureMap.forEach((value, key) => {\n    if (value.hidden) {\n      result._hiddenCaptures.push(key);\n    }\n    if (value.transferTo) {\n      getOrInsert(result._captureTransfers, value.transferTo, []).push(key);\n    }\n  });\n  return result;\n}\nvar FlagModifierVisitor = {\n  AnyGroup: {\n    enter({ node }, state) {\n      const currentModI = state.getCurrentModI();\n      state.pushModI(\n        node.flags ? getNewCurrentFlags({ ignoreCase: currentModI }, node.flags).ignoreCase : currentModI\n      );\n    },\n    exit(_, state) {\n      state.popModI();\n    }\n  },\n  Backreference(_, state) {\n    state.setHasCasedChar();\n  },\n  Character({ node }, state) {\n    if (charHasCase(cp(node.value))) {\n      state.setHasCasedChar();\n    }\n  },\n  CharacterClassRange({ node, skip }, state) {\n    skip();\n    if (getCasesOutsideCharClassRange(node, { firstOnly: true }).length) {\n      state.setHasCasedChar();\n    }\n  },\n  CharacterSet({ node }, state) {\n    if (node.kind === AstCharacterSetKinds.property && UnicodePropertiesWithSpecificCase.has(node.value)) {\n      state.setHasCasedChar();\n    }\n  }\n};\nvar BaseEscapeChars = /* @__PURE__ */ new Set([\n  \"$\",\n  \"(\",\n  \")\",\n  \"*\",\n  \"+\",\n  \".\",\n  \"?\",\n  \"[\",\n  \"\\\\\",\n  \"]\",\n  \"^\",\n  \"{\",\n  \"|\",\n  \"}\"\n]);\nvar CharClassEscapeChars = /* @__PURE__ */ new Set([\n  \"-\",\n  \"\\\\\",\n  \"]\",\n  \"^\",\n  // Literal `[` doesn't require escaping with flag u, but this can help work around regex source\n  // linters and regex syntax processors that expect unescaped `[` to create a nested class\n  \"[\"\n]);\nvar CharClassEscapeCharsFlagV = /* @__PURE__ */ new Set([\n  \"(\",\n  \")\",\n  \"-\",\n  \"/\",\n  \"[\",\n  \"\\\\\",\n  \"]\",\n  \"^\",\n  \"{\",\n  \"|\",\n  \"}\",\n  // Double punctuators; also includes already-listed `-` and `^`\n  \"!\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"&\",\n  \"*\",\n  \"+\",\n  \",\",\n  \".\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"@\",\n  \"`\",\n  \"~\"\n]);\nvar CharCodeEscapeMap = /* @__PURE__ */ new Map([\n  [9, r`\\t`],\n  // horizontal tab\n  [10, r`\\n`],\n  // line feed\n  [11, r`\\v`],\n  // vertical tab\n  [12, r`\\f`],\n  // form feed\n  [13, r`\\r`],\n  // carriage return\n  [8232, r`\\u2028`],\n  // line separator\n  [8233, r`\\u2029`],\n  // paragraph separator\n  [65279, r`\\uFEFF`]\n  // ZWNBSP/BOM\n]);\nvar casedRe = /^\\p{Cased}$/u;\nfunction charHasCase(char) {\n  return casedRe.test(char);\n}\nfunction genAssertion(node, _, gen) {\n  const { kind, negate, alternatives } = node;\n  if (isLookaround(node)) {\n    const prefix = `${kind === AstAssertionKinds.lookahead ? \"\" : \"<\"}${negate ? \"!\" : \"=\"}`;\n    return `(?${prefix}${alternatives.map(gen).join(\"|\")})`;\n  }\n  if (kind === AstAssertionKinds.string_end) {\n    return \"$\";\n  }\n  if (kind === AstAssertionKinds.string_start) {\n    return \"^\";\n  }\n  if (kind === AstAssertionKinds.word_boundary) {\n    return negate ? r`\\B` : r`\\b`;\n  }\n  throw new Error(`Unexpected assertion kind \"${kind}\"`);\n}\nfunction genBackreference({ ref }, state) {\n  if (typeof ref !== \"number\") {\n    throw new Error(\"Unexpected named backref in transformed AST\");\n  }\n  if (!state.useFlagMods && state.accuracy === \"strict\" && state.currentFlags.ignoreCase && !state.captureMap.get(ref).ignoreCase) {\n    throw new Error(\"Use of case-insensitive backref to case-sensitive group requires target ES2025 or non-strict accuracy\");\n  }\n  return \"\\\\\" + ref;\n}\nfunction genCapturingGroup(node, state, gen) {\n  const { name, number, alternatives } = node;\n  const data = { ignoreCase: state.currentFlags.ignoreCase };\n  const origin = state.originMap.get(node);\n  if (origin) {\n    data.hidden = true;\n    if (number > origin.number) {\n      data.transferTo = origin.number;\n    }\n  }\n  state.captureMap.set(number, data);\n  return `(${name ? `?<${name}>` : \"\"}${alternatives.map(gen).join(\"|\")})`;\n}\nfunction genCharacter({ value }, state) {\n  const char = cp(value);\n  const escaped = getCharEscape(value, {\n    isAfterBackref: state.lastNode.type === AstTypes.Backreference,\n    inCharClass: state.inCharClass,\n    useFlagV: state.useFlagV\n  });\n  if (escaped !== char) {\n    return escaped;\n  }\n  if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase && charHasCase(char)) {\n    const cases = getIgnoreCaseMatchChars(char);\n    return state.inCharClass ? cases.join(\"\") : cases.length > 1 ? `[${cases.join(\"\")}]` : cases[0];\n  }\n  return char;\n}\nfunction genCharacterClass({ negate, parent, elements }, state, gen) {\n  if (envFlags.literalHyphenIncorrectlyCreatesRange && state.useFlagV && elements.some(isLiteralHyphen)) {\n    elements = elements.filter((node) => !isLiteralHyphen(node));\n    elements.push(createCharacter(45));\n  }\n  const genClass = () => `[${negate ? \"^\" : \"\"}${elements.map(gen).join(\"\")}]`;\n  if (!state.inCharClass) {\n    state.inCharClass = true;\n    const result = genClass();\n    state.inCharClass = false;\n    return result;\n  }\n  const firstType = elements[0]?.type;\n  if (!negate && firstType && // Allows many nested classes to work with `target` ES2018 which doesn't support nesting\n  ((!state.useFlagV || !state.verbose) && parent.type === AstTypes.CharacterClass && firstType !== AstTypes.CharacterClassIntersection && !(envFlags.literalHyphenIncorrectlyCreatesRange && state.useFlagV) || !state.verbose && parent.type === AstTypes.CharacterClassIntersection && // JS doesn't allow intersection with union or ranges\n  elements.length === 1 && firstType !== AstTypes.CharacterClass && firstType !== AstTypes.CharacterClassRange)) {\n    return elements.map(gen).join(\"\");\n  }\n  if (!state.useFlagV && parent.type === AstTypes.CharacterClass) {\n    throw new Error(\"Use of nested character class requires min target ES2024\");\n  }\n  return genClass();\n}\nfunction genCharacterClassRange(node, state) {\n  const min = node.min.value;\n  const max = node.max.value;\n  const escOpts = {\n    isAfterBackref: false,\n    inCharClass: true,\n    useFlagV: state.useFlagV\n  };\n  const minStr = getCharEscape(min, escOpts);\n  const maxStr = getCharEscape(max, escOpts);\n  const extraChars = /* @__PURE__ */ new Set();\n  if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase) {\n    const charsOutsideRange = getCasesOutsideCharClassRange(node);\n    const ranges = getCodePointRangesFromChars(charsOutsideRange);\n    ranges.forEach((value) => {\n      extraChars.add(\n        Array.isArray(value) ? `${getCharEscape(value[0], escOpts)}-${getCharEscape(value[1], escOpts)}` : getCharEscape(value, escOpts)\n      );\n    });\n  }\n  return `${minStr}-${maxStr}${[...extraChars].join(\"\")}`;\n}\nfunction genCharacterSet({ kind, negate, value, key }, state) {\n  if (kind === AstCharacterSetKinds.dot) {\n    return state.currentFlags.dotAll ? state.appliedGlobalFlags.dotAll || state.useFlagMods ? \".\" : \"[^]\" : (\n      // Onig's only line break char is line feed, unlike JS\n      r`[^\\n]`\n    );\n  }\n  if (kind === AstCharacterSetKinds.digit) {\n    return negate ? r`\\D` : r`\\d`;\n  }\n  if (kind === AstCharacterSetKinds.property) {\n    if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase && UnicodePropertiesWithSpecificCase.has(value)) {\n      throw new Error(`Unicode property \"${value}\" can't be case-insensitive when other chars have specific case`);\n    }\n    return `${negate ? r`\\P` : r`\\p`}{${key ? `${key}=` : \"\"}${value}}`;\n  }\n  if (kind === AstCharacterSetKinds.word) {\n    return negate ? r`\\W` : r`\\w`;\n  }\n  throw new Error(`Unexpected character set kind \"${kind}\"`);\n}\nfunction genFlags(node, state) {\n  return (\n    // The transformer should never turn on the properties for flags d, g, and m since Onig doesn't\n    // have equivs. Flag m is never relied on since Onig uses different line break chars than JS\n    // (node.hasIndices ? 'd' : '') +\n    // (node.global ? 'g' : '') +\n    // (node.multiline ? 'm' : '') +\n    (state.appliedGlobalFlags.ignoreCase ? \"i\" : \"\") + (node.dotAll ? \"s\" : \"\") + (node.sticky ? \"y\" : \"\")\n  );\n}\nfunction genGroup({ atomic: atomic2, flags, parent, alternatives }, state, gen) {\n  const currentFlags = state.currentFlags;\n  if (flags) {\n    state.currentFlags = getNewCurrentFlags(currentFlags, flags);\n  }\n  const contents = alternatives.map(gen).join(\"|\");\n  const result = !state.verbose && alternatives.length === 1 && parent.type !== AstTypes.Quantifier && !atomic2 && (!state.useFlagMods || !flags) ? contents : `(?${getGroupPrefix(atomic2, flags, state.useFlagMods)}${contents})`;\n  state.currentFlags = currentFlags;\n  return result;\n}\nfunction genRecursion({ ref }, state) {\n  const limit = state.recursionLimit;\n  return ref === 0 ? `(?R=${limit})` : r`\\g<${ref}&R=${limit}>`;\n}\nfunction getCasesOutsideCharClassRange(node, options) {\n  const firstOnly = !!options?.firstOnly;\n  const min = node.min.value;\n  const max = node.max.value;\n  const found = [];\n  if (min < 65 && (max === 65535 || max >= 131071) || min === 65536 && max >= 131071) {\n    return found;\n  }\n  for (let i = min; i <= max; i++) {\n    const char = cp(i);\n    if (!charHasCase(char)) {\n      continue;\n    }\n    const charsOutsideRange = getIgnoreCaseMatchChars(char).filter((caseOfChar) => {\n      const num = caseOfChar.codePointAt(0);\n      return num < min || num > max;\n    });\n    if (charsOutsideRange.length) {\n      found.push(...charsOutsideRange);\n      if (firstOnly) {\n        break;\n      }\n    }\n  }\n  return found;\n}\nfunction getCharEscape(codePoint, { isAfterBackref, inCharClass, useFlagV }) {\n  if (CharCodeEscapeMap.has(codePoint)) {\n    return CharCodeEscapeMap.get(codePoint);\n  }\n  if (\n    // Control chars, etc.; condition modeled on the Chrome developer console's display for strings\n    codePoint < 32 || codePoint > 126 && codePoint < 160 || // Unicode planes 4-16; unassigned, special purpose, and private use area\n    codePoint > 262143 || // Avoid corrupting a preceding backref by immediately following it with a literal digit\n    isAfterBackref && isDigitCharCode(codePoint)\n  ) {\n    return codePoint > 255 ? `\\\\u{${codePoint.toString(16).toUpperCase()}}` : `\\\\x${codePoint.toString(16).toUpperCase().padStart(2, \"0\")}`;\n  }\n  const escapeChars = inCharClass ? useFlagV ? CharClassEscapeCharsFlagV : CharClassEscapeChars : BaseEscapeChars;\n  const char = cp(codePoint);\n  return (escapeChars.has(char) ? \"\\\\\" : \"\") + char;\n}\nfunction getCodePointRangesFromChars(chars) {\n  const codePoints = chars.map((char) => char.codePointAt(0)).sort((a, b) => a - b);\n  const values = [];\n  let start = null;\n  for (let i = 0; i < codePoints.length; i++) {\n    if (codePoints[i + 1] === codePoints[i] + 1) {\n      start ??= codePoints[i];\n    } else if (start === null) {\n      values.push(codePoints[i]);\n    } else {\n      values.push([start, codePoints[i]]);\n      start = null;\n    }\n  }\n  return values;\n}\nfunction getGroupPrefix(atomic2, flagMods, useFlagMods) {\n  if (atomic2) {\n    return \">\";\n  }\n  let mods = \"\";\n  if (flagMods && useFlagMods) {\n    const { enable, disable } = flagMods;\n    mods = (enable?.ignoreCase ? \"i\" : \"\") + (enable?.dotAll ? \"s\" : \"\") + (disable ? \"-\" : \"\") + (disable?.ignoreCase ? \"i\" : \"\") + (disable?.dotAll ? \"s\" : \"\");\n  }\n  return `${mods}:`;\n}\nfunction getQuantifierStr({ min, max, greedy, possessive: possessive2 }) {\n  let base;\n  if (!min && max === 1) {\n    base = \"?\";\n  } else if (!min && max === Infinity) {\n    base = \"*\";\n  } else if (min === 1 && max === Infinity) {\n    base = \"+\";\n  } else if (min === max) {\n    base = `{${min}}`;\n  } else {\n    base = `{${min},${max === Infinity ? \"\" : max}}`;\n  }\n  return base + (possessive2 ? \"+\" : greedy ? \"\" : \"?\");\n}\nfunction isDigitCharCode(value) {\n  return value > 47 && value < 58;\n}\nfunction isLiteralHyphen({ type, value }) {\n  return type === AstTypes.Character && value === 45;\n}\n\n// src/subclass.js\nvar EmulatedRegExp = class _EmulatedRegExp extends RegExp {\n  /**\n  @type {Map<number, {\n    hidden?: true;\n    transferTo?: number;\n  }>}\n  */\n  #captureMap = /* @__PURE__ */ new Map();\n  /**\n  @type {RegExp | EmulatedRegExp | null}\n  */\n  #compiled = null;\n  /**\n  @type {string}\n  */\n  #pattern;\n  /**\n  @type {Map<number, string>?}\n  */\n  #nameMap = null;\n  /**\n  @type {string?}\n  */\n  #strategy = null;\n  /**\n  Can be used to serialize the instance.\n  @type {EmulatedRegExpOptions}\n  */\n  rawOptions = {};\n  // Override the getter with one that works with lazy-compiled regexes\n  get source() {\n    return this.#pattern || \"(?:)\";\n  }\n  /**\n  @overload\n  @param {string} pattern\n  @param {string} [flags]\n  @param {EmulatedRegExpOptions} [options]\n  */\n  /**\n  @overload\n  @param {EmulatedRegExp} pattern\n  @param {string} [flags]\n  */\n  constructor(pattern, flags, options) {\n    const lazyCompile = !!options?.lazyCompile;\n    if (pattern instanceof RegExp) {\n      if (options) {\n        throw new Error(\"Cannot provide options when copying a regexp\");\n      }\n      const re = pattern;\n      super(re, flags);\n      this.#pattern = re.source;\n      if (re instanceof _EmulatedRegExp) {\n        this.#captureMap = re.#captureMap;\n        this.#nameMap = re.#nameMap;\n        this.#strategy = re.#strategy;\n        this.rawOptions = re.rawOptions;\n      }\n    } else {\n      const opts = {\n        hiddenCaptures: [],\n        strategy: null,\n        transfers: [],\n        ...options\n      };\n      super(lazyCompile ? \"\" : pattern, flags);\n      this.#pattern = pattern;\n      this.#captureMap = createCaptureMap(opts.hiddenCaptures, opts.transfers);\n      this.#strategy = opts.strategy;\n      this.rawOptions = options ?? {};\n    }\n    if (!lazyCompile) {\n      this.#compiled = this;\n    }\n  }\n  /**\n  Called internally by all String/RegExp methods that use regexes.\n  @override\n  @param {string} str\n  @returns {RegExpExecArray?}\n  */\n  exec(str) {\n    if (!this.#compiled) {\n      const { lazyCompile, ...rest } = this.rawOptions;\n      this.#compiled = new _EmulatedRegExp(this.#pattern, this.flags, rest);\n    }\n    const useLastIndex = this.global || this.sticky;\n    const pos = this.lastIndex;\n    if (this.#strategy === \"clip_search\" && useLastIndex && pos) {\n      this.lastIndex = 0;\n      const match = this.#execCore(str.slice(pos));\n      if (match) {\n        adjustMatchDetailsForOffset(match, pos, str, this.hasIndices);\n        this.lastIndex += pos;\n      }\n      return match;\n    }\n    return this.#execCore(str);\n  }\n  /**\n  Adds support for hidden and transfer captures.\n  @param {string} str\n  @returns\n  */\n  #execCore(str) {\n    this.#compiled.lastIndex = this.lastIndex;\n    const match = super.exec.call(this.#compiled, str);\n    this.lastIndex = this.#compiled.lastIndex;\n    if (!match || !this.#captureMap.size) {\n      return match;\n    }\n    const matchCopy = [...match];\n    match.length = 1;\n    let indicesCopy;\n    if (this.hasIndices) {\n      indicesCopy = [...match.indices];\n      match.indices.length = 1;\n    }\n    const mappedNums = [0];\n    for (let i = 1; i < matchCopy.length; i++) {\n      const { hidden, transferTo } = this.#captureMap.get(i) ?? {};\n      if (hidden) {\n        mappedNums.push(null);\n      } else {\n        mappedNums.push(match.length);\n        match.push(matchCopy[i]);\n        if (this.hasIndices) {\n          match.indices.push(indicesCopy[i]);\n        }\n      }\n      if (transferTo && matchCopy[i] !== void 0) {\n        const to = throwIfNot(mappedNums[transferTo]);\n        match[to] = matchCopy[i];\n        if (this.hasIndices) {\n          match.indices[to] = indicesCopy[i];\n        }\n        if (match.groups) {\n          if (!this.#nameMap) {\n            this.#nameMap = createNameMap(this.source);\n          }\n          const name = this.#nameMap.get(transferTo);\n          if (name) {\n            match.groups[name] = matchCopy[i];\n            if (this.hasIndices) {\n              match.indices.groups[name] = indicesCopy[i];\n            }\n          }\n        }\n      }\n    }\n    return match;\n  }\n};\nfunction adjustMatchDetailsForOffset(match, offset, input, hasIndices) {\n  match.index += offset;\n  match.input = input;\n  if (hasIndices) {\n    const indices = match.indices;\n    for (let i = 0; i < indices.length; i++) {\n      const arr = indices[i];\n      if (arr) {\n        indices[i] = [arr[0] + offset, arr[1] + offset];\n      }\n    }\n    const groupIndices = indices.groups;\n    if (groupIndices) {\n      Object.keys(groupIndices).forEach((key) => {\n        const arr = groupIndices[key];\n        if (arr) {\n          groupIndices[key] = [arr[0] + offset, arr[1] + offset];\n        }\n      });\n    }\n  }\n}\nfunction createCaptureMap(hiddenCaptures, transfers) {\n  const captureMap = /* @__PURE__ */ new Map();\n  for (const num of hiddenCaptures) {\n    captureMap.set(num, {\n      hidden: true\n    });\n  }\n  for (const [to, from] of transfers) {\n    for (const num of from) {\n      getOrInsert(captureMap, num, {}).transferTo = to;\n    }\n  }\n  return captureMap;\n}\nfunction createNameMap(pattern) {\n  const re = /(?<capture>\\((?:\\?<(?![=!])(?<name>[^>]+)>|(?!\\?)))|\\\\?./gsu;\n  const map = /* @__PURE__ */ new Map();\n  let numCharClassesOpen = 0;\n  let numCaptures = 0;\n  let match;\n  while (match = re.exec(pattern)) {\n    const { 0: m, groups: { capture, name } } = match;\n    if (m === \"[\") {\n      numCharClassesOpen++;\n    } else if (!numCharClassesOpen) {\n      if (capture) {\n        numCaptures++;\n        if (name) {\n          map.set(numCaptures, name);\n        }\n      }\n    } else if (m === \"]\") {\n      numCharClassesOpen--;\n    }\n  }\n  return map;\n}\n\n// src/index.js\n\n\nfunction toOnigurumaAst(pattern, options) {\n  const opts = {\n    flags: options?.flags ?? \"\",\n    rules: {\n      captureGroup: false,\n      singleline: false,\n      ...options?.rules\n    }\n  };\n  return parse(tokenize(pattern, opts.flags, opts.rules));\n}\nfunction toRegExp(pattern, options) {\n  const d = toRegExpDetails(pattern, options);\n  if (d.options) {\n    return new EmulatedRegExp(d.pattern, d.flags, d.options);\n  }\n  return new RegExp(d.pattern, d.flags);\n}\nfunction toRegExpDetails(pattern, options) {\n  const opts = getOptions(options);\n  const tokenized = tokenize(pattern, opts.flags, {\n    captureGroup: opts.rules.captureGroup,\n    singleline: opts.rules.singleline\n  });\n  const onigurumaAst = parse(tokenized, {\n    skipBackrefValidation: opts.rules.allowOrphanBackrefs,\n    verbose: opts.verbose\n  });\n  const regexAst = transform(onigurumaAst, {\n    accuracy: opts.accuracy,\n    asciiWordBoundaries: opts.rules.asciiWordBoundaries,\n    avoidSubclass: opts.avoidSubclass,\n    bestEffortTarget: opts.target\n  });\n  const generated = generate(regexAst, opts);\n  const recursionResult = (0,regex_recursion__WEBPACK_IMPORTED_MODULE_2__.recursion)(generated.pattern, {\n    captureTransfers: generated._captureTransfers,\n    hiddenCaptures: generated._hiddenCaptures,\n    mode: \"external\"\n  });\n  const possessiveResult = (0,regex_internals__WEBPACK_IMPORTED_MODULE_1__.possessive)(recursionResult.pattern);\n  const atomicResult = (0,regex_internals__WEBPACK_IMPORTED_MODULE_1__.atomic)(possessiveResult.pattern, {\n    captureTransfers: recursionResult.captureTransfers,\n    hiddenCaptures: recursionResult.hiddenCaptures\n  });\n  const details = {\n    pattern: atomicResult.pattern,\n    flags: `${opts.hasIndices ? \"d\" : \"\"}${opts.global ? \"g\" : \"\"}${generated.flags}${generated.options.disable.v ? \"u\" : \"v\"}`\n  };\n  if (opts.avoidSubclass) {\n    if (opts.lazyCompileLength !== Infinity) {\n      throw new Error(\"Lazy compilation requires subclass\");\n    }\n  } else {\n    const hiddenCaptures = atomicResult.hiddenCaptures.sort((a, b) => a - b);\n    const transfers = Array.from(atomicResult.captureTransfers);\n    const strategy = regexAst._strategy;\n    const lazyCompile = details.pattern.length >= opts.lazyCompileLength;\n    if (hiddenCaptures.length || transfers.length || strategy || lazyCompile) {\n      details.options = {\n        ...hiddenCaptures.length && { hiddenCaptures },\n        ...transfers.length && { transfers },\n        ...strategy && { strategy },\n        ...lazyCompile && { lazyCompile }\n      };\n    }\n  }\n  return details;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/oniguruma-to-es@3.1.1/node_modules/oniguruma-to-es/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/regex-recursion@6.0.2/node_modules/regex-recursion/src/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/regex-recursion@6.0.2/node_modules/regex-recursion/src/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recursion: () => (/* binding */ recursion)\n/* harmony export */ });\n/* harmony import */ var regex_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regex-utilities */ \"(app-pages-browser)/./node_modules/.pnpm/regex-utilities@2.3.0/node_modules/regex-utilities/src/index.js\");\n\n\nconst r = String.raw;\nconst gRToken = r`\\\\g<(?<gRNameOrNum>[^>&]+)&R=(?<gRDepth>[^>]+)>`;\nconst recursiveToken = r`\\(\\?R=(?<rDepth>[^\\)]+)\\)|${gRToken}`;\nconst namedCaptureDelim = r`\\(\\?<(?![=!])(?<captureName>[^>]+)>`;\nconst captureDelim = r`${namedCaptureDelim}|(?<unnamed>\\()(?!\\?)`;\nconst token = new RegExp(r`${namedCaptureDelim}|${recursiveToken}|\\(\\?|\\\\?.`, 'gsu');\nconst overlappingRecursionMsg = 'Cannot use multiple overlapping recursions';\n\n/**\n@param {string} pattern\n@param {{\n  flags?: string;\n  captureTransfers?: Map<number, Array<number>>;\n  hiddenCaptures?: Array<number>;\n  mode?: 'plugin' | 'external';\n}} [data]\n@returns {{\n  pattern: string;\n  captureTransfers: Map<number, Array<number>>;\n  hiddenCaptures: Array<number>;\n}}\n*/\nfunction recursion(pattern, data) {\n  const {hiddenCaptures, mode} = {\n    hiddenCaptures: [],\n    mode: 'plugin',\n    ...data,\n  };\n  // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>\n  let captureTransfers = data?.captureTransfers ?? new Map();\n  // Keep the initial fail-check (which avoids unneeded processing) as fast as possible by testing\n  // without the accuracy improvement of using `hasUnescaped` with `Context.DEFAULT`\n  if (!(new RegExp(recursiveToken, 'su').test(pattern))) {\n    return {\n      pattern,\n      captureTransfers,\n      hiddenCaptures,\n    };\n  }\n  if (mode === 'plugin' && (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.hasUnescaped)(pattern, r`\\(\\?\\(DEFINE\\)`, regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT)) {\n    throw new Error('DEFINE groups cannot be used with recursion');\n  }\n\n  const addedHiddenCaptures = [];\n  const hasNumberedBackref = (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.hasUnescaped)(pattern, r`\\\\[1-9]`, regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT);\n  const groupContentsStartPos = new Map();\n  const openGroups = [];\n  let hasRecursed = false;\n  let numCharClassesOpen = 0;\n  let numCapturesPassed = 0;\n  let match;\n  token.lastIndex = 0;\n  while ((match = token.exec(pattern))) {\n    const {0: m, groups: {captureName, rDepth, gRNameOrNum, gRDepth}} = match;\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (!numCharClassesOpen) {\n\n      // `(?R=N)`\n      if (rDepth) {\n        assertMaxInBounds(rDepth);\n        if (hasRecursed) {\n          throw new Error(overlappingRecursionMsg);\n        }\n        if (hasNumberedBackref) {\n          // Could add support for numbered backrefs with extra effort, but it's probably not worth\n          // it. To trigger this error, the regex must include recursion and one of the following:\n          // - An interpolated regex that contains a numbered backref (since other numbered\n          //   backrefs are prevented by implicit flag n).\n          // - A numbered backref, when flag n is explicitly disabled.\n          // Note that Regex+'s extended syntax (atomic groups and sometimes subroutines) can also\n          // add numbered backrefs, but those work fine because external plugins like this one run\n          // *before* the transformation of built-in syntax extensions\n          throw new Error(\n            // When used in `external` mode by transpilers other than Regex+, backrefs might have\n            // gone through conversion from named to numbered, so avoid a misleading error\n            `${mode === 'external' ? 'Backrefs' : 'Numbered backrefs'} cannot be used with global recursion`\n          );\n        }\n        const left = pattern.slice(0, match.index);\n        const right = pattern.slice(token.lastIndex);\n        if ((0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.hasUnescaped)(right, recursiveToken, regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT)) {\n          throw new Error(overlappingRecursionMsg);\n        }\n        const reps = +rDepth - 1;\n        pattern = makeRecursive(\n          left,\n          right,\n          reps,\n          false,\n          hiddenCaptures,\n          addedHiddenCaptures,\n          numCapturesPassed\n        );\n        captureTransfers = mapCaptureTransfers(\n          captureTransfers,\n          left,\n          reps,\n          addedHiddenCaptures.length,\n          0,\n          numCapturesPassed\n        );\n        // No need to parse further\n        break;\n      // `\\g<name&R=N>`, `\\g<number&R=N>`\n      } else if (gRNameOrNum) {\n        assertMaxInBounds(gRDepth);\n        let isWithinReffedGroup = false;\n        for (const g of openGroups) {\n          if (g.name === gRNameOrNum || g.num === +gRNameOrNum) {\n            isWithinReffedGroup = true;\n            if (g.hasRecursedWithin) {\n              throw new Error(overlappingRecursionMsg);\n            }\n            break;\n          }\n        }\n        if (!isWithinReffedGroup) {\n          throw new Error(r`Recursive \\g cannot be used outside the referenced group \"${\n            mode === 'external' ? gRNameOrNum : r`\\g<${gRNameOrNum}&R=${gRDepth}>`\n          }\"`);\n        }\n        const startPos = groupContentsStartPos.get(gRNameOrNum);\n        const groupContents = (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.getGroupContents)(pattern, startPos);\n        if (\n          hasNumberedBackref &&\n          (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.hasUnescaped)(groupContents, r`${namedCaptureDelim}|\\((?!\\?)`, regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT)\n        ) {\n          throw new Error(\n            // When used in `external` mode by transpilers other than Regex+, backrefs might have\n            // gone through conversion from named to numbered, so avoid a misleading error\n            `${mode === 'external' ? 'Backrefs' : 'Numbered backrefs'} cannot be used with recursion of capturing groups`\n          );\n        }\n        const groupContentsLeft = pattern.slice(startPos, match.index);\n        const groupContentsRight = groupContents.slice(groupContentsLeft.length + m.length);\n        const numAddedHiddenCapturesPreExpansion = addedHiddenCaptures.length;\n        const reps = +gRDepth - 1;\n        const expansion = makeRecursive(\n          groupContentsLeft,\n          groupContentsRight,\n          reps,\n          true,\n          hiddenCaptures,\n          addedHiddenCaptures,\n          numCapturesPassed\n        );\n        captureTransfers = mapCaptureTransfers(\n          captureTransfers,\n          groupContentsLeft,\n          reps,\n          addedHiddenCaptures.length - numAddedHiddenCapturesPreExpansion,\n          numAddedHiddenCapturesPreExpansion,\n          numCapturesPassed\n        );\n        const pre = pattern.slice(0, startPos);\n        const post = pattern.slice(startPos + groupContents.length);\n        // Modify the string we're looping over\n        pattern = `${pre}${expansion}${post}`;\n        // Step forward for the next loop iteration\n        token.lastIndex += expansion.length - m.length - groupContentsLeft.length - groupContentsRight.length;\n        openGroups.forEach(g => g.hasRecursedWithin = true);\n        hasRecursed = true;\n      } else if (captureName) {\n        numCapturesPassed++;\n        groupContentsStartPos.set(String(numCapturesPassed), token.lastIndex);\n        groupContentsStartPos.set(captureName, token.lastIndex);\n        openGroups.push({\n          num: numCapturesPassed,\n          name: captureName,\n        });\n      } else if (m[0] === '(') {\n        const isUnnamedCapture = m === '(';\n        if (isUnnamedCapture) {\n          numCapturesPassed++;\n          groupContentsStartPos.set(String(numCapturesPassed), token.lastIndex);\n        }\n        openGroups.push(isUnnamedCapture ? {num: numCapturesPassed} : {});\n      } else if (m === ')') {\n        openGroups.pop();\n      }\n\n    } else if (m === ']') {\n      numCharClassesOpen--;\n    }\n  }\n\n  hiddenCaptures.push(...addedHiddenCaptures);\n\n  return {\n    pattern,\n    captureTransfers,\n    hiddenCaptures,\n  };\n}\n\n/**\n@param {string} max\n*/\nfunction assertMaxInBounds(max) {\n  const errMsg = `Max depth must be integer between 2 and 100; used ${max}`;\n  if (!/^[1-9]\\d*$/.test(max)) {\n    throw new Error(errMsg);\n  }\n  max = +max;\n  if (max < 2 || max > 100) {\n    throw new Error(errMsg);\n  }\n}\n\n/**\n@param {string} left\n@param {string} right\n@param {number} reps\n@param {boolean} isSubpattern\n@param {Array<number>} hiddenCaptures\n@param {Array<number>} addedHiddenCaptures\n@param {number} numCapturesPassed\n@returns {string}\n*/\nfunction makeRecursive(\n  left,\n  right,\n  reps,\n  isSubpattern,\n  hiddenCaptures,\n  addedHiddenCaptures,\n  numCapturesPassed\n) {\n  const namesInRecursed = new Set();\n  // Can skip this work if not needed\n  if (isSubpattern) {\n    (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.forEachUnescaped)(left + right, namedCaptureDelim, ({groups: {captureName}}) => {\n      namesInRecursed.add(captureName);\n    }, regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT);\n  }\n  const rest = [\n    reps,\n    isSubpattern ? namesInRecursed : null,\n    hiddenCaptures,\n    addedHiddenCaptures,\n    numCapturesPassed,\n  ];\n  // Depth 2: 'left(?:left(?:)right)right'\n  // Depth 3: 'left(?:left(?:left(?:)right)right)right'\n  // Empty group in the middle separates tokens and absorbs a following quantifier if present\n  return `${left}${\n    repeatWithDepth(`(?:${left}`, 'forward', ...rest)\n  }(?:)${\n    repeatWithDepth(`${right})`, 'backward', ...rest)\n  }${right}`;\n}\n\n/**\n@param {string} pattern\n@param {'forward' | 'backward'} direction\n@param {number} reps\n@param {Set<string> | null} namesInRecursed\n@param {Array<number>} hiddenCaptures\n@param {Array<number>} addedHiddenCaptures\n@param {number} numCapturesPassed\n@returns {string}\n*/\nfunction repeatWithDepth(\n  pattern,\n  direction,\n  reps,\n  namesInRecursed,\n  hiddenCaptures,\n  addedHiddenCaptures,\n  numCapturesPassed\n) {\n  const startNum = 2;\n  const getDepthNum = i => direction === 'forward' ? (i + startNum) : (reps - i + startNum - 1);\n  let result = '';\n  for (let i = 0; i < reps; i++) {\n    const depthNum = getDepthNum(i);\n    result += (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.replaceUnescaped)(\n      pattern,\n      r`${captureDelim}|\\\\k<(?<backref>[^>]+)>`,\n      ({0: m, groups: {captureName, unnamed, backref}}) => {\n        if (backref && namesInRecursed && !namesInRecursed.has(backref)) {\n          // Don't alter backrefs to groups outside the recursed subpattern\n          return m;\n        }\n        const suffix = `_$${depthNum}`;\n        if (unnamed || captureName) {\n          const addedCaptureNum = numCapturesPassed + addedHiddenCaptures.length + 1;\n          addedHiddenCaptures.push(addedCaptureNum);\n          incrementIfAtLeast(hiddenCaptures, addedCaptureNum);\n          return unnamed ? m : `(?<${captureName}${suffix}>`;\n        }\n        return r`\\k<${backref}${suffix}>`;\n      },\n      regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT\n    );\n  }\n  return result;\n}\n\n/**\nUpdates the array in place by incrementing each value greater than or equal to the threshold.\n@param {Array<number>} arr\n@param {number} threshold\n*/\nfunction incrementIfAtLeast(arr, threshold) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= threshold) {\n      arr[i]++;\n    }\n  }\n}\n\n/**\n@param {Map<number, Array<number>>} captureTransfers\n@param {string} left\n@param {number} reps\n@param {number} numCapturesAddedInExpansion\n@param {number} numAddedHiddenCapturesPreExpansion\n@param {number} numCapturesPassed\n@returns {Map<number, Array<number>>}\n*/\nfunction mapCaptureTransfers(captureTransfers, left, reps, numCapturesAddedInExpansion, numAddedHiddenCapturesPreExpansion, numCapturesPassed) {\n  if (captureTransfers.size && numCapturesAddedInExpansion) {\n    let numCapturesInLeft = 0;\n    (0,regex_utilities__WEBPACK_IMPORTED_MODULE_0__.forEachUnescaped)(left, captureDelim, () => numCapturesInLeft++, regex_utilities__WEBPACK_IMPORTED_MODULE_0__.Context.DEFAULT);\n    // Is 0 for global recursion\n    const recursionDelimCaptureNum = numCapturesPassed - numCapturesInLeft + numAddedHiddenCapturesPreExpansion;\n    const newCaptureTransfers = new Map();\n    captureTransfers.forEach((from, to) => {\n      const numCapturesInRight = (numCapturesAddedInExpansion - (numCapturesInLeft * reps)) / reps;\n      const numCapturesAddedInLeft = numCapturesInLeft * reps;\n      const newTo = to > (recursionDelimCaptureNum + numCapturesInLeft) ? to + numCapturesAddedInExpansion : to;\n      const newFrom = [];\n      for (const f of from) {\n        // Before the recursed subpattern\n        if (f <= recursionDelimCaptureNum) {\n          newFrom.push(f);\n        // After the recursed subpattern\n        } else if (f > (recursionDelimCaptureNum + numCapturesInLeft + numCapturesInRight)) {\n          newFrom.push(f + numCapturesAddedInExpansion);\n        // Within the recursed subpattern, on the left of the recursion token\n        } else if (f <= (recursionDelimCaptureNum + numCapturesInLeft)) {\n          for (let i = 0; i <= reps; i++) {\n            newFrom.push(f + (numCapturesInLeft * i));\n          }\n        // Within the recursed subpattern, on the right of the recursion token\n        } else {\n          for (let i = 0; i <= reps; i++) {\n            newFrom.push(f + numCapturesAddedInLeft + (numCapturesInRight * i));\n          }\n        }\n      }\n      newCaptureTransfers.set(newTo, newFrom);\n    });\n    return newCaptureTransfers;\n  }\n  return captureTransfers;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdleC1yZWN1cnNpb25ANi4wLjIvbm9kZV9tb2R1bGVzL3JlZ2V4LXJlY3Vyc2lvbi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEc7O0FBRTVHO0FBQ0E7QUFDQSxxREFBcUQsUUFBUTtBQUM3RDtBQUNBLHlCQUF5QixrQkFBa0I7QUFDM0MsNkJBQTZCLGtCQUFrQixHQUFHLGVBQWU7QUFDakU7O0FBRUE7QUFDQSxRQUFRLFFBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsc0JBQXNCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw2REFBWSw2QkFBNkIsb0RBQU87QUFDM0U7QUFDQTs7QUFFQTtBQUNBLDZCQUE2Qiw2REFBWSxzQkFBc0Isb0RBQU87QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZSw0Q0FBNEM7QUFDdEU7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3REFBd0Q7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZEQUFZLHdCQUF3QixvREFBTztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFlBQVksS0FBSyxRQUFRO0FBQ2hGLFdBQVc7QUFDWDtBQUNBO0FBQ0EsOEJBQThCLGlFQUFnQjtBQUM5QztBQUNBO0FBQ0EsVUFBVSw2REFBWSxvQkFBb0Isa0JBQWtCLFlBQVksb0RBQU87QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUF3RDtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsd0JBQXdCLElBQUk7QUFDeEUsUUFBUTtBQUNSO0FBQ0E7O0FBRUEsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLFFBQVE7QUFDaEI7QUFDQTtBQUNBLCtEQUErRCxPQUFPLElBQUk7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsUUFBUTtBQUNoQixRQUFRLFFBQVE7QUFDaEIsUUFBUSxRQUFRO0FBQ2hCLFFBQVEsU0FBUztBQUNqQixRQUFRLGVBQWU7QUFDdkIsUUFBUSxlQUFlO0FBQ3ZCLFFBQVEsUUFBUTtBQUNoQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlFQUFnQixvQ0FBb0MsU0FBUyxhQUFhO0FBQzlFO0FBQ0EsS0FBSyxFQUFFLG9EQUFPO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQiwwQkFBMEIsS0FBSztBQUMvQixHQUFHO0FBQ0gsdUJBQXVCLE1BQU07QUFDN0IsR0FBRyxFQUFFLE1BQU07QUFDWDs7QUFFQTtBQUNBLFFBQVEsUUFBUTtBQUNoQixRQUFRLHdCQUF3QjtBQUNoQyxRQUFRLFFBQVE7QUFDaEIsUUFBUSxvQkFBb0I7QUFDNUIsUUFBUSxlQUFlO0FBQ3ZCLFFBQVEsZUFBZTtBQUN2QixRQUFRLFFBQVE7QUFDaEIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUI7QUFDQSxjQUFjLGlFQUFnQjtBQUM5QjtBQUNBLFVBQVUsYUFBYTtBQUN2QixRQUFRLGVBQWUsK0JBQStCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFNBQVM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsWUFBWSxFQUFFLE9BQU87QUFDMUQ7QUFDQSxzQkFBc0IsUUFBUSxFQUFFLE9BQU87QUFDdkMsT0FBTztBQUNQLE1BQU0sb0RBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxlQUFlO0FBQ3ZCLFFBQVEsUUFBUTtBQUNoQjtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSw0QkFBNEI7QUFDcEMsUUFBUSxRQUFRO0FBQ2hCLFFBQVEsUUFBUTtBQUNoQixRQUFRLFFBQVE7QUFDaEIsUUFBUSxRQUFRO0FBQ2hCLFFBQVEsUUFBUTtBQUNoQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlFQUFnQixnREFBZ0Qsb0RBQU87QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDViwwQkFBMEIsV0FBVztBQUNyQztBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsMEJBQTBCLFdBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFJRSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2V4LXJlY3Vyc2lvbkA2LjAuMi9ub2RlX21vZHVsZXMvcmVnZXgtcmVjdXJzaW9uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnRleHQsIGZvckVhY2hVbmVzY2FwZWQsIGdldEdyb3VwQ29udGVudHMsIGhhc1VuZXNjYXBlZCwgcmVwbGFjZVVuZXNjYXBlZH0gZnJvbSAncmVnZXgtdXRpbGl0aWVzJztcblxuY29uc3QgciA9IFN0cmluZy5yYXc7XG5jb25zdCBnUlRva2VuID0gcmBcXFxcZzwoPzxnUk5hbWVPck51bT5bXj4mXSspJlI9KD88Z1JEZXB0aD5bXj5dKyk+YDtcbmNvbnN0IHJlY3Vyc2l2ZVRva2VuID0gcmBcXChcXD9SPSg/PHJEZXB0aD5bXlxcKV0rKVxcKXwke2dSVG9rZW59YDtcbmNvbnN0IG5hbWVkQ2FwdHVyZURlbGltID0gcmBcXChcXD88KD8hWz0hXSkoPzxjYXB0dXJlTmFtZT5bXj5dKyk+YDtcbmNvbnN0IGNhcHR1cmVEZWxpbSA9IHJgJHtuYW1lZENhcHR1cmVEZWxpbX18KD88dW5uYW1lZD5cXCgpKD8hXFw/KWA7XG5jb25zdCB0b2tlbiA9IG5ldyBSZWdFeHAocmAke25hbWVkQ2FwdHVyZURlbGltfXwke3JlY3Vyc2l2ZVRva2VufXxcXChcXD98XFxcXD8uYCwgJ2dzdScpO1xuY29uc3Qgb3ZlcmxhcHBpbmdSZWN1cnNpb25Nc2cgPSAnQ2Fubm90IHVzZSBtdWx0aXBsZSBvdmVybGFwcGluZyByZWN1cnNpb25zJztcblxuLyoqXG5AcGFyYW0ge3N0cmluZ30gcGF0dGVyblxuQHBhcmFtIHt7XG4gIGZsYWdzPzogc3RyaW5nO1xuICBjYXB0dXJlVHJhbnNmZXJzPzogTWFwPG51bWJlciwgQXJyYXk8bnVtYmVyPj47XG4gIGhpZGRlbkNhcHR1cmVzPzogQXJyYXk8bnVtYmVyPjtcbiAgbW9kZT86ICdwbHVnaW4nIHwgJ2V4dGVybmFsJztcbn19IFtkYXRhXVxuQHJldHVybnMge3tcbiAgcGF0dGVybjogc3RyaW5nO1xuICBjYXB0dXJlVHJhbnNmZXJzOiBNYXA8bnVtYmVyLCBBcnJheTxudW1iZXI+PjtcbiAgaGlkZGVuQ2FwdHVyZXM6IEFycmF5PG51bWJlcj47XG59fVxuKi9cbmZ1bmN0aW9uIHJlY3Vyc2lvbihwYXR0ZXJuLCBkYXRhKSB7XG4gIGNvbnN0IHtoaWRkZW5DYXB0dXJlcywgbW9kZX0gPSB7XG4gICAgaGlkZGVuQ2FwdHVyZXM6IFtdLFxuICAgIG1vZGU6ICdwbHVnaW4nLFxuICAgIC4uLmRhdGEsXG4gIH07XG4gIC8vIENhcHR1cmUgdHJhbnNmZXIgaXMgdXNlZCBieSA8Z2l0aHViLmNvbS9zbGV2aXRoYW4vb25pZ3VydW1hLXRvLWVzPlxuICBsZXQgY2FwdHVyZVRyYW5zZmVycyA9IGRhdGE/LmNhcHR1cmVUcmFuc2ZlcnMgPz8gbmV3IE1hcCgpO1xuICAvLyBLZWVwIHRoZSBpbml0aWFsIGZhaWwtY2hlY2sgKHdoaWNoIGF2b2lkcyB1bm5lZWRlZCBwcm9jZXNzaW5nKSBhcyBmYXN0IGFzIHBvc3NpYmxlIGJ5IHRlc3RpbmdcbiAgLy8gd2l0aG91dCB0aGUgYWNjdXJhY3kgaW1wcm92ZW1lbnQgb2YgdXNpbmcgYGhhc1VuZXNjYXBlZGAgd2l0aCBgQ29udGV4dC5ERUZBVUxUYFxuICBpZiAoIShuZXcgUmVnRXhwKHJlY3Vyc2l2ZVRva2VuLCAnc3UnKS50ZXN0KHBhdHRlcm4pKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXR0ZXJuLFxuICAgICAgY2FwdHVyZVRyYW5zZmVycyxcbiAgICAgIGhpZGRlbkNhcHR1cmVzLFxuICAgIH07XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdwbHVnaW4nICYmIGhhc1VuZXNjYXBlZChwYXR0ZXJuLCByYFxcKFxcP1xcKERFRklORVxcKWAsIENvbnRleHQuREVGQVVMVCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RFRklORSBncm91cHMgY2Fubm90IGJlIHVzZWQgd2l0aCByZWN1cnNpb24nKTtcbiAgfVxuXG4gIGNvbnN0IGFkZGVkSGlkZGVuQ2FwdHVyZXMgPSBbXTtcbiAgY29uc3QgaGFzTnVtYmVyZWRCYWNrcmVmID0gaGFzVW5lc2NhcGVkKHBhdHRlcm4sIHJgXFxcXFsxLTldYCwgQ29udGV4dC5ERUZBVUxUKTtcbiAgY29uc3QgZ3JvdXBDb250ZW50c1N0YXJ0UG9zID0gbmV3IE1hcCgpO1xuICBjb25zdCBvcGVuR3JvdXBzID0gW107XG4gIGxldCBoYXNSZWN1cnNlZCA9IGZhbHNlO1xuICBsZXQgbnVtQ2hhckNsYXNzZXNPcGVuID0gMDtcbiAgbGV0IG51bUNhcHR1cmVzUGFzc2VkID0gMDtcbiAgbGV0IG1hdGNoO1xuICB0b2tlbi5sYXN0SW5kZXggPSAwO1xuICB3aGlsZSAoKG1hdGNoID0gdG9rZW4uZXhlYyhwYXR0ZXJuKSkpIHtcbiAgICBjb25zdCB7MDogbSwgZ3JvdXBzOiB7Y2FwdHVyZU5hbWUsIHJEZXB0aCwgZ1JOYW1lT3JOdW0sIGdSRGVwdGh9fSA9IG1hdGNoO1xuICAgIGlmIChtID09PSAnWycpIHtcbiAgICAgIG51bUNoYXJDbGFzc2VzT3BlbisrO1xuICAgIH0gZWxzZSBpZiAoIW51bUNoYXJDbGFzc2VzT3Blbikge1xuXG4gICAgICAvLyBgKD9SPU4pYFxuICAgICAgaWYgKHJEZXB0aCkge1xuICAgICAgICBhc3NlcnRNYXhJbkJvdW5kcyhyRGVwdGgpO1xuICAgICAgICBpZiAoaGFzUmVjdXJzZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iob3ZlcmxhcHBpbmdSZWN1cnNpb25Nc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNOdW1iZXJlZEJhY2tyZWYpIHtcbiAgICAgICAgICAvLyBDb3VsZCBhZGQgc3VwcG9ydCBmb3IgbnVtYmVyZWQgYmFja3JlZnMgd2l0aCBleHRyYSBlZmZvcnQsIGJ1dCBpdCdzIHByb2JhYmx5IG5vdCB3b3J0aFxuICAgICAgICAgIC8vIGl0LiBUbyB0cmlnZ2VyIHRoaXMgZXJyb3IsIHRoZSByZWdleCBtdXN0IGluY2x1ZGUgcmVjdXJzaW9uIGFuZCBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICAgICAgICAvLyAtIEFuIGludGVycG9sYXRlZCByZWdleCB0aGF0IGNvbnRhaW5zIGEgbnVtYmVyZWQgYmFja3JlZiAoc2luY2Ugb3RoZXIgbnVtYmVyZWRcbiAgICAgICAgICAvLyAgIGJhY2tyZWZzIGFyZSBwcmV2ZW50ZWQgYnkgaW1wbGljaXQgZmxhZyBuKS5cbiAgICAgICAgICAvLyAtIEEgbnVtYmVyZWQgYmFja3JlZiwgd2hlbiBmbGFnIG4gaXMgZXhwbGljaXRseSBkaXNhYmxlZC5cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgUmVnZXgrJ3MgZXh0ZW5kZWQgc3ludGF4IChhdG9taWMgZ3JvdXBzIGFuZCBzb21ldGltZXMgc3Vicm91dGluZXMpIGNhbiBhbHNvXG4gICAgICAgICAgLy8gYWRkIG51bWJlcmVkIGJhY2tyZWZzLCBidXQgdGhvc2Ugd29yayBmaW5lIGJlY2F1c2UgZXh0ZXJuYWwgcGx1Z2lucyBsaWtlIHRoaXMgb25lIHJ1blxuICAgICAgICAgIC8vICpiZWZvcmUqIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiBidWlsdC1pbiBzeW50YXggZXh0ZW5zaW9uc1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIC8vIFdoZW4gdXNlZCBpbiBgZXh0ZXJuYWxgIG1vZGUgYnkgdHJhbnNwaWxlcnMgb3RoZXIgdGhhbiBSZWdleCssIGJhY2tyZWZzIG1pZ2h0IGhhdmVcbiAgICAgICAgICAgIC8vIGdvbmUgdGhyb3VnaCBjb252ZXJzaW9uIGZyb20gbmFtZWQgdG8gbnVtYmVyZWQsIHNvIGF2b2lkIGEgbWlzbGVhZGluZyBlcnJvclxuICAgICAgICAgICAgYCR7bW9kZSA9PT0gJ2V4dGVybmFsJyA/ICdCYWNrcmVmcycgOiAnTnVtYmVyZWQgYmFja3JlZnMnfSBjYW5ub3QgYmUgdXNlZCB3aXRoIGdsb2JhbCByZWN1cnNpb25gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZWZ0ID0gcGF0dGVybi5zbGljZSgwLCBtYXRjaC5pbmRleCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gcGF0dGVybi5zbGljZSh0b2tlbi5sYXN0SW5kZXgpO1xuICAgICAgICBpZiAoaGFzVW5lc2NhcGVkKHJpZ2h0LCByZWN1cnNpdmVUb2tlbiwgQ29udGV4dC5ERUZBVUxUKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvdmVybGFwcGluZ1JlY3Vyc2lvbk1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVwcyA9ICtyRGVwdGggLSAxO1xuICAgICAgICBwYXR0ZXJuID0gbWFrZVJlY3Vyc2l2ZShcbiAgICAgICAgICBsZWZ0LFxuICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgIHJlcHMsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgaGlkZGVuQ2FwdHVyZXMsXG4gICAgICAgICAgYWRkZWRIaWRkZW5DYXB0dXJlcyxcbiAgICAgICAgICBudW1DYXB0dXJlc1Bhc3NlZFxuICAgICAgICApO1xuICAgICAgICBjYXB0dXJlVHJhbnNmZXJzID0gbWFwQ2FwdHVyZVRyYW5zZmVycyhcbiAgICAgICAgICBjYXB0dXJlVHJhbnNmZXJzLFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgcmVwcyxcbiAgICAgICAgICBhZGRlZEhpZGRlbkNhcHR1cmVzLmxlbmd0aCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIG51bUNhcHR1cmVzUGFzc2VkXG4gICAgICAgICk7XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gcGFyc2UgZnVydGhlclxuICAgICAgICBicmVhaztcbiAgICAgIC8vIGBcXGc8bmFtZSZSPU4+YCwgYFxcZzxudW1iZXImUj1OPmBcbiAgICAgIH0gZWxzZSBpZiAoZ1JOYW1lT3JOdW0pIHtcbiAgICAgICAgYXNzZXJ0TWF4SW5Cb3VuZHMoZ1JEZXB0aCk7XG4gICAgICAgIGxldCBpc1dpdGhpblJlZmZlZEdyb3VwID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZyBvZiBvcGVuR3JvdXBzKSB7XG4gICAgICAgICAgaWYgKGcubmFtZSA9PT0gZ1JOYW1lT3JOdW0gfHwgZy5udW0gPT09ICtnUk5hbWVPck51bSkge1xuICAgICAgICAgICAgaXNXaXRoaW5SZWZmZWRHcm91cCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZy5oYXNSZWN1cnNlZFdpdGhpbikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iob3ZlcmxhcHBpbmdSZWN1cnNpb25Nc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNXaXRoaW5SZWZmZWRHcm91cCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyYFJlY3Vyc2l2ZSBcXGcgY2Fubm90IGJlIHVzZWQgb3V0c2lkZSB0aGUgcmVmZXJlbmNlZCBncm91cCBcIiR7XG4gICAgICAgICAgICBtb2RlID09PSAnZXh0ZXJuYWwnID8gZ1JOYW1lT3JOdW0gOiByYFxcZzwke2dSTmFtZU9yTnVtfSZSPSR7Z1JEZXB0aH0+YFxuICAgICAgICAgIH1cImApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gZ3JvdXBDb250ZW50c1N0YXJ0UG9zLmdldChnUk5hbWVPck51bSk7XG4gICAgICAgIGNvbnN0IGdyb3VwQ29udGVudHMgPSBnZXRHcm91cENvbnRlbnRzKHBhdHRlcm4sIHN0YXJ0UG9zKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGhhc051bWJlcmVkQmFja3JlZiAmJlxuICAgICAgICAgIGhhc1VuZXNjYXBlZChncm91cENvbnRlbnRzLCByYCR7bmFtZWRDYXB0dXJlRGVsaW19fFxcKCg/IVxcPylgLCBDb250ZXh0LkRFRkFVTFQpXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIC8vIFdoZW4gdXNlZCBpbiBgZXh0ZXJuYWxgIG1vZGUgYnkgdHJhbnNwaWxlcnMgb3RoZXIgdGhhbiBSZWdleCssIGJhY2tyZWZzIG1pZ2h0IGhhdmVcbiAgICAgICAgICAgIC8vIGdvbmUgdGhyb3VnaCBjb252ZXJzaW9uIGZyb20gbmFtZWQgdG8gbnVtYmVyZWQsIHNvIGF2b2lkIGEgbWlzbGVhZGluZyBlcnJvclxuICAgICAgICAgICAgYCR7bW9kZSA9PT0gJ2V4dGVybmFsJyA/ICdCYWNrcmVmcycgOiAnTnVtYmVyZWQgYmFja3JlZnMnfSBjYW5ub3QgYmUgdXNlZCB3aXRoIHJlY3Vyc2lvbiBvZiBjYXB0dXJpbmcgZ3JvdXBzYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3JvdXBDb250ZW50c0xlZnQgPSBwYXR0ZXJuLnNsaWNlKHN0YXJ0UG9zLCBtYXRjaC5pbmRleCk7XG4gICAgICAgIGNvbnN0IGdyb3VwQ29udGVudHNSaWdodCA9IGdyb3VwQ29udGVudHMuc2xpY2UoZ3JvdXBDb250ZW50c0xlZnQubGVuZ3RoICsgbS5sZW5ndGgpO1xuICAgICAgICBjb25zdCBudW1BZGRlZEhpZGRlbkNhcHR1cmVzUHJlRXhwYW5zaW9uID0gYWRkZWRIaWRkZW5DYXB0dXJlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlcHMgPSArZ1JEZXB0aCAtIDE7XG4gICAgICAgIGNvbnN0IGV4cGFuc2lvbiA9IG1ha2VSZWN1cnNpdmUoXG4gICAgICAgICAgZ3JvdXBDb250ZW50c0xlZnQsXG4gICAgICAgICAgZ3JvdXBDb250ZW50c1JpZ2h0LFxuICAgICAgICAgIHJlcHMsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBoaWRkZW5DYXB0dXJlcyxcbiAgICAgICAgICBhZGRlZEhpZGRlbkNhcHR1cmVzLFxuICAgICAgICAgIG51bUNhcHR1cmVzUGFzc2VkXG4gICAgICAgICk7XG4gICAgICAgIGNhcHR1cmVUcmFuc2ZlcnMgPSBtYXBDYXB0dXJlVHJhbnNmZXJzKFxuICAgICAgICAgIGNhcHR1cmVUcmFuc2ZlcnMsXG4gICAgICAgICAgZ3JvdXBDb250ZW50c0xlZnQsXG4gICAgICAgICAgcmVwcyxcbiAgICAgICAgICBhZGRlZEhpZGRlbkNhcHR1cmVzLmxlbmd0aCAtIG51bUFkZGVkSGlkZGVuQ2FwdHVyZXNQcmVFeHBhbnNpb24sXG4gICAgICAgICAgbnVtQWRkZWRIaWRkZW5DYXB0dXJlc1ByZUV4cGFuc2lvbixcbiAgICAgICAgICBudW1DYXB0dXJlc1Bhc3NlZFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBwcmUgPSBwYXR0ZXJuLnNsaWNlKDAsIHN0YXJ0UG9zKTtcbiAgICAgICAgY29uc3QgcG9zdCA9IHBhdHRlcm4uc2xpY2Uoc3RhcnRQb3MgKyBncm91cENvbnRlbnRzLmxlbmd0aCk7XG4gICAgICAgIC8vIE1vZGlmeSB0aGUgc3RyaW5nIHdlJ3JlIGxvb3Bpbmcgb3ZlclxuICAgICAgICBwYXR0ZXJuID0gYCR7cHJlfSR7ZXhwYW5zaW9ufSR7cG9zdH1gO1xuICAgICAgICAvLyBTdGVwIGZvcndhcmQgZm9yIHRoZSBuZXh0IGxvb3AgaXRlcmF0aW9uXG4gICAgICAgIHRva2VuLmxhc3RJbmRleCArPSBleHBhbnNpb24ubGVuZ3RoIC0gbS5sZW5ndGggLSBncm91cENvbnRlbnRzTGVmdC5sZW5ndGggLSBncm91cENvbnRlbnRzUmlnaHQubGVuZ3RoO1xuICAgICAgICBvcGVuR3JvdXBzLmZvckVhY2goZyA9PiBnLmhhc1JlY3Vyc2VkV2l0aGluID0gdHJ1ZSk7XG4gICAgICAgIGhhc1JlY3Vyc2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2FwdHVyZU5hbWUpIHtcbiAgICAgICAgbnVtQ2FwdHVyZXNQYXNzZWQrKztcbiAgICAgICAgZ3JvdXBDb250ZW50c1N0YXJ0UG9zLnNldChTdHJpbmcobnVtQ2FwdHVyZXNQYXNzZWQpLCB0b2tlbi5sYXN0SW5kZXgpO1xuICAgICAgICBncm91cENvbnRlbnRzU3RhcnRQb3Muc2V0KGNhcHR1cmVOYW1lLCB0b2tlbi5sYXN0SW5kZXgpO1xuICAgICAgICBvcGVuR3JvdXBzLnB1c2goe1xuICAgICAgICAgIG51bTogbnVtQ2FwdHVyZXNQYXNzZWQsXG4gICAgICAgICAgbmFtZTogY2FwdHVyZU5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChtWzBdID09PSAnKCcpIHtcbiAgICAgICAgY29uc3QgaXNVbm5hbWVkQ2FwdHVyZSA9IG0gPT09ICcoJztcbiAgICAgICAgaWYgKGlzVW5uYW1lZENhcHR1cmUpIHtcbiAgICAgICAgICBudW1DYXB0dXJlc1Bhc3NlZCsrO1xuICAgICAgICAgIGdyb3VwQ29udGVudHNTdGFydFBvcy5zZXQoU3RyaW5nKG51bUNhcHR1cmVzUGFzc2VkKSwgdG9rZW4ubGFzdEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBvcGVuR3JvdXBzLnB1c2goaXNVbm5hbWVkQ2FwdHVyZSA/IHtudW06IG51bUNhcHR1cmVzUGFzc2VkfSA6IHt9KTtcbiAgICAgIH0gZWxzZSBpZiAobSA9PT0gJyknKSB7XG4gICAgICAgIG9wZW5Hcm91cHMucG9wKCk7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKG0gPT09ICddJykge1xuICAgICAgbnVtQ2hhckNsYXNzZXNPcGVuLS07XG4gICAgfVxuICB9XG5cbiAgaGlkZGVuQ2FwdHVyZXMucHVzaCguLi5hZGRlZEhpZGRlbkNhcHR1cmVzKTtcblxuICByZXR1cm4ge1xuICAgIHBhdHRlcm4sXG4gICAgY2FwdHVyZVRyYW5zZmVycyxcbiAgICBoaWRkZW5DYXB0dXJlcyxcbiAgfTtcbn1cblxuLyoqXG5AcGFyYW0ge3N0cmluZ30gbWF4XG4qL1xuZnVuY3Rpb24gYXNzZXJ0TWF4SW5Cb3VuZHMobWF4KSB7XG4gIGNvbnN0IGVyck1zZyA9IGBNYXggZGVwdGggbXVzdCBiZSBpbnRlZ2VyIGJldHdlZW4gMiBhbmQgMTAwOyB1c2VkICR7bWF4fWA7XG4gIGlmICghL15bMS05XVxcZCokLy50ZXN0KG1heCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgfVxuICBtYXggPSArbWF4O1xuICBpZiAobWF4IDwgMiB8fCBtYXggPiAxMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgfVxufVxuXG4vKipcbkBwYXJhbSB7c3RyaW5nfSBsZWZ0XG5AcGFyYW0ge3N0cmluZ30gcmlnaHRcbkBwYXJhbSB7bnVtYmVyfSByZXBzXG5AcGFyYW0ge2Jvb2xlYW59IGlzU3VicGF0dGVyblxuQHBhcmFtIHtBcnJheTxudW1iZXI+fSBoaWRkZW5DYXB0dXJlc1xuQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhZGRlZEhpZGRlbkNhcHR1cmVzXG5AcGFyYW0ge251bWJlcn0gbnVtQ2FwdHVyZXNQYXNzZWRcbkByZXR1cm5zIHtzdHJpbmd9XG4qL1xuZnVuY3Rpb24gbWFrZVJlY3Vyc2l2ZShcbiAgbGVmdCxcbiAgcmlnaHQsXG4gIHJlcHMsXG4gIGlzU3VicGF0dGVybixcbiAgaGlkZGVuQ2FwdHVyZXMsXG4gIGFkZGVkSGlkZGVuQ2FwdHVyZXMsXG4gIG51bUNhcHR1cmVzUGFzc2VkXG4pIHtcbiAgY29uc3QgbmFtZXNJblJlY3Vyc2VkID0gbmV3IFNldCgpO1xuICAvLyBDYW4gc2tpcCB0aGlzIHdvcmsgaWYgbm90IG5lZWRlZFxuICBpZiAoaXNTdWJwYXR0ZXJuKSB7XG4gICAgZm9yRWFjaFVuZXNjYXBlZChsZWZ0ICsgcmlnaHQsIG5hbWVkQ2FwdHVyZURlbGltLCAoe2dyb3Vwczoge2NhcHR1cmVOYW1lfX0pID0+IHtcbiAgICAgIG5hbWVzSW5SZWN1cnNlZC5hZGQoY2FwdHVyZU5hbWUpO1xuICAgIH0sIENvbnRleHQuREVGQVVMVCk7XG4gIH1cbiAgY29uc3QgcmVzdCA9IFtcbiAgICByZXBzLFxuICAgIGlzU3VicGF0dGVybiA/IG5hbWVzSW5SZWN1cnNlZCA6IG51bGwsXG4gICAgaGlkZGVuQ2FwdHVyZXMsXG4gICAgYWRkZWRIaWRkZW5DYXB0dXJlcyxcbiAgICBudW1DYXB0dXJlc1Bhc3NlZCxcbiAgXTtcbiAgLy8gRGVwdGggMjogJ2xlZnQoPzpsZWZ0KD86KXJpZ2h0KXJpZ2h0J1xuICAvLyBEZXB0aCAzOiAnbGVmdCg/OmxlZnQoPzpsZWZ0KD86KXJpZ2h0KXJpZ2h0KXJpZ2h0J1xuICAvLyBFbXB0eSBncm91cCBpbiB0aGUgbWlkZGxlIHNlcGFyYXRlcyB0b2tlbnMgYW5kIGFic29yYnMgYSBmb2xsb3dpbmcgcXVhbnRpZmllciBpZiBwcmVzZW50XG4gIHJldHVybiBgJHtsZWZ0fSR7XG4gICAgcmVwZWF0V2l0aERlcHRoKGAoPzoke2xlZnR9YCwgJ2ZvcndhcmQnLCAuLi5yZXN0KVxuICB9KD86KSR7XG4gICAgcmVwZWF0V2l0aERlcHRoKGAke3JpZ2h0fSlgLCAnYmFja3dhcmQnLCAuLi5yZXN0KVxuICB9JHtyaWdodH1gO1xufVxuXG4vKipcbkBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG5AcGFyYW0geydmb3J3YXJkJyB8ICdiYWNrd2FyZCd9IGRpcmVjdGlvblxuQHBhcmFtIHtudW1iZXJ9IHJlcHNcbkBwYXJhbSB7U2V0PHN0cmluZz4gfCBudWxsfSBuYW1lc0luUmVjdXJzZWRcbkBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gaGlkZGVuQ2FwdHVyZXNcbkBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYWRkZWRIaWRkZW5DYXB0dXJlc1xuQHBhcmFtIHtudW1iZXJ9IG51bUNhcHR1cmVzUGFzc2VkXG5AcmV0dXJucyB7c3RyaW5nfVxuKi9cbmZ1bmN0aW9uIHJlcGVhdFdpdGhEZXB0aChcbiAgcGF0dGVybixcbiAgZGlyZWN0aW9uLFxuICByZXBzLFxuICBuYW1lc0luUmVjdXJzZWQsXG4gIGhpZGRlbkNhcHR1cmVzLFxuICBhZGRlZEhpZGRlbkNhcHR1cmVzLFxuICBudW1DYXB0dXJlc1Bhc3NlZFxuKSB7XG4gIGNvbnN0IHN0YXJ0TnVtID0gMjtcbiAgY29uc3QgZ2V0RGVwdGhOdW0gPSBpID0+IGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gKGkgKyBzdGFydE51bSkgOiAocmVwcyAtIGkgKyBzdGFydE51bSAtIDEpO1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwczsgaSsrKSB7XG4gICAgY29uc3QgZGVwdGhOdW0gPSBnZXREZXB0aE51bShpKTtcbiAgICByZXN1bHQgKz0gcmVwbGFjZVVuZXNjYXBlZChcbiAgICAgIHBhdHRlcm4sXG4gICAgICByYCR7Y2FwdHVyZURlbGltfXxcXFxcazwoPzxiYWNrcmVmPltePl0rKT5gLFxuICAgICAgKHswOiBtLCBncm91cHM6IHtjYXB0dXJlTmFtZSwgdW5uYW1lZCwgYmFja3JlZn19KSA9PiB7XG4gICAgICAgIGlmIChiYWNrcmVmICYmIG5hbWVzSW5SZWN1cnNlZCAmJiAhbmFtZXNJblJlY3Vyc2VkLmhhcyhiYWNrcmVmKSkge1xuICAgICAgICAgIC8vIERvbid0IGFsdGVyIGJhY2tyZWZzIHRvIGdyb3VwcyBvdXRzaWRlIHRoZSByZWN1cnNlZCBzdWJwYXR0ZXJuXG4gICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3VmZml4ID0gYF8kJHtkZXB0aE51bX1gO1xuICAgICAgICBpZiAodW5uYW1lZCB8fCBjYXB0dXJlTmFtZSkge1xuICAgICAgICAgIGNvbnN0IGFkZGVkQ2FwdHVyZU51bSA9IG51bUNhcHR1cmVzUGFzc2VkICsgYWRkZWRIaWRkZW5DYXB0dXJlcy5sZW5ndGggKyAxO1xuICAgICAgICAgIGFkZGVkSGlkZGVuQ2FwdHVyZXMucHVzaChhZGRlZENhcHR1cmVOdW0pO1xuICAgICAgICAgIGluY3JlbWVudElmQXRMZWFzdChoaWRkZW5DYXB0dXJlcywgYWRkZWRDYXB0dXJlTnVtKTtcbiAgICAgICAgICByZXR1cm4gdW5uYW1lZCA/IG0gOiBgKD88JHtjYXB0dXJlTmFtZX0ke3N1ZmZpeH0+YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmBcXGs8JHtiYWNrcmVmfSR7c3VmZml4fT5gO1xuICAgICAgfSxcbiAgICAgIENvbnRleHQuREVGQVVMVFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG5VcGRhdGVzIHRoZSBhcnJheSBpbiBwbGFjZSBieSBpbmNyZW1lbnRpbmcgZWFjaCB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHRocmVzaG9sZC5cbkBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYXJyXG5AcGFyYW0ge251bWJlcn0gdGhyZXNob2xkXG4qL1xuZnVuY3Rpb24gaW5jcmVtZW50SWZBdExlYXN0KGFyciwgdGhyZXNob2xkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSA+PSB0aHJlc2hvbGQpIHtcbiAgICAgIGFycltpXSsrO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbkBwYXJhbSB7TWFwPG51bWJlciwgQXJyYXk8bnVtYmVyPj59IGNhcHR1cmVUcmFuc2ZlcnNcbkBwYXJhbSB7c3RyaW5nfSBsZWZ0XG5AcGFyYW0ge251bWJlcn0gcmVwc1xuQHBhcmFtIHtudW1iZXJ9IG51bUNhcHR1cmVzQWRkZWRJbkV4cGFuc2lvblxuQHBhcmFtIHtudW1iZXJ9IG51bUFkZGVkSGlkZGVuQ2FwdHVyZXNQcmVFeHBhbnNpb25cbkBwYXJhbSB7bnVtYmVyfSBudW1DYXB0dXJlc1Bhc3NlZFxuQHJldHVybnMge01hcDxudW1iZXIsIEFycmF5PG51bWJlcj4+fVxuKi9cbmZ1bmN0aW9uIG1hcENhcHR1cmVUcmFuc2ZlcnMoY2FwdHVyZVRyYW5zZmVycywgbGVmdCwgcmVwcywgbnVtQ2FwdHVyZXNBZGRlZEluRXhwYW5zaW9uLCBudW1BZGRlZEhpZGRlbkNhcHR1cmVzUHJlRXhwYW5zaW9uLCBudW1DYXB0dXJlc1Bhc3NlZCkge1xuICBpZiAoY2FwdHVyZVRyYW5zZmVycy5zaXplICYmIG51bUNhcHR1cmVzQWRkZWRJbkV4cGFuc2lvbikge1xuICAgIGxldCBudW1DYXB0dXJlc0luTGVmdCA9IDA7XG4gICAgZm9yRWFjaFVuZXNjYXBlZChsZWZ0LCBjYXB0dXJlRGVsaW0sICgpID0+IG51bUNhcHR1cmVzSW5MZWZ0KyssIENvbnRleHQuREVGQVVMVCk7XG4gICAgLy8gSXMgMCBmb3IgZ2xvYmFsIHJlY3Vyc2lvblxuICAgIGNvbnN0IHJlY3Vyc2lvbkRlbGltQ2FwdHVyZU51bSA9IG51bUNhcHR1cmVzUGFzc2VkIC0gbnVtQ2FwdHVyZXNJbkxlZnQgKyBudW1BZGRlZEhpZGRlbkNhcHR1cmVzUHJlRXhwYW5zaW9uO1xuICAgIGNvbnN0IG5ld0NhcHR1cmVUcmFuc2ZlcnMgPSBuZXcgTWFwKCk7XG4gICAgY2FwdHVyZVRyYW5zZmVycy5mb3JFYWNoKChmcm9tLCB0bykgPT4ge1xuICAgICAgY29uc3QgbnVtQ2FwdHVyZXNJblJpZ2h0ID0gKG51bUNhcHR1cmVzQWRkZWRJbkV4cGFuc2lvbiAtIChudW1DYXB0dXJlc0luTGVmdCAqIHJlcHMpKSAvIHJlcHM7XG4gICAgICBjb25zdCBudW1DYXB0dXJlc0FkZGVkSW5MZWZ0ID0gbnVtQ2FwdHVyZXNJbkxlZnQgKiByZXBzO1xuICAgICAgY29uc3QgbmV3VG8gPSB0byA+IChyZWN1cnNpb25EZWxpbUNhcHR1cmVOdW0gKyBudW1DYXB0dXJlc0luTGVmdCkgPyB0byArIG51bUNhcHR1cmVzQWRkZWRJbkV4cGFuc2lvbiA6IHRvO1xuICAgICAgY29uc3QgbmV3RnJvbSA9IFtdO1xuICAgICAgZm9yIChjb25zdCBmIG9mIGZyb20pIHtcbiAgICAgICAgLy8gQmVmb3JlIHRoZSByZWN1cnNlZCBzdWJwYXR0ZXJuXG4gICAgICAgIGlmIChmIDw9IHJlY3Vyc2lvbkRlbGltQ2FwdHVyZU51bSkge1xuICAgICAgICAgIG5ld0Zyb20ucHVzaChmKTtcbiAgICAgICAgLy8gQWZ0ZXIgdGhlIHJlY3Vyc2VkIHN1YnBhdHRlcm5cbiAgICAgICAgfSBlbHNlIGlmIChmID4gKHJlY3Vyc2lvbkRlbGltQ2FwdHVyZU51bSArIG51bUNhcHR1cmVzSW5MZWZ0ICsgbnVtQ2FwdHVyZXNJblJpZ2h0KSkge1xuICAgICAgICAgIG5ld0Zyb20ucHVzaChmICsgbnVtQ2FwdHVyZXNBZGRlZEluRXhwYW5zaW9uKTtcbiAgICAgICAgLy8gV2l0aGluIHRoZSByZWN1cnNlZCBzdWJwYXR0ZXJuLCBvbiB0aGUgbGVmdCBvZiB0aGUgcmVjdXJzaW9uIHRva2VuXG4gICAgICAgIH0gZWxzZSBpZiAoZiA8PSAocmVjdXJzaW9uRGVsaW1DYXB0dXJlTnVtICsgbnVtQ2FwdHVyZXNJbkxlZnQpKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcmVwczsgaSsrKSB7XG4gICAgICAgICAgICBuZXdGcm9tLnB1c2goZiArIChudW1DYXB0dXJlc0luTGVmdCAqIGkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIC8vIFdpdGhpbiB0aGUgcmVjdXJzZWQgc3VicGF0dGVybiwgb24gdGhlIHJpZ2h0IG9mIHRoZSByZWN1cnNpb24gdG9rZW5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSByZXBzOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0Zyb20ucHVzaChmICsgbnVtQ2FwdHVyZXNBZGRlZEluTGVmdCArIChudW1DYXB0dXJlc0luUmlnaHQgKiBpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXdDYXB0dXJlVHJhbnNmZXJzLnNldChuZXdUbywgbmV3RnJvbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld0NhcHR1cmVUcmFuc2ZlcnM7XG4gIH1cbiAgcmV0dXJuIGNhcHR1cmVUcmFuc2ZlcnM7XG59XG5cbmV4cG9ydCB7XG4gIHJlY3Vyc2lvbixcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/regex-recursion@6.0.2/node_modules/regex-recursion/src/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/regex-utilities@2.3.0/node_modules/regex-utilities/src/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/regex-utilities@2.3.0/node_modules/regex-utilities/src/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   execUnescaped: () => (/* binding */ execUnescaped),\n/* harmony export */   forEachUnescaped: () => (/* binding */ forEachUnescaped),\n/* harmony export */   getGroupContents: () => (/* binding */ getGroupContents),\n/* harmony export */   hasUnescaped: () => (/* binding */ hasUnescaped),\n/* harmony export */   replaceUnescaped: () => (/* binding */ replaceUnescaped)\n/* harmony export */ });\n// Constant properties for tracking regex syntax context\nconst Context = Object.freeze({\n  DEFAULT: 'DEFAULT',\n  CHAR_CLASS: 'CHAR_CLASS',\n});\n\n/**\nReplaces all unescaped instances of a regex pattern in the given context, using a replacement\nstring or callback.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {string | (match: RegExpExecArray, details: {\n  context: 'DEFAULT' | 'CHAR_CLASS';\n  negated: boolean;\n}) => string} replacement\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n@returns {string} Updated expression\n@example\nconst str = '.\\\\.\\\\\\\\.[[\\\\.].].';\nreplaceUnescaped(str, '\\\\.', '@');\n// → '@\\\\.\\\\\\\\@[[\\\\.]@]@'\nreplaceUnescaped(str, '\\\\.', '@', Context.DEFAULT);\n// → '@\\\\.\\\\\\\\@[[\\\\.].]@'\nreplaceUnescaped(str, '\\\\.', '@', Context.CHAR_CLASS);\n// → '.\\\\.\\\\\\\\.[[\\\\.]@].'\n*/\nfunction replaceUnescaped(expression, needle, replacement, context) {\n  const re = new RegExp(String.raw`${needle}|(?<$skip>\\[\\^?|\\\\?.)`, 'gsu');\n  const negated = [false];\n  let numCharClassesOpen = 0;\n  let result = '';\n  for (const match of expression.matchAll(re)) {\n    const {0: m, groups: {$skip}} = match;\n    if (!$skip && (!context || (context === Context.DEFAULT) === !numCharClassesOpen)) {\n      if (replacement instanceof Function) {\n        result += replacement(match, {\n          context: numCharClassesOpen ? Context.CHAR_CLASS : Context.DEFAULT,\n          negated: negated[negated.length - 1],\n        });\n      } else {\n        result += replacement;\n      }\n      continue;\n    }\n    if (m[0] === '[') {\n      numCharClassesOpen++;\n      negated.push(m[1] === '^');\n    } else if (m === ']' && numCharClassesOpen) {\n      numCharClassesOpen--;\n      negated.pop();\n    }\n    result += m;\n  }\n  return result;\n}\n\n/**\nRuns a callback for each unescaped instance of a regex pattern in the given context.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {(match: RegExpExecArray, details: {\n  context: 'DEFAULT' | 'CHAR_CLASS';\n  negated: boolean;\n}) => void} callback\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n*/\nfunction forEachUnescaped(expression, needle, callback, context) {\n  // Do this the easy way\n  replaceUnescaped(expression, needle, callback, context);\n}\n\n/**\nReturns a match object for the first unescaped instance of a regex pattern in the given context, or\n`null`.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {number} [pos] Offset to start the search\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n@returns {RegExpExecArray | null}\n*/\nfunction execUnescaped(expression, needle, pos = 0, context) {\n  // Quick partial test; avoid the loop if not needed\n  if (!(new RegExp(needle, 'su').test(expression))) {\n    return null;\n  }\n  const re = new RegExp(`${needle}|(?<$skip>\\\\\\\\?.)`, 'gsu');\n  re.lastIndex = pos;\n  let numCharClassesOpen = 0;\n  let match;\n  while (match = re.exec(expression)) {\n    const {0: m, groups: {$skip}} = match;\n    if (!$skip && (!context || (context === Context.DEFAULT) === !numCharClassesOpen)) {\n      return match;\n    }\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (m === ']' && numCharClassesOpen) {\n      numCharClassesOpen--;\n    }\n    // Avoid an infinite loop on zero-length matches\n    if (re.lastIndex == match.index) {\n      re.lastIndex++;\n    }\n  }\n  return null;\n}\n\n/**\nChecks whether an unescaped instance of a regex pattern appears in the given context.\n\nDoesn't skip over complete multicharacter tokens (only `\\` plus its folowing char) so must be used\nwith knowledge of what's safe to do given regex syntax. Assumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {string} needle Search as a regex pattern, with flags `su` applied\n@param {'DEFAULT' | 'CHAR_CLASS'} [context] All contexts if not specified\n@returns {boolean} Whether the pattern was found\n*/\nfunction hasUnescaped(expression, needle, context) {\n  // Do this the easy way\n  return !!execUnescaped(expression, needle, 0, context);\n}\n\n/**\nExtracts the full contents of a group (subpattern) from the given expression, accounting for\nescaped characters, nested groups, and character classes. The group is identified by the position\nwhere its contents start (the string index just after the group's opening delimiter). Returns the\nrest of the string if the group is unclosed.\n\nAssumes UnicodeSets-mode syntax.\n@param {string} expression Search target\n@param {number} contentsStartPos\n@returns {string}\n*/\nfunction getGroupContents(expression, contentsStartPos) {\n  const token = /\\\\?./gsu;\n  token.lastIndex = contentsStartPos;\n  let contentsEndPos = expression.length;\n  let numCharClassesOpen = 0;\n  // Starting search within an open group, after the group's opening\n  let numGroupsOpen = 1;\n  let match;\n  while (match = token.exec(expression)) {\n    const [m] = match;\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (!numCharClassesOpen) {\n      if (m === '(') {\n        numGroupsOpen++;\n      } else if (m === ')') {\n        numGroupsOpen--;\n        if (!numGroupsOpen) {\n          contentsEndPos = match.index;\n          break;\n        }\n      }\n    } else if (m === ']') {\n      numCharClassesOpen--;\n    }\n  }\n  return expression.slice(contentsStartPos, contentsEndPos);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/regex-utilities@2.3.0/node_modules/regex-utilities/src/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   atomic: () => (/* binding */ atomic),\n/* harmony export */   possessive: () => (/* binding */ possessive)\n/* harmony export */ });\n/* harmony import */ var _utils_internals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-internals.js */ \"(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js\");\n/* harmony import */ var regex_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regex-utilities */ \"(app-pages-browser)/./node_modules/.pnpm/regex-utilities@2.3.0/node_modules/regex-utilities/src/index.js\");\n\n\n\nconst atomicPluginToken = new RegExp(String.raw`(?<noncapturingStart>${_utils_internals_js__WEBPACK_IMPORTED_MODULE_0__.noncapturingDelim})|(?<capturingStart>\\((?:\\?<[^>]+>)?)|\\\\?.`, 'gsu');\n\n/**\nApply transformations for atomic groups: `(?>…)`.\n@param {string} expression\n@param {import('./regex.js').PluginData} [data]\n@returns {Required<import('./regex.js').PluginResult>}\n*/\nfunction atomic(expression, data) {\n  const hiddenCaptures = data?.hiddenCaptures ?? [];\n  // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>\n  let captureTransfers = data?.captureTransfers ?? new Map();\n  if (!/\\(\\?>/.test(expression)) {\n    return {\n      pattern: expression,\n      captureTransfers,\n      hiddenCaptures,\n    };\n  }\n\n  const aGDelim = '(?>';\n  const emulatedAGDelim = '(?:(?=(';\n  const captureNumMap = [0];\n  const addedHiddenCaptures = [];\n  let numCapturesBeforeAG = 0;\n  let numAGs = 0;\n  let aGPos = NaN;\n  let hasProcessedAG;\n  do {\n    hasProcessedAG = false;\n    let numCharClassesOpen = 0;\n    let numGroupsOpenInAG = 0;\n    let inAG = false;\n    let match;\n    atomicPluginToken.lastIndex = Number.isNaN(aGPos) ? 0 : aGPos + emulatedAGDelim.length;\n    while (match = atomicPluginToken.exec(expression)) {\n      const {0: m, index, groups: {capturingStart, noncapturingStart}} = match;\n      if (m === '[') {\n        numCharClassesOpen++;\n      } else if (!numCharClassesOpen) {\n\n        if (m === aGDelim && !inAG) {\n          aGPos = index;\n          inAG = true;\n        } else if (inAG && noncapturingStart) {\n          numGroupsOpenInAG++;\n        } else if (capturingStart) {\n          if (inAG) {\n            numGroupsOpenInAG++;\n          } else {\n            numCapturesBeforeAG++;\n            captureNumMap.push(numCapturesBeforeAG + numAGs);\n          }\n        } else if (m === ')' && inAG) {\n          if (!numGroupsOpenInAG) {\n            numAGs++;\n            const addedCaptureNum = numCapturesBeforeAG + numAGs;\n            // Replace `expression` and use `<$$N>` as a temporary wrapper for the backref so it\n            // can avoid backref renumbering afterward. Wrap the whole substitution (including the\n            // lookahead and following backref) in a noncapturing group to handle following\n            // quantifiers and literal digits\n            expression = `${expression.slice(0, aGPos)}${emulatedAGDelim}${\n                expression.slice(aGPos + aGDelim.length, index)\n              }))<$$${addedCaptureNum}>)${expression.slice(index + 1)}`;\n            hasProcessedAG = true;\n            addedHiddenCaptures.push(addedCaptureNum);\n            (0,_utils_internals_js__WEBPACK_IMPORTED_MODULE_0__.incrementIfAtLeast)(hiddenCaptures, addedCaptureNum);\n            if (captureTransfers.size) {\n              const newCaptureTransfers = new Map();\n              captureTransfers.forEach((from, to) => {\n                newCaptureTransfers.set(\n                  to >= addedCaptureNum ? to + 1 : to,\n                  from.map(f => f >= addedCaptureNum ? f + 1 : f)\n                );\n              });\n              captureTransfers = newCaptureTransfers;\n            }\n            break;\n          }\n          numGroupsOpenInAG--;\n        }\n\n      } else if (m === ']') {\n        numCharClassesOpen--;\n      }\n    }\n  // Start over from the beginning of the atomic group's contents, in case the processed group\n  // contains additional atomic groups\n  } while (hasProcessedAG);\n\n  hiddenCaptures.push(...addedHiddenCaptures);\n\n  // Second pass to adjust numbered backrefs\n  expression = (0,regex_utilities__WEBPACK_IMPORTED_MODULE_1__.replaceUnescaped)(\n    expression,\n    String.raw`\\\\(?<backrefNum>[1-9]\\d*)|<\\$\\$(?<wrappedBackrefNum>\\d+)>`,\n    ({0: m, groups: {backrefNum, wrappedBackrefNum}}) => {\n      if (backrefNum) {\n        const bNum = +backrefNum;\n        if (bNum > captureNumMap.length - 1) {\n          throw new Error(`Backref \"${m}\" greater than number of captures`);\n        }\n        return `\\\\${captureNumMap[bNum]}`;\n      }\n      return `\\\\${wrappedBackrefNum}`;\n    },\n    regex_utilities__WEBPACK_IMPORTED_MODULE_1__.Context.DEFAULT\n  );\n\n  return {\n    pattern: expression,\n    captureTransfers,\n    hiddenCaptures,\n  };\n}\n\nconst baseQuantifier = String.raw`(?:[?*+]|\\{\\d+(?:,\\d*)?\\})`;\n// Complete tokenizer for base syntax; doesn't (need to) know about character-class-only syntax\nconst possessivePluginToken = new RegExp(String.raw`\n\\\\(?: \\d+\n  | c[A-Za-z]\n  | [gk]<[^>]+>\n  | [pPu]\\{[^\\}]+\\}\n  | u[A-Fa-f\\d]{4}\n  | x[A-Fa-f\\d]{2}\n  )\n| \\((?: \\? (?: [:=!>]\n  | <(?:[=!]|[^>]+>)\n  | [A-Za-z\\-]+:\n  | \\(DEFINE\\)\n  ))?\n| (?<qBase>${baseQuantifier})(?<qMod>[?+]?)(?<invalidQ>[?*+\\{]?)\n| \\\\?.\n`.replace(/\\s+/g, ''), 'gsu');\n\n/**\nTransform posessive quantifiers into atomic groups. The posessessive quantifiers are:\n`?+`, `*+`, `++`, `{N}+`, `{N,}+`, `{N,N}+`.\nThis follows Java, PCRE, Perl, and Python.\nPossessive quantifiers in Oniguruma and Onigmo are only: `?+`, `*+`, `++`.\n@param {string} expression\n@returns {import('./regex.js').PluginResult}\n*/\nfunction possessive(expression) {\n  if (!(new RegExp(`${baseQuantifier}\\\\+`).test(expression))) {\n    return {\n      pattern: expression,\n    };\n  }\n\n  const openGroupIndices = [];\n  let lastGroupIndex = null;\n  let lastCharClassIndex = null;\n  let lastToken = '';\n  let numCharClassesOpen = 0;\n  let match;\n  possessivePluginToken.lastIndex = 0;\n  while (match = possessivePluginToken.exec(expression)) {\n    const {0: m, index, groups: {qBase, qMod, invalidQ}} = match;\n    if (m === '[') {\n      if (!numCharClassesOpen) {\n        lastCharClassIndex = index;\n      }\n      numCharClassesOpen++;\n    } else if (m === ']') {\n      if (numCharClassesOpen) {\n        numCharClassesOpen--;\n      // Unmatched `]`\n      } else {\n        lastCharClassIndex = null;\n      }\n    } else if (!numCharClassesOpen) {\n\n      if (qMod === '+' && lastToken && !lastToken.startsWith('(')) {\n        // Invalid following quantifier would become valid via the wrapping group\n        if (invalidQ) {\n          throw new Error(`Invalid quantifier \"${m}\"`);\n        }\n        let charsAdded = -1; // -1 for removed trailing `+`\n        // Possessivizing fixed repetition quantifiers like `{2}` does't change their behavior, so\n        // avoid doing so (convert them to greedy)\n        if (/^\\{\\d+\\}$/.test(qBase)) {\n          expression = (0,_utils_internals_js__WEBPACK_IMPORTED_MODULE_0__.spliceStr)(expression, index + qBase.length, qMod, '');\n        } else {\n          if (lastToken === ')' || lastToken === ']') {\n            const nodeIndex = lastToken === ')' ? lastGroupIndex : lastCharClassIndex;\n            // Unmatched `)` would break out of the wrapping group and mess with handling.\n            // Unmatched `]` wouldn't be a problem, but it's unnecessary to have dedicated support\n            // for unescaped `]++` since this won't work with flag u or v anyway\n            if (nodeIndex === null) {\n              throw new Error(`Invalid unmatched \"${lastToken}\"`);\n            }\n            expression = `${expression.slice(0, nodeIndex)}(?>${expression.slice(nodeIndex, index)}${qBase})${expression.slice(index + m.length)}`;\n          } else {\n            expression = `${expression.slice(0, index - lastToken.length)}(?>${lastToken}${qBase})${expression.slice(index + m.length)}`;\n          }\n          charsAdded += 4; // `(?>)`\n        }\n        possessivePluginToken.lastIndex += charsAdded;\n      } else if (m[0] === '(') {\n        openGroupIndices.push(index);\n      } else if (m === ')') {\n        lastGroupIndex = openGroupIndices.length ? openGroupIndices.pop() : null;\n      }\n\n    }\n    lastToken = m;\n  }\n\n  return {\n    pattern: expression,\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegExpSubclass: () => (/* reexport safe */ _subclass_js__WEBPACK_IMPORTED_MODULE_1__.RegExpSubclass),\n/* harmony export */   atomic: () => (/* reexport safe */ _atomic_js__WEBPACK_IMPORTED_MODULE_0__.atomic),\n/* harmony export */   possessive: () => (/* reexport safe */ _atomic_js__WEBPACK_IMPORTED_MODULE_0__.possessive)\n/* harmony export */ });\n/* harmony import */ var _atomic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.js */ \"(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/atomic.js\");\n/* harmony import */ var _subclass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subclass.js */ \"(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdleEA2LjAuMS9ub2RlX21vZHVsZXMvcmVnZXgvc3JjL2ludGVybmFscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErQztBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vcmVnZXhANi4wLjEvbm9kZV9tb2R1bGVzL3JlZ2V4L3NyYy9pbnRlcm5hbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHthdG9taWMsIHBvc3Nlc3NpdmV9IGZyb20gJy4vYXRvbWljLmpzJztcbmV4cG9ydCB7UmVnRXhwU3ViY2xhc3N9IGZyb20gJy4vc3ViY2xhc3MuanMnO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/internals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegExpSubclass: () => (/* binding */ RegExpSubclass)\n/* harmony export */ });\n/**\nWorks the same as JavaScript's native `RegExp` constructor in all contexts, but automatically\nadjusts subpattern matches and indices (with flag `d`) to account for captures added as part of\nemulating extended syntax.\n*/\nclass RegExpSubclass extends RegExp {\n  // Avoid `#private` to allow for subclassing\n  /**\n  @private\n  @type {Map<number, {\n    hidden: true;\n  }>}\n  */\n  _captureMap;\n  /**\n  @overload\n  @param {string} expression\n  @param {string} [flags]\n  @param {{\n    hiddenCaptures?: Array<number>;\n  }} [options]\n  */\n  /**\n  @overload\n  @param {RegExpSubclass} expression\n  @param {string} [flags]\n  */\n  constructor(expression, flags, options) {\n    // Argument `options` isn't provided when regexes are copied via `new RegExpSubclass(regexp)`,\n    // including as part of the internal handling of string methods `matchAll` and `split`\n    if (expression instanceof RegExp) {\n      if (options) {\n        throw new Error('Cannot provide options when copying a regexp');\n      }\n      super(expression, flags);\n      if (expression instanceof RegExpSubclass) {\n        this._captureMap = expression._captureMap;\n      } else {\n        this._captureMap = new Map();\n      }\n    } else {\n      super(expression, flags);\n      const hiddenCaptures = options?.hiddenCaptures ?? [];\n      this._captureMap = createCaptureMap(hiddenCaptures);\n    }\n  }\n  /**\n  Called internally by all String/RegExp methods that use regexes.\n  @override\n  @param {string} str\n  @returns {RegExpExecArray | null}\n  */\n  exec(str) {\n    const match = super.exec(str);\n    if (!match || !this._captureMap.size) {\n      return match;\n    }\n    const matchCopy = [...match];\n    // Empty all but the first value of the array while preserving its other properties\n    match.length = 1;\n    let indicesCopy;\n    if (this.hasIndices) {\n      indicesCopy = [...match.indices];\n      match.indices.length = 1;\n    }\n    for (let i = 1; i < matchCopy.length; i++) {\n      if (!this._captureMap.get(i)?.hidden) {\n        match.push(matchCopy[i]);\n        if (this.hasIndices) {\n          match.indices.push(indicesCopy[i]);\n        }\n      }\n    }\n    return match;\n  }\n}\n\n/**\nBuild the capturing group map, with hidden captures marked to indicate their submatches shouldn't\nappear in match results.\n@param {Array<number>} hiddenCaptures\n@returns {Map<number, {\n  hidden: true;\n}>}\n*/\nfunction createCaptureMap(hiddenCaptures) {\n  const captureMap = new Map();\n  for (const num of hiddenCaptures) {\n    captureMap.set(num, {\n      hidden: true,\n    });\n  }\n  return captureMap;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdleEA2LjAuMS9ub2RlX21vZHVsZXMvcmVnZXgvc3JjL3N1YmNsYXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFFBQVE7QUFDbEIsVUFBVSxRQUFRO0FBQ2xCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0I7QUFDMUIsVUFBVSxRQUFRO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGVBQWU7QUFDdkIsVUFBVTtBQUNWO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBSUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdleEA2LjAuMS9ub2RlX21vZHVsZXMvcmVnZXgvc3JjL3N1YmNsYXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuV29ya3MgdGhlIHNhbWUgYXMgSmF2YVNjcmlwdCdzIG5hdGl2ZSBgUmVnRXhwYCBjb25zdHJ1Y3RvciBpbiBhbGwgY29udGV4dHMsIGJ1dCBhdXRvbWF0aWNhbGx5XG5hZGp1c3RzIHN1YnBhdHRlcm4gbWF0Y2hlcyBhbmQgaW5kaWNlcyAod2l0aCBmbGFnIGBkYCkgdG8gYWNjb3VudCBmb3IgY2FwdHVyZXMgYWRkZWQgYXMgcGFydCBvZlxuZW11bGF0aW5nIGV4dGVuZGVkIHN5bnRheC5cbiovXG5jbGFzcyBSZWdFeHBTdWJjbGFzcyBleHRlbmRzIFJlZ0V4cCB7XG4gIC8vIEF2b2lkIGAjcHJpdmF0ZWAgdG8gYWxsb3cgZm9yIHN1YmNsYXNzaW5nXG4gIC8qKlxuICBAcHJpdmF0ZVxuICBAdHlwZSB7TWFwPG51bWJlciwge1xuICAgIGhpZGRlbjogdHJ1ZTtcbiAgfT59XG4gICovXG4gIF9jYXB0dXJlTWFwO1xuICAvKipcbiAgQG92ZXJsb2FkXG4gIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uXG4gIEBwYXJhbSB7c3RyaW5nfSBbZmxhZ3NdXG4gIEBwYXJhbSB7e1xuICAgIGhpZGRlbkNhcHR1cmVzPzogQXJyYXk8bnVtYmVyPjtcbiAgfX0gW29wdGlvbnNdXG4gICovXG4gIC8qKlxuICBAb3ZlcmxvYWRcbiAgQHBhcmFtIHtSZWdFeHBTdWJjbGFzc30gZXhwcmVzc2lvblxuICBAcGFyYW0ge3N0cmluZ30gW2ZsYWdzXVxuICAqL1xuICBjb25zdHJ1Y3RvcihleHByZXNzaW9uLCBmbGFncywgb3B0aW9ucykge1xuICAgIC8vIEFyZ3VtZW50IGBvcHRpb25zYCBpc24ndCBwcm92aWRlZCB3aGVuIHJlZ2V4ZXMgYXJlIGNvcGllZCB2aWEgYG5ldyBSZWdFeHBTdWJjbGFzcyhyZWdleHApYCxcbiAgICAvLyBpbmNsdWRpbmcgYXMgcGFydCBvZiB0aGUgaW50ZXJuYWwgaGFuZGxpbmcgb2Ygc3RyaW5nIG1ldGhvZHMgYG1hdGNoQWxsYCBhbmQgYHNwbGl0YFxuICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwcm92aWRlIG9wdGlvbnMgd2hlbiBjb3B5aW5nIGEgcmVnZXhwJyk7XG4gICAgICB9XG4gICAgICBzdXBlcihleHByZXNzaW9uLCBmbGFncyk7XG4gICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFJlZ0V4cFN1YmNsYXNzKSB7XG4gICAgICAgIHRoaXMuX2NhcHR1cmVNYXAgPSBleHByZXNzaW9uLl9jYXB0dXJlTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FwdHVyZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIoZXhwcmVzc2lvbiwgZmxhZ3MpO1xuICAgICAgY29uc3QgaGlkZGVuQ2FwdHVyZXMgPSBvcHRpb25zPy5oaWRkZW5DYXB0dXJlcyA/PyBbXTtcbiAgICAgIHRoaXMuX2NhcHR1cmVNYXAgPSBjcmVhdGVDYXB0dXJlTWFwKGhpZGRlbkNhcHR1cmVzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gIENhbGxlZCBpbnRlcm5hbGx5IGJ5IGFsbCBTdHJpbmcvUmVnRXhwIG1ldGhvZHMgdGhhdCB1c2UgcmVnZXhlcy5cbiAgQG92ZXJyaWRlXG4gIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgQHJldHVybnMge1JlZ0V4cEV4ZWNBcnJheSB8IG51bGx9XG4gICovXG4gIGV4ZWMoc3RyKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdXBlci5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaCB8fCAhdGhpcy5fY2FwdHVyZU1hcC5zaXplKSB7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoQ29weSA9IFsuLi5tYXRjaF07XG4gICAgLy8gRW1wdHkgYWxsIGJ1dCB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIGFycmF5IHdoaWxlIHByZXNlcnZpbmcgaXRzIG90aGVyIHByb3BlcnRpZXNcbiAgICBtYXRjaC5sZW5ndGggPSAxO1xuICAgIGxldCBpbmRpY2VzQ29weTtcbiAgICBpZiAodGhpcy5oYXNJbmRpY2VzKSB7XG4gICAgICBpbmRpY2VzQ29weSA9IFsuLi5tYXRjaC5pbmRpY2VzXTtcbiAgICAgIG1hdGNoLmluZGljZXMubGVuZ3RoID0gMTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXRjaENvcHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5fY2FwdHVyZU1hcC5nZXQoaSk/LmhpZGRlbikge1xuICAgICAgICBtYXRjaC5wdXNoKG1hdGNoQ29weVtpXSk7XG4gICAgICAgIGlmICh0aGlzLmhhc0luZGljZXMpIHtcbiAgICAgICAgICBtYXRjaC5pbmRpY2VzLnB1c2goaW5kaWNlc0NvcHlbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRjaDtcbiAgfVxufVxuXG4vKipcbkJ1aWxkIHRoZSBjYXB0dXJpbmcgZ3JvdXAgbWFwLCB3aXRoIGhpZGRlbiBjYXB0dXJlcyBtYXJrZWQgdG8gaW5kaWNhdGUgdGhlaXIgc3VibWF0Y2hlcyBzaG91bGRuJ3RcbmFwcGVhciBpbiBtYXRjaCByZXN1bHRzLlxuQHBhcmFtIHtBcnJheTxudW1iZXI+fSBoaWRkZW5DYXB0dXJlc1xuQHJldHVybnMge01hcDxudW1iZXIsIHtcbiAgaGlkZGVuOiB0cnVlO1xufT59XG4qL1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZU1hcChoaWRkZW5DYXB0dXJlcykge1xuICBjb25zdCBjYXB0dXJlTWFwID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IG51bSBvZiBoaWRkZW5DYXB0dXJlcykge1xuICAgIGNhcHR1cmVNYXAuc2V0KG51bSwge1xuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBjYXB0dXJlTWFwO1xufVxuXG5leHBvcnQge1xuICBSZWdFeHBTdWJjbGFzcyxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/subclass.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incrementIfAtLeast: () => (/* binding */ incrementIfAtLeast),\n/* harmony export */   noncapturingDelim: () => (/* binding */ noncapturingDelim),\n/* harmony export */   spliceStr: () => (/* binding */ spliceStr)\n/* harmony export */ });\n// Separating some utils for improved tree shaking of the `./internals` export\n\nconst noncapturingDelim = String.raw`\\(\\?(?:[:=!>A-Za-z\\-]|<[=!]|\\(DEFINE\\))`;\n\n/**\nUpdates the array in place by incrementing each value greater than or equal to the threshold.\n@param {Array<number>} arr\n@param {number} threshold\n*/\nfunction incrementIfAtLeast(arr, threshold) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= threshold) {\n      arr[i]++;\n    }\n  }\n}\n\n/**\n@param {string} str\n@param {number} pos\n@param {string} oldValue\n@param {string} newValue\n@returns {string}\n*/\nfunction spliceStr(str, pos, oldValue, newValue) {\n  return str.slice(0, pos) + newValue + str.slice(pos + oldValue.length);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdleEA2LjAuMS9ub2RlX21vZHVsZXMvcmVnZXgvc3JjL3V0aWxzLWludGVybmFscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxlQUFlO0FBQ3ZCLFFBQVEsUUFBUTtBQUNoQjtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxRQUFRO0FBQ2hCLFFBQVEsUUFBUTtBQUNoQixRQUFRLFFBQVE7QUFDaEIsUUFBUSxRQUFRO0FBQ2hCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFNRSIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2V4QDYuMC4xL25vZGVfbW9kdWxlcy9yZWdleC9zcmMvdXRpbHMtaW50ZXJuYWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNlcGFyYXRpbmcgc29tZSB1dGlscyBmb3IgaW1wcm92ZWQgdHJlZSBzaGFraW5nIG9mIHRoZSBgLi9pbnRlcm5hbHNgIGV4cG9ydFxuXG5jb25zdCBub25jYXB0dXJpbmdEZWxpbSA9IFN0cmluZy5yYXdgXFwoXFw/KD86Wzo9IT5BLVphLXpcXC1dfDxbPSFdfFxcKERFRklORVxcKSlgO1xuXG4vKipcblVwZGF0ZXMgdGhlIGFycmF5IGluIHBsYWNlIGJ5IGluY3JlbWVudGluZyBlYWNoIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdGhyZXNob2xkLlxuQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJcbkBwYXJhbSB7bnVtYmVyfSB0aHJlc2hvbGRcbiovXG5mdW5jdGlvbiBpbmNyZW1lbnRJZkF0TGVhc3QoYXJyLCB0aHJlc2hvbGQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldID49IHRocmVzaG9sZCkge1xuICAgICAgYXJyW2ldKys7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuQHBhcmFtIHtzdHJpbmd9IHN0clxuQHBhcmFtIHtudW1iZXJ9IHBvc1xuQHBhcmFtIHtzdHJpbmd9IG9sZFZhbHVlXG5AcGFyYW0ge3N0cmluZ30gbmV3VmFsdWVcbkByZXR1cm5zIHtzdHJpbmd9XG4qL1xuZnVuY3Rpb24gc3BsaWNlU3RyKHN0ciwgcG9zLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBwb3MpICsgbmV3VmFsdWUgKyBzdHIuc2xpY2UocG9zICsgb2xkVmFsdWUubGVuZ3RoKTtcbn1cblxuZXhwb3J0IHtcbiAgaW5jcmVtZW50SWZBdExlYXN0LFxuICBub25jYXB0dXJpbmdEZWxpbSxcbiAgc3BsaWNlU3RyLFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/regex@6.0.1/node_modules/regex/src/utils-internals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/bundle-full.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/bundle-full.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontStyle: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.FontStyle),\n/* harmony export */   ShikiError: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.ShikiError),\n/* harmony export */   StackElementMetadata: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.StackElementMetadata),\n/* harmony export */   addClassToHast: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.addClassToHast),\n/* harmony export */   applyColorReplacements: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.applyColorReplacements),\n/* harmony export */   bundledLanguages: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguages),\n/* harmony export */   bundledLanguagesAlias: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguagesAlias),\n/* harmony export */   bundledLanguagesBase: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguagesBase),\n/* harmony export */   bundledLanguagesInfo: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguagesInfo),\n/* harmony export */   bundledThemes: () => (/* reexport safe */ _themes_mjs__WEBPACK_IMPORTED_MODULE_2__.bundledThemes),\n/* harmony export */   bundledThemesInfo: () => (/* reexport safe */ _themes_mjs__WEBPACK_IMPORTED_MODULE_2__.bundledThemesInfo),\n/* harmony export */   codeToHast: () => (/* binding */ codeToHast),\n/* harmony export */   codeToHtml: () => (/* binding */ codeToHtml),\n/* harmony export */   codeToTokens: () => (/* binding */ codeToTokens),\n/* harmony export */   codeToTokensBase: () => (/* binding */ codeToTokensBase),\n/* harmony export */   codeToTokensWithThemes: () => (/* binding */ codeToTokensWithThemes),\n/* harmony export */   createCssVariablesTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createCssVariablesTheme),\n/* harmony export */   createHighlighter: () => (/* binding */ createHighlighter),\n/* harmony export */   createHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createHighlighterCore),\n/* harmony export */   createHighlighterCoreSync: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createHighlighterCoreSync),\n/* harmony export */   createJavaScriptRegexEngine: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createJavaScriptRegexEngine),\n/* harmony export */   createOnigurumaEngine: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createOnigurumaEngine),\n/* harmony export */   createPositionConverter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createPositionConverter),\n/* harmony export */   createShikiInternal: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createShikiInternal),\n/* harmony export */   createShikiInternalSync: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createShikiInternalSync),\n/* harmony export */   createSingletonShorthands: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createSingletonShorthands),\n/* harmony export */   createWasmOnigEngine: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createWasmOnigEngine),\n/* harmony export */   createdBundledHighlighter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createdBundledHighlighter),\n/* harmony export */   defaultJavaScriptRegexConstructor: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.defaultJavaScriptRegexConstructor),\n/* harmony export */   enableDeprecationWarnings: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.enableDeprecationWarnings),\n/* harmony export */   flatTokenVariants: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.flatTokenVariants),\n/* harmony export */   getHighlighter: () => (/* binding */ getHighlighter),\n/* harmony export */   getHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.getHighlighterCore),\n/* harmony export */   getLastGrammarState: () => (/* binding */ getLastGrammarState),\n/* harmony export */   getShikiInternal: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.getShikiInternal),\n/* harmony export */   getSingletonHighlighter: () => (/* binding */ getSingletonHighlighter),\n/* harmony export */   getSingletonHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.getSingletonHighlighterCore),\n/* harmony export */   getTokenStyleObject: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.getTokenStyleObject),\n/* harmony export */   getWasmInlined: () => (/* reexport safe */ _wasm_dynamic_K7LwWlz7_js__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   guessEmbeddedLanguages: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.guessEmbeddedLanguages),\n/* harmony export */   hastToHtml: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.hastToHtml),\n/* harmony export */   isNoneTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.isNoneTheme),\n/* harmony export */   isPlainLang: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.isPlainLang),\n/* harmony export */   isSpecialLang: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.isSpecialLang),\n/* harmony export */   isSpecialTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.isSpecialTheme),\n/* harmony export */   loadWasm: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm),\n/* harmony export */   makeSingletonHighlighter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.makeSingletonHighlighter),\n/* harmony export */   makeSingletonHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.makeSingletonHighlighterCore),\n/* harmony export */   normalizeGetter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.normalizeGetter),\n/* harmony export */   normalizeTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.normalizeTheme),\n/* harmony export */   resolveColorReplacements: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.resolveColorReplacements),\n/* harmony export */   splitLines: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.splitLines),\n/* harmony export */   splitToken: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.splitToken),\n/* harmony export */   splitTokens: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.splitTokens),\n/* harmony export */   stringifyTokenStyle: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.stringifyTokenStyle),\n/* harmony export */   toArray: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.toArray),\n/* harmony export */   tokenizeAnsiWithTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.tokenizeAnsiWithTheme),\n/* harmony export */   tokenizeWithTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.tokenizeWithTheme),\n/* harmony export */   tokensToHast: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.tokensToHast),\n/* harmony export */   transformerDecorations: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.transformerDecorations),\n/* harmony export */   warnDeprecated: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.warnDeprecated)\n/* harmony export */ });\n/* harmony import */ var _shikijs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shikijs/core */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/index.mjs\");\n/* harmony import */ var _shikijs_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shikijs/core */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs\");\n/* harmony import */ var _langs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./langs.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/langs.mjs\");\n/* harmony import */ var _themes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./themes.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/themes.mjs\");\n/* harmony import */ var _wasm_dynamic_K7LwWlz7_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wasm-dynamic-K7LwWlz7.js */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm-dynamic-K7LwWlz7.js\");\n/* harmony import */ var _shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shikijs/engine-oniguruma */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-oniguruma@2.5.0/node_modules/@shikijs/engine-oniguruma/dist/index.mjs\");\n\n\n\n\n\n\n\n\n\nconst createHighlighter = /* @__PURE__ */ (0,_shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createdBundledHighlighter)({\n  langs: _langs_mjs__WEBPACK_IMPORTED_MODULE_1__.bundledLanguages,\n  themes: _themes_mjs__WEBPACK_IMPORTED_MODULE_2__.bundledThemes,\n  engine: () => (0,_shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_4__.createOnigurumaEngine)(__webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shiki_2_5_0_node_modules_shiki_dist_wasm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! shiki/wasm */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm.mjs\")))\n});\nconst {\n  codeToHtml,\n  codeToHast,\n  codeToTokens,\n  codeToTokensBase,\n  codeToTokensWithThemes,\n  getSingletonHighlighter,\n  getLastGrammarState\n} = /* @__PURE__ */ (0,_shikijs_core__WEBPACK_IMPORTED_MODULE_0__.createSingletonShorthands)(\n  createHighlighter,\n  { guessEmbeddedLanguages: _shikijs_core__WEBPACK_IMPORTED_MODULE_0__.guessEmbeddedLanguages }\n);\nconst getHighlighter = (options) => {\n  (0,_shikijs_core__WEBPACK_IMPORTED_MODULE_5__.w)(\"`getHighlighter` is deprecated. Use `createHighlighter` or `getSingletonHighlighter` instead.\");\n  return createHighlighter(options);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraUAyLjUuMC9ub2RlX21vZHVsZXMvc2hpa2kvZGlzdC9idW5kbGUtZnVsbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2SDtBQUMvRjtBQUNpQjtBQUNpRDtBQUNuRDtBQUNJO0FBQ2dCO0FBQ0M7O0FBRWxFLDBDQUEwQyx3RUFBeUI7QUFDbkUsU0FBUyx3REFBZ0I7QUFDekIsVUFBVSxzREFBYTtBQUN2QixnQkFBZ0IsZ0ZBQXFCLENBQUMseVJBQW9CO0FBQzFELENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxrQkFBa0Isd0VBQXlCO0FBQzdDO0FBQ0EsSUFBSSxzQkFBc0I7QUFDMUI7QUFDQTtBQUNBLEVBQUUsZ0RBQWM7QUFDaEI7QUFDQTs7QUFFNE0iLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraUAyLjUuMC9ub2RlX21vZHVsZXMvc2hpa2kvZGlzdC9idW5kbGUtZnVsbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2luZ2xldG9uU2hvcnRoYW5kcywgY3JlYXRlZEJ1bmRsZWRIaWdobGlnaHRlciwgZ3Vlc3NFbWJlZGRlZExhbmd1YWdlcywgd2FybkRlcHJlY2F0ZWQgfSBmcm9tICdAc2hpa2lqcy9jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0BzaGlraWpzL2NvcmUnO1xuaW1wb3J0IHsgYnVuZGxlZExhbmd1YWdlcyB9IGZyb20gJy4vbGFuZ3MubWpzJztcbmV4cG9ydCB7IGJ1bmRsZWRMYW5ndWFnZXNBbGlhcywgYnVuZGxlZExhbmd1YWdlc0Jhc2UsIGJ1bmRsZWRMYW5ndWFnZXNJbmZvIH0gZnJvbSAnLi9sYW5ncy5tanMnO1xuaW1wb3J0IHsgYnVuZGxlZFRoZW1lcyB9IGZyb20gJy4vdGhlbWVzLm1qcyc7XG5leHBvcnQgeyBidW5kbGVkVGhlbWVzSW5mbyB9IGZyb20gJy4vdGhlbWVzLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldFdhc21JbmxpbmVkIH0gZnJvbSAnLi93YXNtLWR5bmFtaWMtSzdMd1dsejcuanMnO1xuaW1wb3J0IHsgY3JlYXRlT25pZ3VydW1hRW5naW5lIH0gZnJvbSAnQHNoaWtpanMvZW5naW5lLW9uaWd1cnVtYSc7XG5cbmNvbnN0IGNyZWF0ZUhpZ2hsaWdodGVyID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZWRCdW5kbGVkSGlnaGxpZ2h0ZXIoe1xuICBsYW5nczogYnVuZGxlZExhbmd1YWdlcyxcbiAgdGhlbWVzOiBidW5kbGVkVGhlbWVzLFxuICBlbmdpbmU6ICgpID0+IGNyZWF0ZU9uaWd1cnVtYUVuZ2luZShpbXBvcnQoJ3NoaWtpL3dhc20nKSlcbn0pO1xuY29uc3Qge1xuICBjb2RlVG9IdG1sLFxuICBjb2RlVG9IYXN0LFxuICBjb2RlVG9Ub2tlbnMsXG4gIGNvZGVUb1Rva2Vuc0Jhc2UsXG4gIGNvZGVUb1Rva2Vuc1dpdGhUaGVtZXMsXG4gIGdldFNpbmdsZXRvbkhpZ2hsaWdodGVyLFxuICBnZXRMYXN0R3JhbW1hclN0YXRlXG59ID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVNpbmdsZXRvblNob3J0aGFuZHMoXG4gIGNyZWF0ZUhpZ2hsaWdodGVyLFxuICB7IGd1ZXNzRW1iZWRkZWRMYW5ndWFnZXMgfVxuKTtcbmNvbnN0IGdldEhpZ2hsaWdodGVyID0gKG9wdGlvbnMpID0+IHtcbiAgd2FybkRlcHJlY2F0ZWQoXCJgZ2V0SGlnaGxpZ2h0ZXJgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgY3JlYXRlSGlnaGxpZ2h0ZXJgIG9yIGBnZXRTaW5nbGV0b25IaWdobGlnaHRlcmAgaW5zdGVhZC5cIik7XG4gIHJldHVybiBjcmVhdGVIaWdobGlnaHRlcihvcHRpb25zKTtcbn07XG5cbmV4cG9ydCB7IGJ1bmRsZWRMYW5ndWFnZXMsIGJ1bmRsZWRUaGVtZXMsIGNvZGVUb0hhc3QsIGNvZGVUb0h0bWwsIGNvZGVUb1Rva2VucywgY29kZVRvVG9rZW5zQmFzZSwgY29kZVRvVG9rZW5zV2l0aFRoZW1lcywgY3JlYXRlSGlnaGxpZ2h0ZXIsIGdldEhpZ2hsaWdodGVyLCBnZXRMYXN0R3JhbW1hclN0YXRlLCBnZXRTaW5nbGV0b25IaWdobGlnaHRlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/bundle-full.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontStyle: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.FontStyle),\n/* harmony export */   ShikiError: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.ShikiError),\n/* harmony export */   StackElementMetadata: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.StackElementMetadata),\n/* harmony export */   addClassToHast: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.addClassToHast),\n/* harmony export */   applyColorReplacements: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.applyColorReplacements),\n/* harmony export */   bundledLanguages: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_5__.bundledLanguages),\n/* harmony export */   bundledLanguagesAlias: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_5__.bundledLanguagesAlias),\n/* harmony export */   bundledLanguagesBase: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_5__.bundledLanguagesBase),\n/* harmony export */   bundledLanguagesInfo: () => (/* reexport safe */ _langs_mjs__WEBPACK_IMPORTED_MODULE_5__.bundledLanguagesInfo),\n/* harmony export */   bundledThemes: () => (/* reexport safe */ _themes_mjs__WEBPACK_IMPORTED_MODULE_6__.bundledThemes),\n/* harmony export */   bundledThemesInfo: () => (/* reexport safe */ _themes_mjs__WEBPACK_IMPORTED_MODULE_6__.bundledThemesInfo),\n/* harmony export */   codeToHast: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.codeToHast),\n/* harmony export */   codeToHtml: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.codeToHtml),\n/* harmony export */   codeToTokens: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.codeToTokens),\n/* harmony export */   codeToTokensBase: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.codeToTokensBase),\n/* harmony export */   codeToTokensWithThemes: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.codeToTokensWithThemes),\n/* harmony export */   createCssVariablesTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createCssVariablesTheme),\n/* harmony export */   createHighlighter: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.createHighlighter),\n/* harmony export */   createHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createHighlighterCore),\n/* harmony export */   createHighlighterCoreSync: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createHighlighterCoreSync),\n/* harmony export */   createJavaScriptRegexEngine: () => (/* reexport safe */ _shikijs_engine_javascript__WEBPACK_IMPORTED_MODULE_1__.createJavaScriptRegexEngine),\n/* harmony export */   createOnigurumaEngine: () => (/* reexport safe */ _shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_2__.createOnigurumaEngine),\n/* harmony export */   createPositionConverter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createPositionConverter),\n/* harmony export */   createShikiInternal: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createShikiInternal),\n/* harmony export */   createShikiInternalSync: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createShikiInternalSync),\n/* harmony export */   createSingletonShorthands: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createSingletonShorthands),\n/* harmony export */   createWasmOnigEngine: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createWasmOnigEngine),\n/* harmony export */   createdBundledHighlighter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.createdBundledHighlighter),\n/* harmony export */   defaultJavaScriptRegexConstructor: () => (/* reexport safe */ _shikijs_engine_javascript__WEBPACK_IMPORTED_MODULE_1__.defaultJavaScriptRegexConstructor),\n/* harmony export */   enableDeprecationWarnings: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.enableDeprecationWarnings),\n/* harmony export */   flatTokenVariants: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.flatTokenVariants),\n/* harmony export */   getHighlighter: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.getHighlighter),\n/* harmony export */   getHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.getHighlighterCore),\n/* harmony export */   getLastGrammarState: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.getLastGrammarState),\n/* harmony export */   getShikiInternal: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.getShikiInternal),\n/* harmony export */   getSingletonHighlighter: () => (/* reexport safe */ _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__.getSingletonHighlighter),\n/* harmony export */   getSingletonHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.getSingletonHighlighterCore),\n/* harmony export */   getTokenStyleObject: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.getTokenStyleObject),\n/* harmony export */   getWasmInlined: () => (/* reexport safe */ _wasm_dynamic_K7LwWlz7_js__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   guessEmbeddedLanguages: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.guessEmbeddedLanguages),\n/* harmony export */   hastToHtml: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.hastToHtml),\n/* harmony export */   isNoneTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.isNoneTheme),\n/* harmony export */   isPlainLang: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.isPlainLang),\n/* harmony export */   isSpecialLang: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.isSpecialLang),\n/* harmony export */   isSpecialTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.isSpecialTheme),\n/* harmony export */   loadWasm: () => (/* reexport safe */ _shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_2__.loadWasm),\n/* harmony export */   makeSingletonHighlighter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.makeSingletonHighlighter),\n/* harmony export */   makeSingletonHighlighterCore: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.makeSingletonHighlighterCore),\n/* harmony export */   normalizeGetter: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.normalizeGetter),\n/* harmony export */   normalizeTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.normalizeTheme),\n/* harmony export */   resolveColorReplacements: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.resolveColorReplacements),\n/* harmony export */   splitLines: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.splitLines),\n/* harmony export */   splitToken: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.splitToken),\n/* harmony export */   splitTokens: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.splitTokens),\n/* harmony export */   stringifyTokenStyle: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.stringifyTokenStyle),\n/* harmony export */   toArray: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.toArray),\n/* harmony export */   tokenizeAnsiWithTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.tokenizeAnsiWithTheme),\n/* harmony export */   tokenizeWithTheme: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.tokenizeWithTheme),\n/* harmony export */   tokensToHast: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.tokensToHast),\n/* harmony export */   transformerDecorations: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.transformerDecorations),\n/* harmony export */   warnDeprecated: () => (/* reexport safe */ _shikijs_core__WEBPACK_IMPORTED_MODULE_4__.warnDeprecated)\n/* harmony export */ });\n/* harmony import */ var _bundle_full_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bundle-full.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/bundle-full.mjs\");\n/* harmony import */ var _shikijs_engine_javascript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shikijs/engine-javascript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-javascript@2.5.0/node_modules/@shikijs/engine-javascript/dist/engine-compile.mjs\");\n/* harmony import */ var _shikijs_engine_oniguruma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shikijs/engine-oniguruma */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+engine-oniguruma@2.5.0/node_modules/@shikijs/engine-oniguruma/dist/index.mjs\");\n/* harmony import */ var _wasm_dynamic_K7LwWlz7_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wasm-dynamic-K7LwWlz7.js */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm-dynamic-K7LwWlz7.js\");\n/* harmony import */ var _shikijs_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shikijs/core */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/index.mjs\");\n/* harmony import */ var _langs_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./langs.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/langs.mjs\");\n/* harmony import */ var _themes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./themes.mjs */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/themes.mjs\");\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraUAyLjUuMC9ub2RlX21vZHVsZXMvc2hpa2kvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb007QUFDeEY7QUFDaEM7QUFDWDtBQUNuQztBQUNvRjtBQUNsRCIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL3NoaWtpQDIuNS4wL25vZGVfbW9kdWxlcy9zaGlraS9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBjb2RlVG9IYXN0LCBjb2RlVG9IdG1sLCBjb2RlVG9Ub2tlbnMsIGNvZGVUb1Rva2Vuc0Jhc2UsIGNvZGVUb1Rva2Vuc1dpdGhUaGVtZXMsIGNyZWF0ZUhpZ2hsaWdodGVyLCBnZXRIaWdobGlnaHRlciwgZ2V0TGFzdEdyYW1tYXJTdGF0ZSwgZ2V0U2luZ2xldG9uSGlnaGxpZ2h0ZXIgfSBmcm9tICcuL2J1bmRsZS1mdWxsLm1qcyc7XG5leHBvcnQgeyBjcmVhdGVKYXZhU2NyaXB0UmVnZXhFbmdpbmUsIGRlZmF1bHRKYXZhU2NyaXB0UmVnZXhDb25zdHJ1Y3RvciB9IGZyb20gJ0BzaGlraWpzL2VuZ2luZS1qYXZhc2NyaXB0JztcbmV4cG9ydCB7IGNyZWF0ZU9uaWd1cnVtYUVuZ2luZSwgbG9hZFdhc20gfSBmcm9tICdAc2hpa2lqcy9lbmdpbmUtb25pZ3VydW1hJztcbmV4cG9ydCB7IGcgYXMgZ2V0V2FzbUlubGluZWQgfSBmcm9tICcuL3dhc20tZHluYW1pYy1LN0x3V2x6Ny5qcyc7XG5leHBvcnQgKiBmcm9tICdAc2hpa2lqcy9jb3JlJztcbmV4cG9ydCB7IGJ1bmRsZWRMYW5ndWFnZXMsIGJ1bmRsZWRMYW5ndWFnZXNBbGlhcywgYnVuZGxlZExhbmd1YWdlc0Jhc2UsIGJ1bmRsZWRMYW5ndWFnZXNJbmZvIH0gZnJvbSAnLi9sYW5ncy5tanMnO1xuZXhwb3J0IHsgYnVuZGxlZFRoZW1lcywgYnVuZGxlZFRoZW1lc0luZm8gfSBmcm9tICcuL3RoZW1lcy5tanMnO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/langs.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/langs.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bundledLanguages: () => (/* binding */ bundledLanguages),\n/* harmony export */   bundledLanguagesAlias: () => (/* binding */ bundledLanguagesAlias),\n/* harmony export */   bundledLanguagesBase: () => (/* binding */ bundledLanguagesBase),\n/* harmony export */   bundledLanguagesInfo: () => (/* binding */ bundledLanguagesInfo)\n/* harmony export */ });\nconst bundledLanguagesInfo = [\n  {\n    \"id\": \"abap\",\n    \"name\": \"ABAP\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_abap_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/abap */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/abap.mjs\"))\n  },\n  {\n    \"id\": \"actionscript-3\",\n    \"name\": \"ActionScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_acti-1cef77\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/actionscript-3 */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/actionscript-3.mjs\"))\n  },\n  {\n    \"id\": \"ada\",\n    \"name\": \"Ada\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ada_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ada */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ada.mjs\"))\n  },\n  {\n    \"id\": \"angular-html\",\n    \"name\": \"Angular HTML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_angu-de9438\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/angular-html */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/angular-html.mjs\"))\n  },\n  {\n    \"id\": \"angular-ts\",\n    \"name\": \"Angular TypeScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_angu-90a4b2\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/angular-ts */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/angular-ts.mjs\"))\n  },\n  {\n    \"id\": \"apache\",\n    \"name\": \"Apache Conf\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_apache_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/apache */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/apache.mjs\"))\n  },\n  {\n    \"id\": \"apex\",\n    \"name\": \"Apex\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_apex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/apex */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/apex.mjs\"))\n  },\n  {\n    \"id\": \"apl\",\n    \"name\": \"APL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_apl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/apl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/apl.mjs\"))\n  },\n  {\n    \"id\": \"applescript\",\n    \"name\": \"AppleScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_appl-d05dd0\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/applescript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/applescript.mjs\"))\n  },\n  {\n    \"id\": \"ara\",\n    \"name\": \"Ara\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ara_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ara */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ara.mjs\"))\n  },\n  {\n    \"id\": \"asciidoc\",\n    \"name\": \"AsciiDoc\",\n    \"aliases\": [\n      \"adoc\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_asci-5afaca\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/asciidoc */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/asciidoc.mjs\"))\n  },\n  {\n    \"id\": \"asm\",\n    \"name\": \"Assembly\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_asm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/asm */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/asm.mjs\"))\n  },\n  {\n    \"id\": \"astro\",\n    \"name\": \"Astro\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_astro_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/astro */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/astro.mjs\"))\n  },\n  {\n    \"id\": \"awk\",\n    \"name\": \"AWK\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_awk_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/awk */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/awk.mjs\"))\n  },\n  {\n    \"id\": \"ballerina\",\n    \"name\": \"Ballerina\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ball-67af47\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ballerina */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ballerina.mjs\"))\n  },\n  {\n    \"id\": \"bat\",\n    \"name\": \"Batch File\",\n    \"aliases\": [\n      \"batch\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_bat_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/bat */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/bat.mjs\"))\n  },\n  {\n    \"id\": \"beancount\",\n    \"name\": \"Beancount\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_bean-b1afc3\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/beancount */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/beancount.mjs\"))\n  },\n  {\n    \"id\": \"berry\",\n    \"name\": \"Berry\",\n    \"aliases\": [\n      \"be\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_berry_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/berry */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/berry.mjs\"))\n  },\n  {\n    \"id\": \"bibtex\",\n    \"name\": \"BibTeX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_bibtex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/bibtex */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/bibtex.mjs\"))\n  },\n  {\n    \"id\": \"bicep\",\n    \"name\": \"Bicep\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_bicep_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/bicep */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/bicep.mjs\"))\n  },\n  {\n    \"id\": \"blade\",\n    \"name\": \"Blade\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_blade_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/blade */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/blade.mjs\"))\n  },\n  {\n    \"id\": \"bsl\",\n    \"name\": \"1C (Enterprise)\",\n    \"aliases\": [\n      \"1c\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_bsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/bsl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/bsl.mjs\"))\n  },\n  {\n    \"id\": \"c\",\n    \"name\": \"C\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_c_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/c */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/c.mjs\"))\n  },\n  {\n    \"id\": \"cadence\",\n    \"name\": \"Cadence\",\n    \"aliases\": [\n      \"cdc\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cade-ec75af\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cadence */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cadence.mjs\"))\n  },\n  {\n    \"id\": \"cairo\",\n    \"name\": \"Cairo\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cairo_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cairo */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cairo.mjs\"))\n  },\n  {\n    \"id\": \"clarity\",\n    \"name\": \"Clarity\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_clar-697544\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/clarity */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/clarity.mjs\"))\n  },\n  {\n    \"id\": \"clojure\",\n    \"name\": \"Clojure\",\n    \"aliases\": [\n      \"clj\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cloj-cb9b6c\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/clojure */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/clojure.mjs\"))\n  },\n  {\n    \"id\": \"cmake\",\n    \"name\": \"CMake\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cmake_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cmake */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cmake.mjs\"))\n  },\n  {\n    \"id\": \"cobol\",\n    \"name\": \"COBOL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cobol_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cobol */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cobol.mjs\"))\n  },\n  {\n    \"id\": \"codeowners\",\n    \"name\": \"CODEOWNERS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_code-a7af05\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/codeowners */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/codeowners.mjs\"))\n  },\n  {\n    \"id\": \"codeql\",\n    \"name\": \"CodeQL\",\n    \"aliases\": [\n      \"ql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_codeql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/codeql */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/codeql.mjs\"))\n  },\n  {\n    \"id\": \"coffee\",\n    \"name\": \"CoffeeScript\",\n    \"aliases\": [\n      \"coffeescript\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_coffee_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/coffee */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/coffee.mjs\"))\n  },\n  {\n    \"id\": \"common-lisp\",\n    \"name\": \"Common Lisp\",\n    \"aliases\": [\n      \"lisp\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_comm-c26428\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/common-lisp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/common-lisp.mjs\"))\n  },\n  {\n    \"id\": \"coq\",\n    \"name\": \"Coq\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_coq_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/coq */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/coq.mjs\"))\n  },\n  {\n    \"id\": \"cpp\",\n    \"name\": \"C++\",\n    \"aliases\": [\n      \"c++\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cpp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cpp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cpp.mjs\"))\n  },\n  {\n    \"id\": \"crystal\",\n    \"name\": \"Crystal\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_crys-ffaddc\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/crystal */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/crystal.mjs\"))\n  },\n  {\n    \"id\": \"csharp\",\n    \"name\": \"C#\",\n    \"aliases\": [\n      \"c#\",\n      \"cs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_csharp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/csharp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/csharp.mjs\"))\n  },\n  {\n    \"id\": \"css\",\n    \"name\": \"CSS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_css_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/css */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/css.mjs\"))\n  },\n  {\n    \"id\": \"csv\",\n    \"name\": \"CSV\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_csv_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/csv */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/csv.mjs\"))\n  },\n  {\n    \"id\": \"cue\",\n    \"name\": \"CUE\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cue_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cue */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cue.mjs\"))\n  },\n  {\n    \"id\": \"cypher\",\n    \"name\": \"Cypher\",\n    \"aliases\": [\n      \"cql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_cypher_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/cypher */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/cypher.mjs\"))\n  },\n  {\n    \"id\": \"d\",\n    \"name\": \"D\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_d_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/d */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/d.mjs\"))\n  },\n  {\n    \"id\": \"dart\",\n    \"name\": \"Dart\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_dart_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/dart */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/dart.mjs\"))\n  },\n  {\n    \"id\": \"dax\",\n    \"name\": \"DAX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_dax_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/dax */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/dax.mjs\"))\n  },\n  {\n    \"id\": \"desktop\",\n    \"name\": \"Desktop\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_desk-fb272a\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/desktop */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/desktop.mjs\"))\n  },\n  {\n    \"id\": \"diff\",\n    \"name\": \"Diff\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_diff_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/diff */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/diff.mjs\"))\n  },\n  {\n    \"id\": \"docker\",\n    \"name\": \"Dockerfile\",\n    \"aliases\": [\n      \"dockerfile\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_docker_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/docker */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/docker.mjs\"))\n  },\n  {\n    \"id\": \"dotenv\",\n    \"name\": \"dotEnv\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_dotenv_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/dotenv */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/dotenv.mjs\"))\n  },\n  {\n    \"id\": \"dream-maker\",\n    \"name\": \"Dream Maker\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_drea-adc9aa\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/dream-maker */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/dream-maker.mjs\"))\n  },\n  {\n    \"id\": \"edge\",\n    \"name\": \"Edge\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_edge_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/edge */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/edge.mjs\"))\n  },\n  {\n    \"id\": \"elixir\",\n    \"name\": \"Elixir\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_elixir_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/elixir */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/elixir.mjs\"))\n  },\n  {\n    \"id\": \"elm\",\n    \"name\": \"Elm\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_elm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/elm */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/elm.mjs\"))\n  },\n  {\n    \"id\": \"emacs-lisp\",\n    \"name\": \"Emacs Lisp\",\n    \"aliases\": [\n      \"elisp\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_emac-6d3378\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/emacs-lisp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/emacs-lisp.mjs\"))\n  },\n  {\n    \"id\": \"erb\",\n    \"name\": \"ERB\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_erb_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/erb */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/erb.mjs\"))\n  },\n  {\n    \"id\": \"erlang\",\n    \"name\": \"Erlang\",\n    \"aliases\": [\n      \"erl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_erlang_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/erlang */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/erlang.mjs\"))\n  },\n  {\n    \"id\": \"fennel\",\n    \"name\": \"Fennel\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_fennel_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/fennel */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/fennel.mjs\"))\n  },\n  {\n    \"id\": \"fish\",\n    \"name\": \"Fish\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_fish_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/fish */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/fish.mjs\"))\n  },\n  {\n    \"id\": \"fluent\",\n    \"name\": \"Fluent\",\n    \"aliases\": [\n      \"ftl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_fluent_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/fluent */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/fluent.mjs\"))\n  },\n  {\n    \"id\": \"fortran-fixed-form\",\n    \"name\": \"Fortran (Fixed Form)\",\n    \"aliases\": [\n      \"f\",\n      \"for\",\n      \"f77\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_fort-ac59a1\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/fortran-fixed-form */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/fortran-fixed-form.mjs\"))\n  },\n  {\n    \"id\": \"fortran-free-form\",\n    \"name\": \"Fortran (Free Form)\",\n    \"aliases\": [\n      \"f90\",\n      \"f95\",\n      \"f03\",\n      \"f08\",\n      \"f18\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_fort-b30ddc\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/fortran-free-form */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/fortran-free-form.mjs\"))\n  },\n  {\n    \"id\": \"fsharp\",\n    \"name\": \"F#\",\n    \"aliases\": [\n      \"f#\",\n      \"fs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_fsharp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/fsharp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/fsharp.mjs\"))\n  },\n  {\n    \"id\": \"gdresource\",\n    \"name\": \"GDResource\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_gdre-a3b81d\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/gdresource */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/gdresource.mjs\"))\n  },\n  {\n    \"id\": \"gdscript\",\n    \"name\": \"GDScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_gdsc-0e90bc\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/gdscript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/gdscript.mjs\"))\n  },\n  {\n    \"id\": \"gdshader\",\n    \"name\": \"GDShader\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_gdsh-8dc3e6\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/gdshader */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/gdshader.mjs\"))\n  },\n  {\n    \"id\": \"genie\",\n    \"name\": \"Genie\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_genie_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/genie */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/genie.mjs\"))\n  },\n  {\n    \"id\": \"gherkin\",\n    \"name\": \"Gherkin\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_gher-6be836\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/gherkin */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/gherkin.mjs\"))\n  },\n  {\n    \"id\": \"git-commit\",\n    \"name\": \"Git Commit Message\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_git--cfcf65\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/git-commit */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/git-commit.mjs\"))\n  },\n  {\n    \"id\": \"git-rebase\",\n    \"name\": \"Git Rebase Message\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_git--22262e\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/git-rebase */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/git-rebase.mjs\"))\n  },\n  {\n    \"id\": \"gleam\",\n    \"name\": \"Gleam\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_gleam_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/gleam */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/gleam.mjs\"))\n  },\n  {\n    \"id\": \"glimmer-js\",\n    \"name\": \"Glimmer JS\",\n    \"aliases\": [\n      \"gjs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_glim-d12fd4\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/glimmer-js */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/glimmer-js.mjs\"))\n  },\n  {\n    \"id\": \"glimmer-ts\",\n    \"name\": \"Glimmer TS\",\n    \"aliases\": [\n      \"gts\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_glim-64c8ad\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/glimmer-ts */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/glimmer-ts.mjs\"))\n  },\n  {\n    \"id\": \"glsl\",\n    \"name\": \"GLSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_glsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/glsl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/glsl.mjs\"))\n  },\n  {\n    \"id\": \"gnuplot\",\n    \"name\": \"Gnuplot\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_gnup-1be55a\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/gnuplot */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/gnuplot.mjs\"))\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Go\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_go_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/go */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/go.mjs\"))\n  },\n  {\n    \"id\": \"graphql\",\n    \"name\": \"GraphQL\",\n    \"aliases\": [\n      \"gql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_grap-e2f4e5\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/graphql */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/graphql.mjs\"))\n  },\n  {\n    \"id\": \"groovy\",\n    \"name\": \"Groovy\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_groovy_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/groovy */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/groovy.mjs\"))\n  },\n  {\n    \"id\": \"hack\",\n    \"name\": \"Hack\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hack_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/hack */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/hack.mjs\"))\n  },\n  {\n    \"id\": \"haml\",\n    \"name\": \"Ruby Haml\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_haml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/haml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/haml.mjs\"))\n  },\n  {\n    \"id\": \"handlebars\",\n    \"name\": \"Handlebars\",\n    \"aliases\": [\n      \"hbs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hand-f70b4a\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/handlebars */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/handlebars.mjs\"))\n  },\n  {\n    \"id\": \"haskell\",\n    \"name\": \"Haskell\",\n    \"aliases\": [\n      \"hs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hask-369f0b\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/haskell */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/haskell.mjs\"))\n  },\n  {\n    \"id\": \"haxe\",\n    \"name\": \"Haxe\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_haxe_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/haxe */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/haxe.mjs\"))\n  },\n  {\n    \"id\": \"hcl\",\n    \"name\": \"HashiCorp HCL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hcl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/hcl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/hcl.mjs\"))\n  },\n  {\n    \"id\": \"hjson\",\n    \"name\": \"Hjson\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hjson_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/hjson */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/hjson.mjs\"))\n  },\n  {\n    \"id\": \"hlsl\",\n    \"name\": \"HLSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hlsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/hlsl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/hlsl.mjs\"))\n  },\n  {\n    \"id\": \"html\",\n    \"name\": \"HTML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_html_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/html */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/html.mjs\"))\n  },\n  {\n    \"id\": \"html-derivative\",\n    \"name\": \"HTML (Derivative)\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_html-b74801\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/html-derivative */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/html-derivative.mjs\"))\n  },\n  {\n    \"id\": \"http\",\n    \"name\": \"HTTP\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_http_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/http */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/http.mjs\"))\n  },\n  {\n    \"id\": \"hxml\",\n    \"name\": \"HXML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hxml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/hxml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/hxml.mjs\"))\n  },\n  {\n    \"id\": \"hy\",\n    \"name\": \"Hy\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_hy_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/hy */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/hy.mjs\"))\n  },\n  {\n    \"id\": \"imba\",\n    \"name\": \"Imba\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_imba_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/imba */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/imba.mjs\"))\n  },\n  {\n    \"id\": \"ini\",\n    \"name\": \"INI\",\n    \"aliases\": [\n      \"properties\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ini_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ini */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ini.mjs\"))\n  },\n  {\n    \"id\": \"java\",\n    \"name\": \"Java\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_java_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/java */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/java.mjs\"))\n  },\n  {\n    \"id\": \"javascript\",\n    \"name\": \"JavaScript\",\n    \"aliases\": [\n      \"js\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_java-02f220\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/javascript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/javascript.mjs\"))\n  },\n  {\n    \"id\": \"jinja\",\n    \"name\": \"Jinja\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_jinja_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jinja */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jinja.mjs\"))\n  },\n  {\n    \"id\": \"jison\",\n    \"name\": \"Jison\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_jison_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jison */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jison.mjs\"))\n  },\n  {\n    \"id\": \"json\",\n    \"name\": \"JSON\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_json_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/json */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/json.mjs\"))\n  },\n  {\n    \"id\": \"json5\",\n    \"name\": \"JSON5\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_json5_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/json5 */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/json5.mjs\"))\n  },\n  {\n    \"id\": \"jsonc\",\n    \"name\": \"JSON with Comments\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_jsonc_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jsonc */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jsonc.mjs\"))\n  },\n  {\n    \"id\": \"jsonl\",\n    \"name\": \"JSON Lines\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_jsonl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jsonl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jsonl.mjs\"))\n  },\n  {\n    \"id\": \"jsonnet\",\n    \"name\": \"Jsonnet\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_json-e39b9f\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jsonnet */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jsonnet.mjs\"))\n  },\n  {\n    \"id\": \"jssm\",\n    \"name\": \"JSSM\",\n    \"aliases\": [\n      \"fsl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_jssm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jssm */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jssm.mjs\"))\n  },\n  {\n    \"id\": \"jsx\",\n    \"name\": \"JSX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_jsx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/jsx */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/jsx.mjs\"))\n  },\n  {\n    \"id\": \"julia\",\n    \"name\": \"Julia\",\n    \"aliases\": [\n      \"jl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_julia_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/julia */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/julia.mjs\"))\n  },\n  {\n    \"id\": \"kotlin\",\n    \"name\": \"Kotlin\",\n    \"aliases\": [\n      \"kt\",\n      \"kts\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_kotlin_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/kotlin */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/kotlin.mjs\"))\n  },\n  {\n    \"id\": \"kusto\",\n    \"name\": \"Kusto\",\n    \"aliases\": [\n      \"kql\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_kusto_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/kusto */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/kusto.mjs\"))\n  },\n  {\n    \"id\": \"latex\",\n    \"name\": \"LaTeX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_latex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/latex */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/latex.mjs\"))\n  },\n  {\n    \"id\": \"lean\",\n    \"name\": \"Lean 4\",\n    \"aliases\": [\n      \"lean4\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_lean_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/lean */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/lean.mjs\"))\n  },\n  {\n    \"id\": \"less\",\n    \"name\": \"Less\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_less_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/less */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/less.mjs\"))\n  },\n  {\n    \"id\": \"liquid\",\n    \"name\": \"Liquid\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_liquid_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/liquid */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/liquid.mjs\"))\n  },\n  {\n    \"id\": \"log\",\n    \"name\": \"Log file\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_log_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/log */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/log.mjs\"))\n  },\n  {\n    \"id\": \"logo\",\n    \"name\": \"Logo\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_logo_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/logo */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/logo.mjs\"))\n  },\n  {\n    \"id\": \"lua\",\n    \"name\": \"Lua\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_lua_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/lua */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/lua.mjs\"))\n  },\n  {\n    \"id\": \"luau\",\n    \"name\": \"Luau\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_luau_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/luau */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/luau.mjs\"))\n  },\n  {\n    \"id\": \"make\",\n    \"name\": \"Makefile\",\n    \"aliases\": [\n      \"makefile\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_make_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/make */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/make.mjs\"))\n  },\n  {\n    \"id\": \"markdown\",\n    \"name\": \"Markdown\",\n    \"aliases\": [\n      \"md\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_mark-1dc3ce\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/markdown */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/markdown.mjs\"))\n  },\n  {\n    \"id\": \"marko\",\n    \"name\": \"Marko\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_marko_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/marko */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/marko.mjs\"))\n  },\n  {\n    \"id\": \"matlab\",\n    \"name\": \"MATLAB\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_matlab_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/matlab */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/matlab.mjs\"))\n  },\n  {\n    \"id\": \"mdc\",\n    \"name\": \"MDC\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_mdc_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/mdc */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/mdc.mjs\"))\n  },\n  {\n    \"id\": \"mdx\",\n    \"name\": \"MDX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_mdx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/mdx */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/mdx.mjs\"))\n  },\n  {\n    \"id\": \"mermaid\",\n    \"name\": \"Mermaid\",\n    \"aliases\": [\n      \"mmd\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_merm-7a0258\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/mermaid */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/mermaid.mjs\"))\n  },\n  {\n    \"id\": \"mipsasm\",\n    \"name\": \"MIPS Assembly\",\n    \"aliases\": [\n      \"mips\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_mips-690d5d\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/mipsasm */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/mipsasm.mjs\"))\n  },\n  {\n    \"id\": \"mojo\",\n    \"name\": \"Mojo\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_mojo_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/mojo */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/mojo.mjs\"))\n  },\n  {\n    \"id\": \"move\",\n    \"name\": \"Move\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_move_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/move */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/move.mjs\"))\n  },\n  {\n    \"id\": \"narrat\",\n    \"name\": \"Narrat Language\",\n    \"aliases\": [\n      \"nar\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_narrat_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/narrat */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/narrat.mjs\"))\n  },\n  {\n    \"id\": \"nextflow\",\n    \"name\": \"Nextflow\",\n    \"aliases\": [\n      \"nf\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_next-55c42b\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/nextflow */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/nextflow.mjs\"))\n  },\n  {\n    \"id\": \"nginx\",\n    \"name\": \"Nginx\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_nginx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/nginx */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/nginx.mjs\"))\n  },\n  {\n    \"id\": \"nim\",\n    \"name\": \"Nim\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_nim_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/nim */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/nim.mjs\"))\n  },\n  {\n    \"id\": \"nix\",\n    \"name\": \"Nix\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_nix_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/nix */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/nix.mjs\"))\n  },\n  {\n    \"id\": \"nushell\",\n    \"name\": \"nushell\",\n    \"aliases\": [\n      \"nu\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_nush-17ef57\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/nushell */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/nushell.mjs\"))\n  },\n  {\n    \"id\": \"objective-c\",\n    \"name\": \"Objective-C\",\n    \"aliases\": [\n      \"objc\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_obje-7993f2\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/objective-c */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/objective-c.mjs\"))\n  },\n  {\n    \"id\": \"objective-cpp\",\n    \"name\": \"Objective-C++\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_obje-0e95d4\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/objective-cpp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/objective-cpp.mjs\"))\n  },\n  {\n    \"id\": \"ocaml\",\n    \"name\": \"OCaml\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ocaml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ocaml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ocaml.mjs\"))\n  },\n  {\n    \"id\": \"pascal\",\n    \"name\": \"Pascal\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_pascal_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/pascal */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/pascal.mjs\"))\n  },\n  {\n    \"id\": \"perl\",\n    \"name\": \"Perl\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_perl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/perl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/perl.mjs\"))\n  },\n  {\n    \"id\": \"php\",\n    \"name\": \"PHP\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_php_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/php */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/php.mjs\"))\n  },\n  {\n    \"id\": \"plsql\",\n    \"name\": \"PL/SQL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_plsql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/plsql */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/plsql.mjs\"))\n  },\n  {\n    \"id\": \"po\",\n    \"name\": \"Gettext PO\",\n    \"aliases\": [\n      \"pot\",\n      \"potx\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_po_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/po */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/po.mjs\"))\n  },\n  {\n    \"id\": \"polar\",\n    \"name\": \"Polar\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_polar_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/polar */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/polar.mjs\"))\n  },\n  {\n    \"id\": \"postcss\",\n    \"name\": \"PostCSS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_post-9f747a\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/postcss */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/postcss.mjs\"))\n  },\n  {\n    \"id\": \"powerquery\",\n    \"name\": \"PowerQuery\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_powe-286fb6\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/powerquery */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/powerquery.mjs\"))\n  },\n  {\n    \"id\": \"powershell\",\n    \"name\": \"PowerShell\",\n    \"aliases\": [\n      \"ps\",\n      \"ps1\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_powe-b4ee9a\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/powershell */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/powershell.mjs\"))\n  },\n  {\n    \"id\": \"prisma\",\n    \"name\": \"Prisma\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_prisma_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/prisma */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/prisma.mjs\"))\n  },\n  {\n    \"id\": \"prolog\",\n    \"name\": \"Prolog\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_prolog_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/prolog */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/prolog.mjs\"))\n  },\n  {\n    \"id\": \"proto\",\n    \"name\": \"Protocol Buffer 3\",\n    \"aliases\": [\n      \"protobuf\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_proto_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/proto */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/proto.mjs\"))\n  },\n  {\n    \"id\": \"pug\",\n    \"name\": \"Pug\",\n    \"aliases\": [\n      \"jade\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_pug_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/pug */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/pug.mjs\"))\n  },\n  {\n    \"id\": \"puppet\",\n    \"name\": \"Puppet\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_puppet_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/puppet */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/puppet.mjs\"))\n  },\n  {\n    \"id\": \"purescript\",\n    \"name\": \"PureScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_pure-741c15\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/purescript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/purescript.mjs\"))\n  },\n  {\n    \"id\": \"python\",\n    \"name\": \"Python\",\n    \"aliases\": [\n      \"py\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_python_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/python */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/python.mjs\"))\n  },\n  {\n    \"id\": \"qml\",\n    \"name\": \"QML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_qml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/qml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/qml.mjs\"))\n  },\n  {\n    \"id\": \"qmldir\",\n    \"name\": \"QML Directory\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_qmldir_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/qmldir */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/qmldir.mjs\"))\n  },\n  {\n    \"id\": \"qss\",\n    \"name\": \"Qt Style Sheets\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_qss_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/qss */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/qss.mjs\"))\n  },\n  {\n    \"id\": \"r\",\n    \"name\": \"R\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_r_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/r */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/r.mjs\"))\n  },\n  {\n    \"id\": \"racket\",\n    \"name\": \"Racket\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_racket_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/racket */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/racket.mjs\"))\n  },\n  {\n    \"id\": \"raku\",\n    \"name\": \"Raku\",\n    \"aliases\": [\n      \"perl6\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_raku_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/raku */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/raku.mjs\"))\n  },\n  {\n    \"id\": \"razor\",\n    \"name\": \"ASP.NET Razor\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_razor_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/razor */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/razor.mjs\"))\n  },\n  {\n    \"id\": \"reg\",\n    \"name\": \"Windows Registry Script\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_reg_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/reg */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/reg.mjs\"))\n  },\n  {\n    \"id\": \"regexp\",\n    \"name\": \"RegExp\",\n    \"aliases\": [\n      \"regex\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_regexp_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/regexp */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/regexp.mjs\"))\n  },\n  {\n    \"id\": \"rel\",\n    \"name\": \"Rel\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_rel_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/rel */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/rel.mjs\"))\n  },\n  {\n    \"id\": \"riscv\",\n    \"name\": \"RISC-V\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_riscv_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/riscv */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/riscv.mjs\"))\n  },\n  {\n    \"id\": \"rst\",\n    \"name\": \"reStructuredText\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_rst_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/rst */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/rst.mjs\"))\n  },\n  {\n    \"id\": \"ruby\",\n    \"name\": \"Ruby\",\n    \"aliases\": [\n      \"rb\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ruby_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ruby */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ruby.mjs\"))\n  },\n  {\n    \"id\": \"rust\",\n    \"name\": \"Rust\",\n    \"aliases\": [\n      \"rs\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_rust_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/rust */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/rust.mjs\"))\n  },\n  {\n    \"id\": \"sas\",\n    \"name\": \"SAS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_sas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/sas */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/sas.mjs\"))\n  },\n  {\n    \"id\": \"sass\",\n    \"name\": \"Sass\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_sass_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/sass */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/sass.mjs\"))\n  },\n  {\n    \"id\": \"scala\",\n    \"name\": \"Scala\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_scala_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/scala */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/scala.mjs\"))\n  },\n  {\n    \"id\": \"scheme\",\n    \"name\": \"Scheme\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_scheme_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/scheme */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/scheme.mjs\"))\n  },\n  {\n    \"id\": \"scss\",\n    \"name\": \"SCSS\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_scss_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/scss */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/scss.mjs\"))\n  },\n  {\n    \"id\": \"sdbl\",\n    \"name\": \"1C (Query)\",\n    \"aliases\": [\n      \"1c-query\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_sdbl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/sdbl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/sdbl.mjs\"))\n  },\n  {\n    \"id\": \"shaderlab\",\n    \"name\": \"ShaderLab\",\n    \"aliases\": [\n      \"shader\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_shad-0fe956\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/shaderlab */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/shaderlab.mjs\"))\n  },\n  {\n    \"id\": \"shellscript\",\n    \"name\": \"Shell\",\n    \"aliases\": [\n      \"bash\",\n      \"sh\",\n      \"shell\",\n      \"zsh\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_shel-979562\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/shellscript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/shellscript.mjs\"))\n  },\n  {\n    \"id\": \"shellsession\",\n    \"name\": \"Shell Session\",\n    \"aliases\": [\n      \"console\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_shel-041edc\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/shellsession */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/shellsession.mjs\"))\n  },\n  {\n    \"id\": \"smalltalk\",\n    \"name\": \"Smalltalk\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_smal-5049ad\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/smalltalk */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/smalltalk.mjs\"))\n  },\n  {\n    \"id\": \"solidity\",\n    \"name\": \"Solidity\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_soli-5b58c1\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/solidity */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/solidity.mjs\"))\n  },\n  {\n    \"id\": \"soy\",\n    \"name\": \"Closure Templates\",\n    \"aliases\": [\n      \"closure-templates\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_soy_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/soy */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/soy.mjs\"))\n  },\n  {\n    \"id\": \"sparql\",\n    \"name\": \"SPARQL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_sparql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/sparql */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/sparql.mjs\"))\n  },\n  {\n    \"id\": \"splunk\",\n    \"name\": \"Splunk Query Language\",\n    \"aliases\": [\n      \"spl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_splunk_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/splunk */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/splunk.mjs\"))\n  },\n  {\n    \"id\": \"sql\",\n    \"name\": \"SQL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_sql_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/sql */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/sql.mjs\"))\n  },\n  {\n    \"id\": \"ssh-config\",\n    \"name\": \"SSH Config\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ssh--d26627\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ssh-config */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ssh-config.mjs\"))\n  },\n  {\n    \"id\": \"stata\",\n    \"name\": \"Stata\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_stata_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/stata */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/stata.mjs\"))\n  },\n  {\n    \"id\": \"stylus\",\n    \"name\": \"Stylus\",\n    \"aliases\": [\n      \"styl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_stylus_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/stylus */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/stylus.mjs\"))\n  },\n  {\n    \"id\": \"svelte\",\n    \"name\": \"Svelte\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_svelte_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/svelte */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/svelte.mjs\"))\n  },\n  {\n    \"id\": \"swift\",\n    \"name\": \"Swift\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_swift_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/swift */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/swift.mjs\"))\n  },\n  {\n    \"id\": \"system-verilog\",\n    \"name\": \"SystemVerilog\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_syst-a6706e\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/system-verilog */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/system-verilog.mjs\"))\n  },\n  {\n    \"id\": \"systemd\",\n    \"name\": \"Systemd Units\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_syst-4ce583\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/systemd */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/systemd.mjs\"))\n  },\n  {\n    \"id\": \"talonscript\",\n    \"name\": \"TalonScript\",\n    \"aliases\": [\n      \"talon\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_talo-687b38\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/talonscript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/talonscript.mjs\"))\n  },\n  {\n    \"id\": \"tasl\",\n    \"name\": \"Tasl\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_tasl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/tasl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/tasl.mjs\"))\n  },\n  {\n    \"id\": \"tcl\",\n    \"name\": \"Tcl\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_tcl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/tcl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/tcl.mjs\"))\n  },\n  {\n    \"id\": \"templ\",\n    \"name\": \"Templ\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_templ_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/templ */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/templ.mjs\"))\n  },\n  {\n    \"id\": \"terraform\",\n    \"name\": \"Terraform\",\n    \"aliases\": [\n      \"tf\",\n      \"tfvars\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_terr-937891\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/terraform */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/terraform.mjs\"))\n  },\n  {\n    \"id\": \"tex\",\n    \"name\": \"TeX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_tex_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/tex */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/tex.mjs\"))\n  },\n  {\n    \"id\": \"toml\",\n    \"name\": \"TOML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_toml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/toml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/toml.mjs\"))\n  },\n  {\n    \"id\": \"ts-tags\",\n    \"name\": \"TypeScript with Tags\",\n    \"aliases\": [\n      \"lit\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_ts-t-366d3f\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/ts-tags */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/ts-tags.mjs\"))\n  },\n  {\n    \"id\": \"tsv\",\n    \"name\": \"TSV\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_tsv_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/tsv */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/tsv.mjs\"))\n  },\n  {\n    \"id\": \"tsx\",\n    \"name\": \"TSX\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_tsx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/tsx */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/tsx.mjs\"))\n  },\n  {\n    \"id\": \"turtle\",\n    \"name\": \"Turtle\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_turtle_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/turtle */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/turtle.mjs\"))\n  },\n  {\n    \"id\": \"twig\",\n    \"name\": \"Twig\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_twig_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/twig */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/twig.mjs\"))\n  },\n  {\n    \"id\": \"typescript\",\n    \"name\": \"TypeScript\",\n    \"aliases\": [\n      \"ts\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_type-3d48ba\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/typescript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/typescript.mjs\"))\n  },\n  {\n    \"id\": \"typespec\",\n    \"name\": \"TypeSpec\",\n    \"aliases\": [\n      \"tsp\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_type-3ef0a7\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/typespec */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/typespec.mjs\"))\n  },\n  {\n    \"id\": \"typst\",\n    \"name\": \"Typst\",\n    \"aliases\": [\n      \"typ\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_typst_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/typst */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/typst.mjs\"))\n  },\n  {\n    \"id\": \"v\",\n    \"name\": \"V\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_v_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/v */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/v.mjs\"))\n  },\n  {\n    \"id\": \"vala\",\n    \"name\": \"Vala\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_vala_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/vala */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/vala.mjs\"))\n  },\n  {\n    \"id\": \"vb\",\n    \"name\": \"Visual Basic\",\n    \"aliases\": [\n      \"cmd\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_vb_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/vb */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/vb.mjs\"))\n  },\n  {\n    \"id\": \"verilog\",\n    \"name\": \"Verilog\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_veri-746d39\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/verilog */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/verilog.mjs\"))\n  },\n  {\n    \"id\": \"vhdl\",\n    \"name\": \"VHDL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_vhdl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/vhdl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/vhdl.mjs\"))\n  },\n  {\n    \"id\": \"viml\",\n    \"name\": \"Vim Script\",\n    \"aliases\": [\n      \"vim\",\n      \"vimscript\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_viml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/viml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/viml.mjs\"))\n  },\n  {\n    \"id\": \"vue\",\n    \"name\": \"Vue\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_vue_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/vue */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/vue.mjs\"))\n  },\n  {\n    \"id\": \"vue-html\",\n    \"name\": \"Vue HTML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_vue--b249cc\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/vue-html */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/vue-html.mjs\"))\n  },\n  {\n    \"id\": \"vyper\",\n    \"name\": \"Vyper\",\n    \"aliases\": [\n      \"vy\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_vyper_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/vyper */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/vyper.mjs\"))\n  },\n  {\n    \"id\": \"wasm\",\n    \"name\": \"WebAssembly\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_wasm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/wasm */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/wasm.mjs\"))\n  },\n  {\n    \"id\": \"wenyan\",\n    \"name\": \"Wenyan\",\n    \"aliases\": [\n      \"\\u6587\\u8A00\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_wenyan_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/wenyan */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/wenyan.mjs\"))\n  },\n  {\n    \"id\": \"wgsl\",\n    \"name\": \"WGSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_wgsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/wgsl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/wgsl.mjs\"))\n  },\n  {\n    \"id\": \"wikitext\",\n    \"name\": \"Wikitext\",\n    \"aliases\": [\n      \"mediawiki\",\n      \"wiki\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_wiki-8e1ac5\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/wikitext */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/wikitext.mjs\"))\n  },\n  {\n    \"id\": \"wolfram\",\n    \"name\": \"Wolfram\",\n    \"aliases\": [\n      \"wl\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_wolf-5a6233\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/wolfram */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/wolfram.mjs\"))\n  },\n  {\n    \"id\": \"xml\",\n    \"name\": \"XML\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_xml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/xml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/xml.mjs\"))\n  },\n  {\n    \"id\": \"xsl\",\n    \"name\": \"XSL\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_xsl_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/xsl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/xsl.mjs\"))\n  },\n  {\n    \"id\": \"yaml\",\n    \"name\": \"YAML\",\n    \"aliases\": [\n      \"yml\"\n    ],\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_yaml_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/yaml */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/yaml.mjs\"))\n  },\n  {\n    \"id\": \"zenscript\",\n    \"name\": \"ZenScript\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_zens-186b0d\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/zenscript */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/zenscript.mjs\"))\n  },\n  {\n    \"id\": \"zig\",\n    \"name\": \"Zig\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_langs_2_5_0_node_modules_shikijs_langs_dist_zig_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/langs/zig */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+langs@2.5.0/node_modules/@shikijs/langs/dist/zig.mjs\"))\n  }\n];\nconst bundledLanguagesBase = Object.fromEntries(bundledLanguagesInfo.map((i) => [i.id, i.import]));\nconst bundledLanguagesAlias = Object.fromEntries(bundledLanguagesInfo.flatMap((i) => i.aliases?.map((a) => [a, i.import]) || []));\nconst bundledLanguages = {\n  ...bundledLanguagesBase,\n  ...bundledLanguagesAlias\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/langs.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/themes.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/themes.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bundledThemes: () => (/* binding */ bundledThemes),\n/* harmony export */   bundledThemesInfo: () => (/* binding */ bundledThemesInfo)\n/* harmony export */ });\nconst bundledThemesInfo = [\n  {\n    \"id\": \"andromeeda\",\n    \"displayName\": \"Andromeeda\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_an-6a3103\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/andromeeda */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/andromeeda.mjs\"))\n  },\n  {\n    \"id\": \"aurora-x\",\n    \"displayName\": \"Aurora X\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_au-5379d9\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/aurora-x */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/aurora-x.mjs\"))\n  },\n  {\n    \"id\": \"ayu-dark\",\n    \"displayName\": \"Ayu Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ay-f43565\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/ayu-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/ayu-dark.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-frappe\",\n    \"displayName\": \"Catppuccin Frapp\\xE9\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ca-117d25\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/catppuccin-frappe */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/catppuccin-frappe.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-latte\",\n    \"displayName\": \"Catppuccin Latte\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ca-f7c483\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/catppuccin-latte */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/catppuccin-latte.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-macchiato\",\n    \"displayName\": \"Catppuccin Macchiato\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ca-b0cf36\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/catppuccin-macchiato */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/catppuccin-macchiato.mjs\"))\n  },\n  {\n    \"id\": \"catppuccin-mocha\",\n    \"displayName\": \"Catppuccin Mocha\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ca-181795\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/catppuccin-mocha */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/catppuccin-mocha.mjs\"))\n  },\n  {\n    \"id\": \"dark-plus\",\n    \"displayName\": \"Dark Plus\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_da-9b8f19\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/dark-plus */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/dark-plus.mjs\"))\n  },\n  {\n    \"id\": \"dracula\",\n    \"displayName\": \"Dracula Theme\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_dr-2dc59c\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/dracula */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/dracula.mjs\"))\n  },\n  {\n    \"id\": \"dracula-soft\",\n    \"displayName\": \"Dracula Theme Soft\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_dr-5dd5b4\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/dracula-soft */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/dracula-soft.mjs\"))\n  },\n  {\n    \"id\": \"everforest-dark\",\n    \"displayName\": \"Everforest Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ev-2ea21d\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/everforest-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/everforest-dark.mjs\"))\n  },\n  {\n    \"id\": \"everforest-light\",\n    \"displayName\": \"Everforest Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ev-75966a\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/everforest-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/everforest-light.mjs\"))\n  },\n  {\n    \"id\": \"github-dark\",\n    \"displayName\": \"GitHub Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-6b8d18\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-dark.mjs\"))\n  },\n  {\n    \"id\": \"github-dark-default\",\n    \"displayName\": \"GitHub Dark Default\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-1461f7\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-dark-default */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-dark-default.mjs\"))\n  },\n  {\n    \"id\": \"github-dark-dimmed\",\n    \"displayName\": \"GitHub Dark Dimmed\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-662f11\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-dark-dimmed */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-dark-dimmed.mjs\"))\n  },\n  {\n    \"id\": \"github-dark-high-contrast\",\n    \"displayName\": \"GitHub Dark High Contrast\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-5f00bd\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-dark-high-contrast */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-dark-high-contrast.mjs\"))\n  },\n  {\n    \"id\": \"github-light\",\n    \"displayName\": \"GitHub Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-88ca45\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-light.mjs\"))\n  },\n  {\n    \"id\": \"github-light-default\",\n    \"displayName\": \"GitHub Light Default\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-253828\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-light-default */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-light-default.mjs\"))\n  },\n  {\n    \"id\": \"github-light-high-contrast\",\n    \"displayName\": \"GitHub Light High Contrast\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_gi-d21400\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/github-light-high-contrast */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/github-light-high-contrast.mjs\"))\n  },\n  {\n    \"id\": \"houston\",\n    \"displayName\": \"Houston\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ho-05dfce\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/houston */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/houston.mjs\"))\n  },\n  {\n    \"id\": \"kanagawa-dragon\",\n    \"displayName\": \"Kanagawa Dragon\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ka-110402\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/kanagawa-dragon */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/kanagawa-dragon.mjs\"))\n  },\n  {\n    \"id\": \"kanagawa-lotus\",\n    \"displayName\": \"Kanagawa Lotus\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ka-84baf6\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/kanagawa-lotus */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/kanagawa-lotus.mjs\"))\n  },\n  {\n    \"id\": \"kanagawa-wave\",\n    \"displayName\": \"Kanagawa Wave\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ka-9c21ef\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/kanagawa-wave */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/kanagawa-wave.mjs\"))\n  },\n  {\n    \"id\": \"laserwave\",\n    \"displayName\": \"LaserWave\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_la-96dcfb\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/laserwave */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/laserwave.mjs\"))\n  },\n  {\n    \"id\": \"light-plus\",\n    \"displayName\": \"Light Plus\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_li-cae2a2\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/light-plus */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/light-plus.mjs\"))\n  },\n  {\n    \"id\": \"material-theme\",\n    \"displayName\": \"Material Theme\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ma-08b8cd\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/material-theme */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/material-theme.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-darker\",\n    \"displayName\": \"Material Theme Darker\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ma-6144b4\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/material-theme-darker */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/material-theme-darker.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-lighter\",\n    \"displayName\": \"Material Theme Lighter\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ma-14f914\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/material-theme-lighter */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/material-theme-lighter.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-ocean\",\n    \"displayName\": \"Material Theme Ocean\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ma-068379\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/material-theme-ocean */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/material-theme-ocean.mjs\"))\n  },\n  {\n    \"id\": \"material-theme-palenight\",\n    \"displayName\": \"Material Theme Palenight\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ma-7782a3\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/material-theme-palenight */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/material-theme-palenight.mjs\"))\n  },\n  {\n    \"id\": \"min-dark\",\n    \"displayName\": \"Min Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_mi-6c5451\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/min-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/min-dark.mjs\"))\n  },\n  {\n    \"id\": \"min-light\",\n    \"displayName\": \"Min Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_mi-7ca116\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/min-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/min-light.mjs\"))\n  },\n  {\n    \"id\": \"monokai\",\n    \"displayName\": \"Monokai\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_mo-eb6200\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/monokai */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/monokai.mjs\"))\n  },\n  {\n    \"id\": \"night-owl\",\n    \"displayName\": \"Night Owl\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ni-dc597d\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/night-owl */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/night-owl.mjs\"))\n  },\n  {\n    \"id\": \"nord\",\n    \"displayName\": \"Nord\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_nord_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/nord */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/nord.mjs\"))\n  },\n  {\n    \"id\": \"one-dark-pro\",\n    \"displayName\": \"One Dark Pro\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_on-3cc832\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/one-dark-pro */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/one-dark-pro.mjs\"))\n  },\n  {\n    \"id\": \"one-light\",\n    \"displayName\": \"One Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_on-d88e83\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/one-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/one-light.mjs\"))\n  },\n  {\n    \"id\": \"plastic\",\n    \"displayName\": \"Plastic\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_pl-9f9e35\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/plastic */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/plastic.mjs\"))\n  },\n  {\n    \"id\": \"poimandres\",\n    \"displayName\": \"Poimandres\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_po-0cea94\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/poimandres */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/poimandres.mjs\"))\n  },\n  {\n    \"id\": \"red\",\n    \"displayName\": \"Red\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_red_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/red */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/red.mjs\"))\n  },\n  {\n    \"id\": \"rose-pine\",\n    \"displayName\": \"Ros\\xE9 Pine\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ro-d7a0b7\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/rose-pine */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/rose-pine.mjs\"))\n  },\n  {\n    \"id\": \"rose-pine-dawn\",\n    \"displayName\": \"Ros\\xE9 Pine Dawn\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ro-0946c8\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/rose-pine-dawn */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/rose-pine-dawn.mjs\"))\n  },\n  {\n    \"id\": \"rose-pine-moon\",\n    \"displayName\": \"Ros\\xE9 Pine Moon\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ro-705c1e\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/rose-pine-moon */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/rose-pine-moon.mjs\"))\n  },\n  {\n    \"id\": \"slack-dark\",\n    \"displayName\": \"Slack Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_sl-27159c\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/slack-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/slack-dark.mjs\"))\n  },\n  {\n    \"id\": \"slack-ochin\",\n    \"displayName\": \"Slack Ochin\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_sl-6f86b6\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/slack-ochin */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/slack-ochin.mjs\"))\n  },\n  {\n    \"id\": \"snazzy-light\",\n    \"displayName\": \"Snazzy Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_sn-53ebc5\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/snazzy-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/snazzy-light.mjs\"))\n  },\n  {\n    \"id\": \"solarized-dark\",\n    \"displayName\": \"Solarized Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_so-09eded\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/solarized-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/solarized-dark.mjs\"))\n  },\n  {\n    \"id\": \"solarized-light\",\n    \"displayName\": \"Solarized Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_so-7be388\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/solarized-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/solarized-light.mjs\"))\n  },\n  {\n    \"id\": \"synthwave-84\",\n    \"displayName\": \"Synthwave '84\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_sy-b1f217\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/synthwave-84 */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/synthwave-84.mjs\"))\n  },\n  {\n    \"id\": \"tokyo-night\",\n    \"displayName\": \"Tokyo Night\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_to-d1e0b2\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/tokyo-night */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/tokyo-night.mjs\"))\n  },\n  {\n    \"id\": \"vesper\",\n    \"displayName\": \"Vesper\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_ve-ce1066\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/vesper */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/vesper.mjs\"))\n  },\n  {\n    \"id\": \"vitesse-black\",\n    \"displayName\": \"Vitesse Black\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_vi-c535d3\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/vitesse-black */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/vitesse-black.mjs\"))\n  },\n  {\n    \"id\": \"vitesse-dark\",\n    \"displayName\": \"Vitesse Dark\",\n    \"type\": \"dark\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_vi-e1c390\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/vitesse-dark */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/vitesse-dark.mjs\"))\n  },\n  {\n    \"id\": \"vitesse-light\",\n    \"displayName\": \"Vitesse Light\",\n    \"type\": \"light\",\n    \"import\": () => __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shikijs_themes_2_5_0_node_modules_shikijs_themes_dist_vi-53689f\").then(__webpack_require__.bind(__webpack_require__, /*! @shikijs/themes/vitesse-light */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+themes@2.5.0/node_modules/@shikijs/themes/dist/vitesse-light.mjs\"))\n  }\n];\nconst bundledThemes = Object.fromEntries(bundledThemesInfo.map((i) => [i.id, i.import]));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/themes.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm-dynamic-K7LwWlz7.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm-dynamic-K7LwWlz7.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getWasmInlined)\n/* harmony export */ });\n/* harmony import */ var _shikijs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shikijs/core */ \"(app-pages-browser)/./node_modules/.pnpm/@shikijs+core@2.5.0/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs\");\n\n\nconst getWasmInlined = async (info) => {\n  (0,_shikijs_core__WEBPACK_IMPORTED_MODULE_0__.w)('`getWasmInlined` is deprecated. Use `import(\"shiki/wasm\")` instead.');\n  return __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_shiki_2_5_0_node_modules_shiki_dist_wasm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! shiki/wasm */ \"(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm.mjs\")).then((wasm) => wasm.default(info));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraUAyLjUuMC9ub2RlX21vZHVsZXMvc2hpa2kvZGlzdC93YXNtLWR5bmFtaWMtSzdMd1dsejcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0EsRUFBRSxnREFBYztBQUNoQixTQUFTLHlSQUFvQjtBQUM3Qjs7QUFFK0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9zaGlraUAyLjUuMC9ub2RlX21vZHVsZXMvc2hpa2kvZGlzdC93YXNtLWR5bmFtaWMtSzdMd1dsejcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd2FybkRlcHJlY2F0ZWQgfSBmcm9tICdAc2hpa2lqcy9jb3JlJztcblxuY29uc3QgZ2V0V2FzbUlubGluZWQgPSBhc3luYyAoaW5mbykgPT4ge1xuICB3YXJuRGVwcmVjYXRlZCgnYGdldFdhc21JbmxpbmVkYCBpcyBkZXByZWNhdGVkLiBVc2UgYGltcG9ydChcInNoaWtpL3dhc21cIilgIGluc3RlYWQuJyk7XG4gIHJldHVybiBpbXBvcnQoJ3NoaWtpL3dhc20nKS50aGVuKCh3YXNtKSA9PiB3YXNtLmRlZmF1bHQoaW5mbykpO1xufTtcblxuZXhwb3J0IHsgZ2V0V2FzbUlubGluZWQgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/shiki@2.5.0/node_modules/shiki/dist/wasm-dynamic-K7LwWlz7.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/constant/dangerous.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/constant/dangerous.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dangerous: () => (/* binding */ dangerous)\n/* harmony export */ });\n/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nconst dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvY29uc3RhbnQvZGFuZ2Vyb3VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvY29uc3RhbnQvZGFuZ2Vyb3VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiBsZWdhY3kgKHRoYXQgZG9u4oCZdCBuZWVkIGEgdHJhaWxpbmcgYDtgKSBuYW1lZCByZWZlcmVuY2VzIHdoaWNoIGNvdWxkLFxuICogZGVwZW5kaW5nIG9uIHdoYXQgZm9sbG93cyB0aGVtLCB0dXJuIGludG8gYSBkaWZmZXJlbnQgbWVhbmluZ1xuICpcbiAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3QgZGFuZ2Vyb3VzID0gW1xuICAnY2VudCcsXG4gICdjb3B5JyxcbiAgJ2RpdmlkZScsXG4gICdndCcsXG4gICdsdCcsXG4gICdub3QnLFxuICAncGFyYScsXG4gICd0aW1lcydcbl1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/constant/dangerous.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   core: () => (/* binding */ core)\n/* harmony export */ });\n/**\n * @typedef CoreOptions\n * @property {ReadonlyArray<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\nconst defaultSubsetRegex = /[\"&'<>`]/g\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\nconst controlCharactersRegex =\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\n\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\nconst subsetToRegexCache = new WeakMap()\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nfunction core(value, options) {\n  value = value.replace(\n    options.subset\n      ? charactersToExpressionCached(options.subset)\n      : defaultSubsetRegex,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(surrogatePairsRegex, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(controlCharactersRegex, basic)\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\n * with the same subset.\n *\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpressionCached(subset) {\n  let cached = subsetToRegexCache.get(subset)\n\n  if (!cached) {\n    cached = charactersToExpression(subset)\n    subsetToRegexCache.set(subset, cached)\n  }\n\n  return cached\n}\n\n/**\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvY29yZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx3RUFBd0U7QUFDdEY7QUFDQTtBQUNBLGFBQWEsbUZBQW1GO0FBQ2hHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7O0FBRWhDLFdBQVcsd0NBQXdDO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHVCQUF1QjtBQUNsQyxhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsS0FBSztBQUNoRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vc3RyaW5naWZ5LWVudGl0aWVzQDQuMC40L25vZGVfbW9kdWxlcy9zdHJpbmdpZnktZW50aXRpZXMvbGliL2NvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiBDb3JlT3B0aW9uc1xuICogQHByb3BlcnR5IHtSZWFkb25seUFycmF5PHN0cmluZz59IFtzdWJzZXQ9W11dXG4gKiAgIFdoZXRoZXIgdG8gb25seSBlc2NhcGUgdGhlIGdpdmVuIHN1YnNldCBvZiBjaGFyYWN0ZXJzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbZXNjYXBlT25seT1mYWxzZV1cbiAqICAgV2hldGhlciB0byBvbmx5IGVzY2FwZSBwb3NzaWJseSBkYW5nZXJvdXMgY2hhcmFjdGVycy5cbiAqICAgVGhvc2UgY2hhcmFjdGVycyBhcmUgYFwiYCwgYCZgLCBgJ2AsIGA8YCwgYD5gLCBhbmQgYGAgYCBgYC5cbiAqXG4gKiBAdHlwZWRlZiBGb3JtYXRPcHRpb25zXG4gKiBAcHJvcGVydHkgeyhjb2RlOiBudW1iZXIsIG5leHQ6IG51bWJlciwgb3B0aW9uczogQ29yZVdpdGhGb3JtYXRPcHRpb25zKSA9PiBzdHJpbmd9IGZvcm1hdFxuICogICBGb3JtYXQgc3RyYXRlZ3kuXG4gKlxuICogQHR5cGVkZWYge0NvcmVPcHRpb25zICYgRm9ybWF0T3B0aW9ucyAmIGltcG9ydCgnLi91dGlsL2Zvcm1hdC1zbWFydC5qcycpLkZvcm1hdFNtYXJ0T3B0aW9uc30gQ29yZVdpdGhGb3JtYXRPcHRpb25zXG4gKi9cblxuY29uc3QgZGVmYXVsdFN1YnNldFJlZ2V4ID0gL1tcIiYnPD5gXS9nXG5jb25zdCBzdXJyb2dhdGVQYWlyc1JlZ2V4ID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZ1xuY29uc3QgY29udHJvbENoYXJhY3RlcnNSZWdleCA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4LCB1bmljb3JuL25vLWhleC1lc2NhcGVcbiAgL1tcXHgwMS1cXHRcXHZcXGZcXHgwRS1cXHgxRlxceDdGXFx4ODFcXHg4RFxceDhGXFx4OTBcXHg5RFxceEEwLVxcdUZGRkZdL2dcbmNvbnN0IHJlZ2V4RXNjYXBlUmVnZXggPSAvW3xcXFxce30oKVtcXF1eJCsqPy5dL2dcblxuLyoqIEB0eXBlIHtXZWFrTWFwPFJlYWRvbmx5QXJyYXk8c3RyaW5nPiwgUmVnRXhwPn0gKi9cbmNvbnN0IHN1YnNldFRvUmVnZXhDYWNoZSA9IG5ldyBXZWFrTWFwKClcblxuLyoqXG4gKiBFbmNvZGUgY2VydGFpbiBjaGFyYWN0ZXJzIGluIGB2YWx1ZWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge0NvcmVXaXRoRm9ybWF0T3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcmUodmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKFxuICAgIG9wdGlvbnMuc3Vic2V0XG4gICAgICA/IGNoYXJhY3RlcnNUb0V4cHJlc3Npb25DYWNoZWQob3B0aW9ucy5zdWJzZXQpXG4gICAgICA6IGRlZmF1bHRTdWJzZXRSZWdleCxcbiAgICBiYXNpY1xuICApXG5cbiAgaWYgKG9wdGlvbnMuc3Vic2V0IHx8IG9wdGlvbnMuZXNjYXBlT25seSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICB2YWx1ZVxuICAgICAgLy8gU3Vycm9nYXRlIHBhaXJzLlxuICAgICAgLnJlcGxhY2Uoc3Vycm9nYXRlUGFpcnNSZWdleCwgc3Vycm9nYXRlKVxuICAgICAgLy8gQk1QIGNvbnRyb2wgY2hhcmFjdGVycyAoQzAgZXhjZXB0IGZvciBMRiwgQ1IsIFNQOyBERUw7IGFuZCBzb21lIG1vcmVcbiAgICAgIC8vIG5vbi1BU0NJSSBvbmVzKS5cbiAgICAgIC5yZXBsYWNlKGNvbnRyb2xDaGFyYWN0ZXJzUmVnZXgsIGJhc2ljKVxuICApXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYWlyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWxsXG4gICAqL1xuICBmdW5jdGlvbiBzdXJyb2dhdGUocGFpciwgaW5kZXgsIGFsbCkge1xuICAgIHJldHVybiBvcHRpb25zLmZvcm1hdChcbiAgICAgIChwYWlyLmNoYXJDb2RlQXQoMCkgLSAweGQ4MDApICogMHg0MDAgK1xuICAgICAgICBwYWlyLmNoYXJDb2RlQXQoMSkgLVxuICAgICAgICAweGRjMDAgK1xuICAgICAgICAweDEwMDAwLFxuICAgICAgYWxsLmNoYXJDb2RlQXQoaW5kZXggKyAyKSxcbiAgICAgIG9wdGlvbnNcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFsbFxuICAgKi9cbiAgZnVuY3Rpb24gYmFzaWMoY2hhcmFjdGVyLCBpbmRleCwgYWxsKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZm9ybWF0KFxuICAgICAgY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCksXG4gICAgICBhbGwuY2hhckNvZGVBdChpbmRleCArIDEpLFxuICAgICAgb3B0aW9uc1xuICAgIClcbiAgfVxufVxuXG4vKipcbiAqIEEgd3JhcHBlciBmdW5jdGlvbiB0aGF0IGNhY2hlcyB0aGUgcmVzdWx0IG9mIGBjaGFyYWN0ZXJzVG9FeHByZXNzaW9uYCB3aXRoIGEgV2Vha01hcC5cbiAqIFRoaXMgY2FuIGltcHJvdmUgcGVyZm9ybWFuY2Ugd2hlbiB0b29saW5nIGNhbGxzIGBjaGFyYWN0ZXJzVG9FeHByZXNzaW9uYCByZXBlYXRlZGx5XG4gKiB3aXRoIHRoZSBzYW1lIHN1YnNldC5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8c3RyaW5nPn0gc3Vic2V0XG4gKiBAcmV0dXJucyB7UmVnRXhwfVxuICovXG5mdW5jdGlvbiBjaGFyYWN0ZXJzVG9FeHByZXNzaW9uQ2FjaGVkKHN1YnNldCkge1xuICBsZXQgY2FjaGVkID0gc3Vic2V0VG9SZWdleENhY2hlLmdldChzdWJzZXQpXG5cbiAgaWYgKCFjYWNoZWQpIHtcbiAgICBjYWNoZWQgPSBjaGFyYWN0ZXJzVG9FeHByZXNzaW9uKHN1YnNldClcbiAgICBzdWJzZXRUb1JlZ2V4Q2FjaGUuc2V0KHN1YnNldCwgY2FjaGVkKVxuICB9XG5cbiAgcmV0dXJuIGNhY2hlZFxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxzdHJpbmc+fSBzdWJzZXRcbiAqIEByZXR1cm5zIHtSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGNoYXJhY3RlcnNUb0V4cHJlc3Npb24oc3Vic2V0KSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgZ3JvdXBzID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHN1YnNldC5sZW5ndGgpIHtcbiAgICBncm91cHMucHVzaChzdWJzZXRbaW5kZXhdLnJlcGxhY2UocmVnZXhFc2NhcGVSZWdleCwgJ1xcXFwkJicpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyg/OicgKyBncm91cHMuam9pbignfCcpICsgJyknLCAnZycpXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyEntities: () => (/* binding */ stringifyEntities),\n/* harmony export */   stringifyEntitiesLight: () => (/* binding */ stringifyEntitiesLight)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.js\");\n/* harmony import */ var _util_format_smart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/format-smart.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-smart.js\");\n/* harmony import */ var _util_format_basic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/format-basic.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-basic.js\");\n/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\n\n\n\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nfunction stringifyEntities(value, options) {\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.core)(value, Object.assign({format: _util_format_smart_js__WEBPACK_IMPORTED_MODULE_1__.formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nfunction stringifyEntitiesLight(value, options) {\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.core)(value, Object.assign({format: _util_format_basic_js__WEBPACK_IMPORTED_MODULE_2__.formatBasic}, options))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsdUZBQXVGO0FBQ3BHLGFBQWEsaUNBQWlDO0FBQzlDOztBQUU4QjtBQUNvQjtBQUNBOztBQUVsRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsU0FBUyw4Q0FBSSx1QkFBdUIsUUFBUSw4REFBVyxDQUFDO0FBQ3hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUCxTQUFTLDhDQUFJLHVCQUF1QixRQUFRLDhEQUFXLENBQUM7QUFDeEQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUuanMnKS5Db3JlT3B0aW9ucyAmIGltcG9ydCgnLi91dGlsL2Zvcm1hdC1zbWFydC5qcycpLkZvcm1hdFNtYXJ0T3B0aW9uc30gT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlLmpzJykuQ29yZU9wdGlvbnN9IExpZ2h0T3B0aW9uc1xuICovXG5cbmltcG9ydCB7Y29yZX0gZnJvbSAnLi9jb3JlLmpzJ1xuaW1wb3J0IHtmb3JtYXRTbWFydH0gZnJvbSAnLi91dGlsL2Zvcm1hdC1zbWFydC5qcydcbmltcG9ydCB7Zm9ybWF0QmFzaWN9IGZyb20gJy4vdXRpbC9mb3JtYXQtYmFzaWMuanMnXG5cbi8qKlxuICogRW5jb2RlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBgdmFsdWVgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBWYWx1ZSB0byBlbmNvZGUuXG4gKiBAcGFyYW0ge09wdGlvbnN9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRW5jb2RlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUVudGl0aWVzKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBjb3JlKHZhbHVlLCBPYmplY3QuYXNzaWduKHtmb3JtYXQ6IGZvcm1hdFNtYXJ0fSwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogRW5jb2RlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBgdmFsdWVgIGFzIGhleGFkZWNpbWFscy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgVmFsdWUgdG8gZW5jb2RlLlxuICogQHBhcmFtIHtMaWdodE9wdGlvbnN9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRW5jb2RlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUVudGl0aWVzTGlnaHQodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNvcmUodmFsdWUsIE9iamVjdC5hc3NpZ24oe2Zvcm1hdDogZm9ybWF0QmFzaWN9LCBvcHRpb25zKSlcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-basic.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-basic.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatBasic: () => (/* binding */ formatBasic)\n/* harmony export */ });\n/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nfunction formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvdXRpbC9mb3JtYXQtYmFzaWMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTztBQUNQLHFEQUFxRDtBQUNyRCIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL3N0cmluZ2lmeS1lbnRpdGllc0A0LjAuNC9ub2RlX21vZHVsZXMvc3RyaW5naWZ5LWVudGl0aWVzL2xpYi91dGlsL2Zvcm1hdC1iYXNpYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBzbWFsbGVzdCB3YXkgdG8gZW5jb2RlIGEgY2hhcmFjdGVyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QmFzaWMoY29kZSkge1xuICByZXR1cm4gJyYjeCcgKyBjb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgJzsnXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-basic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-smart.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-smart.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatSmart: () => (/* binding */ formatSmart)\n/* harmony export */ });\n/* harmony import */ var _to_hexadecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./to-hexadecimal.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-hexadecimal.js\");\n/* harmony import */ var _to_decimal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./to-decimal.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-decimal.js\");\n/* harmony import */ var _to_named_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./to-named.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-named.js\");\n/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\n\n\n\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nfunction formatSmart(code, next, options) {\n  let numeric = (0,_to_hexadecimal_js__WEBPACK_IMPORTED_MODULE_0__.toHexadecimal)(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = (0,_to_named_js__WEBPACK_IMPORTED_MODULE_1__.toNamed)(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = (0,_to_decimal_js__WEBPACK_IMPORTED_MODULE_2__.toDecimal)(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvdXRpbC9mb3JtYXQtc21hcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkIsOENBQThDO0FBQzlDLGNBQWMsU0FBUztBQUN2QjtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFaUQ7QUFDUjtBQUNKOztBQUVyQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsb0JBQW9CO0FBQy9CLGFBQWE7QUFDYjtBQUNPO0FBQ1AsZ0JBQWdCLGlFQUFhO0FBQzdCLGFBQWEsa0JBQWtCO0FBQy9COztBQUVBO0FBQ0EsWUFBWSxxREFBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekIsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseURBQVM7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taG1kL0RvY3VtZW50cy9HaXRIdWIvQVdNLWRhdGF0aG9uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvdXRpbC9mb3JtYXQtc21hcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiBGb3JtYXRTbWFydE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3VzZU5hbWVkUmVmZXJlbmNlcz1mYWxzZV1cbiAqICAgUHJlZmVyIG5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIChgJmFtcDtgKSB3aGVyZSBwb3NzaWJsZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3VzZVNob3J0ZXN0UmVmZXJlbmNlcz1mYWxzZV1cbiAqICAgUHJlZmVyIHRoZSBzaG9ydGVzdCBwb3NzaWJsZSByZWZlcmVuY2UsIGlmIHRoYXQgcmVzdWx0cyBpbiBsZXNzIGJ5dGVzLlxuICogICAqKk5vdGUqKjogYHVzZU5hbWVkUmVmZXJlbmNlc2AgY2FuIGJlIG9taXR0ZWQgd2hlbiB1c2luZyBgdXNlU2hvcnRlc3RSZWZlcmVuY2VzYC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29taXRPcHRpb25hbFNlbWljb2xvbnM9ZmFsc2VdXG4gKiAgIFdoZXRoZXIgdG8gb21pdCBzZW1pY29sb25zIHdoZW4gcG9zc2libGUuXG4gKiAgICoqTm90ZSoqOiBUaGlzIGNyZWF0ZXMgd2hhdCBIVE1MIGNhbGxzIOKAnHBhcnNlIGVycm9yc+KAnSBidXQgaXMgb3RoZXJ3aXNlIHN0aWxsIHZhbGlkIEhUTUwg4oCUIGRvbuKAmXQgdXNlIHRoaXMgZXhjZXB0IHdoZW4gYnVpbGRpbmcgYSBtaW5pZmllci5cbiAqICAgT21pdHRpbmcgc2VtaWNvbG9ucyBpcyBwb3NzaWJsZSBmb3IgY2VydGFpbiBuYW1lZCBhbmQgbnVtZXJpYyByZWZlcmVuY2VzIGluIHNvbWUgY2FzZXMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFthdHRyaWJ1dGU9ZmFsc2VdXG4gKiAgIENyZWF0ZSBjaGFyYWN0ZXIgcmVmZXJlbmNlcyB3aGljaCBkb27igJl0IGZhaWwgaW4gYXR0cmlidXRlcy5cbiAqICAgKipOb3RlKio6IGBhdHRyaWJ1dGVgIG9ubHkgYXBwbGllcyB3aGVuIG9wZXJhdGluZyBkYW5nZXJvdXNseSB3aXRoXG4gKiAgIGBvbWl0T3B0aW9uYWxTZW1pY29sb25zOiB0cnVlYC5cbiAqL1xuXG5pbXBvcnQge3RvSGV4YWRlY2ltYWx9IGZyb20gJy4vdG8taGV4YWRlY2ltYWwuanMnXG5pbXBvcnQge3RvRGVjaW1hbH0gZnJvbSAnLi90by1kZWNpbWFsLmpzJ1xuaW1wb3J0IHt0b05hbWVkfSBmcm9tICcuL3RvLW5hbWVkLmpzJ1xuXG4vKipcbiAqIENvbmZpZ3VyYWJsZSB3YXlzIHRvIGVuY29kZSBhIGNoYXJhY3RlciB5aWVsZGluZyBwcmV0dHkgb3Igc21hbGwgcmVzdWx0cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICogQHBhcmFtIHtudW1iZXJ9IG5leHRcbiAqIEBwYXJhbSB7Rm9ybWF0U21hcnRPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0U21hcnQoY29kZSwgbmV4dCwgb3B0aW9ucykge1xuICBsZXQgbnVtZXJpYyA9IHRvSGV4YWRlY2ltYWwoY29kZSwgbmV4dCwgb3B0aW9ucy5vbWl0T3B0aW9uYWxTZW1pY29sb25zKVxuICAvKiogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9ICovXG4gIGxldCBuYW1lZFxuXG4gIGlmIChvcHRpb25zLnVzZU5hbWVkUmVmZXJlbmNlcyB8fCBvcHRpb25zLnVzZVNob3J0ZXN0UmVmZXJlbmNlcykge1xuICAgIG5hbWVkID0gdG9OYW1lZChcbiAgICAgIGNvZGUsXG4gICAgICBuZXh0LFxuICAgICAgb3B0aW9ucy5vbWl0T3B0aW9uYWxTZW1pY29sb25zLFxuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVcbiAgICApXG4gIH1cblxuICAvLyBVc2UgdGhlIHNob3J0ZXN0IG51bWVyaWMgcmVmZXJlbmNlIHdoZW4gcmVxdWVzdGVkLlxuICAvLyBBIHNpbXBsZSBhbGdvcml0aG0gd291bGQgdXNlIGRlY2ltYWwgZm9yIGFsbCBjb2RlIHBvaW50cyB1bmRlciAxMDAsIGFzXG4gIC8vIHRob3NlIGFyZSBzaG9ydGVyIHRoYW4gaGV4YWRlY2ltYWw6XG4gIC8vXG4gIC8vICogYCYjOTk7YCB2cyBgJiN4NjM7YCAoZGVjaW1hbCBzaG9ydGVyKVxuICAvLyAqIGAmIzEwMDtgIHZzIGAmI3g2NDtgIChlcXVhbClcbiAgLy9cbiAgLy8gSG93ZXZlciwgYmVjYXVzZSB3ZSB0YWtlIGBuZXh0YCBpbnRvIGNvbnNpZGVyYXRpb24gd2hlbiBgb21pdGAgaXMgdXNlZCxcbiAgLy8gQW5kIGl0IHdvdWxkIGJlIHBvc3NpYmxlIHRoYXQgZGVjaW1hbHMgYXJlIHNob3J0ZXIgb24gYmlnZ2VyIHZhbHVlcyBhc1xuICAvLyB3ZWxsIGlmIGBuZXh0YCBpcyBoZXhhZGVjaW1hbCBidXQgbm90IGRlY2ltYWwsIHdlIGluc3RlYWQgY29tcGFyZSBib3RoLlxuICBpZiAoXG4gICAgKG9wdGlvbnMudXNlU2hvcnRlc3RSZWZlcmVuY2VzIHx8ICFuYW1lZCkgJiZcbiAgICBvcHRpb25zLnVzZVNob3J0ZXN0UmVmZXJlbmNlc1xuICApIHtcbiAgICBjb25zdCBkZWNpbWFsID0gdG9EZWNpbWFsKGNvZGUsIG5leHQsIG9wdGlvbnMub21pdE9wdGlvbmFsU2VtaWNvbG9ucylcblxuICAgIGlmIChkZWNpbWFsLmxlbmd0aCA8IG51bWVyaWMubGVuZ3RoKSB7XG4gICAgICBudW1lcmljID0gZGVjaW1hbFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lZCAmJlxuICAgICghb3B0aW9ucy51c2VTaG9ydGVzdFJlZmVyZW5jZXMgfHwgbmFtZWQubGVuZ3RoIDwgbnVtZXJpYy5sZW5ndGgpXG4gICAgPyBuYW1lZFxuICAgIDogbnVtZXJpY1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-smart.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-decimal.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-decimal.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toDecimal: () => (/* binding */ toDecimal)\n/* harmony export */ });\nconst decimalRegex = /\\d/\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !decimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvdXRpbC90by1kZWNpbWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsbUJBQW1CO0FBQzlCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vc3RyaW5naWZ5LWVudGl0aWVzQDQuMC40L25vZGVfbW9kdWxlcy9zdHJpbmdpZnktZW50aXRpZXMvbGliL3V0aWwvdG8tZGVjaW1hbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWNpbWFsUmVnZXggPSAvXFxkL1xuXG4vKipcbiAqIENvbmZpZ3VyYWJsZSB3YXlzIHRvIGVuY29kZSBjaGFyYWN0ZXJzIGFzIGRlY2ltYWwgcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICogQHBhcmFtIHtudW1iZXJ9IG5leHRcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IG9taXRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0RlY2ltYWwoY29kZSwgbmV4dCwgb21pdCkge1xuICBjb25zdCB2YWx1ZSA9ICcmIycgKyBTdHJpbmcoY29kZSlcbiAgcmV0dXJuIG9taXQgJiYgbmV4dCAmJiAhZGVjaW1hbFJlZ2V4LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShuZXh0KSlcbiAgICA/IHZhbHVlXG4gICAgOiB2YWx1ZSArICc7J1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-decimal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-hexadecimal.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-hexadecimal.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toHexadecimal: () => (/* binding */ toHexadecimal)\n/* harmony export */ });\nconst hexadecimalRegex = /[\\dA-Fa-f]/\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !hexadecimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvdXRpbC90by1oZXhhZGVjaW1hbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLG1CQUFtQjtBQUM5QixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsiL1VzZXJzL21obWQvRG9jdW1lbnRzL0dpdEh1Yi9BV00tZGF0YXRob24vbm9kZV9tb2R1bGVzLy5wbnBtL3N0cmluZ2lmeS1lbnRpdGllc0A0LjAuNC9ub2RlX21vZHVsZXMvc3RyaW5naWZ5LWVudGl0aWVzL2xpYi91dGlsL3RvLWhleGFkZWNpbWFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGhleGFkZWNpbWFsUmVnZXggPSAvW1xcZEEtRmEtZl0vXG5cbi8qKlxuICogQ29uZmlndXJhYmxlIHdheXMgdG8gZW5jb2RlIGNoYXJhY3RlcnMgYXMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICogQHBhcmFtIHtudW1iZXJ9IG5leHRcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IG9taXRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0hleGFkZWNpbWFsKGNvZGUsIG5leHQsIG9taXQpIHtcbiAgY29uc3QgdmFsdWUgPSAnJiN4JyArIGNvZGUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG9taXQgJiYgbmV4dCAmJiAhaGV4YWRlY2ltYWxSZWdleC50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUobmV4dCkpXG4gICAgPyB2YWx1ZVxuICAgIDogdmFsdWUgKyAnOydcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-hexadecimal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-named.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-named.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toNamed: () => (/* binding */ toNamed)\n/* harmony export */ });\n/* harmony import */ var character_entities_legacy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! character-entities-legacy */ \"(app-pages-browser)/./node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js\");\n/* harmony import */ var character_entities_html4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! character-entities-html4 */ \"(app-pages-browser)/./node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js\");\n/* harmony import */ var _constant_dangerous_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constant/dangerous.js */ \"(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/constant/dangerous.js\");\n\n\n\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in character_entities_html4__WEBPACK_IMPORTED_MODULE_0__.characterEntitiesHtml4) {\n  if (own.call(character_entities_html4__WEBPACK_IMPORTED_MODULE_0__.characterEntitiesHtml4, key)) {\n    characters[character_entities_html4__WEBPACK_IMPORTED_MODULE_0__.characterEntitiesHtml4[key]] = key\n  }\n}\n\nconst notAlphanumericRegex = /[^\\dA-Za-z]/\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nfunction toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      character_entities_legacy__WEBPACK_IMPORTED_MODULE_1__.characterEntitiesLegacy.includes(name) &&\n      !_constant_dangerous_js__WEBPACK_IMPORTED_MODULE_2__.dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          notAlphanumericRegex.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNANC4wLjQvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvdXRpbC90by1uYW1lZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlFO0FBQ0Y7QUFDYjs7QUFFbEQsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxXQUFXLFFBQVE7QUFDbkI7O0FBRUEsWUFBWSw0RUFBc0I7QUFDbEMsZUFBZSw0RUFBc0I7QUFDckMsZUFBZSw0RUFBc0I7QUFDckM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsbUJBQW1CO0FBQzlCLFdBQVcsbUJBQW1CO0FBQzlCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNLDhFQUF1QjtBQUM3QixPQUFPLDZEQUFTO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vc3RyaW5naWZ5LWVudGl0aWVzQDQuMC40L25vZGVfbW9kdWxlcy9zdHJpbmdpZnktZW50aXRpZXMvbGliL3V0aWwvdG8tbmFtZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjaGFyYWN0ZXJFbnRpdGllc0xlZ2FjeX0gZnJvbSAnY2hhcmFjdGVyLWVudGl0aWVzLWxlZ2FjeSdcbmltcG9ydCB7Y2hhcmFjdGVyRW50aXRpZXNIdG1sNH0gZnJvbSAnY2hhcmFjdGVyLWVudGl0aWVzLWh0bWw0J1xuaW1wb3J0IHtkYW5nZXJvdXN9IGZyb20gJy4uL2NvbnN0YW50L2Rhbmdlcm91cy5qcydcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBgY2hhcmFjdGVyRW50aXRpZXNIdG1sNGAgYnV0IGludmVydGVkLlxuICpcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5jb25zdCBjaGFyYWN0ZXJzID0ge31cblxuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5sZXQga2V5XG5cbmZvciAoa2V5IGluIGNoYXJhY3RlckVudGl0aWVzSHRtbDQpIHtcbiAgaWYgKG93bi5jYWxsKGNoYXJhY3RlckVudGl0aWVzSHRtbDQsIGtleSkpIHtcbiAgICBjaGFyYWN0ZXJzW2NoYXJhY3RlckVudGl0aWVzSHRtbDRba2V5XV0gPSBrZXlcbiAgfVxufVxuXG5jb25zdCBub3RBbHBoYW51bWVyaWNSZWdleCA9IC9bXlxcZEEtWmEtel0vXG5cbi8qKlxuICogQ29uZmlndXJhYmxlIHdheXMgdG8gZW5jb2RlIGNoYXJhY3RlcnMgYXMgbmFtZWQgcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICogQHBhcmFtIHtudW1iZXJ9IG5leHRcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IG9taXRcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGF0dHJpYnV0ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvTmFtZWQoY29kZSwgbmV4dCwgb21pdCwgYXR0cmlidXRlKSB7XG4gIGNvbnN0IGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcblxuICBpZiAob3duLmNhbGwoY2hhcmFjdGVycywgY2hhcmFjdGVyKSkge1xuICAgIGNvbnN0IG5hbWUgPSBjaGFyYWN0ZXJzW2NoYXJhY3Rlcl1cbiAgICBjb25zdCB2YWx1ZSA9ICcmJyArIG5hbWVcblxuICAgIGlmIChcbiAgICAgIG9taXQgJiZcbiAgICAgIGNoYXJhY3RlckVudGl0aWVzTGVnYWN5LmluY2x1ZGVzKG5hbWUpICYmXG4gICAgICAhZGFuZ2Vyb3VzLmluY2x1ZGVzKG5hbWUpICYmXG4gICAgICAoIWF0dHJpYnV0ZSB8fFxuICAgICAgICAobmV4dCAmJlxuICAgICAgICAgIG5leHQgIT09IDYxIC8qIGA9YCAqLyAmJlxuICAgICAgICAgIG5vdEFscGhhbnVtZXJpY1JlZ2V4LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShuZXh0KSkpKVxuICAgICkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlICsgJzsnXG4gIH1cblxuICByZXR1cm4gJydcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-named.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   zwitch: () => (/* binding */ zwitch)\n/* harmony export */ });\n/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nfunction zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS96d2l0Y2hAMi4wLjQvbm9kZV9tb2R1bGVzL3p3aXRjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBLGNBQWMsZ0JBQWdCO0FBQzlCLGNBQWMsZ0JBQWdCO0FBQzlCLGNBQWMseUJBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQSxjQUFjLFVBQVU7QUFDeEI7QUFDQTs7QUFFQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCO0FBQzlCLGNBQWMsZ0JBQWdCO0FBQzlCLGNBQWMseUJBQXlCO0FBQ3ZDLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcscUNBQXFDO0FBQ2hEO0FBQ0EsY0FBYztBQUNkO0FBQ087QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFlBQVk7QUFDekI7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWhtZC9Eb2N1bWVudHMvR2l0SHViL0FXTS1kYXRhdGhvbi9ub2RlX21vZHVsZXMvLnBucG0vendpdGNoQDIuMC40L25vZGVfbW9kdWxlcy96d2l0Y2gvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAY2FsbGJhY2sgSGFuZGxlclxuICogICBIYW5kbGUgYSB2YWx1ZSwgd2l0aCBhIGNlcnRhaW4gSUQgZmllbGQgc2V0IHRvIGEgY2VydGFpbiB2YWx1ZS5cbiAqICAgVGhlIElEIGZpZWxkIGlzIHBhc3NlZCB0byBgendpdGNoYCwgYW5kIGl04oCZcyB2YWx1ZSBpcyB0aGlzIGZ1bmN0aW9u4oCZc1xuICogICBwbGFjZSBvbiB0aGUgYGhhbmRsZXJzYCByZWNvcmQuXG4gKiBAcGFyYW0gey4uLmFueX0gcGFyYW1ldGVyc1xuICogICBBcmJpdHJhcnkgcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIHp3aXRjaC5cbiAqICAgVGhlIGZpcnN0IHdpbGwgYmUgYW4gb2JqZWN0IHdpdGggYSBjZXJ0YWluIElEIGZpZWxkIHNldCB0byBhIGNlcnRhaW4gdmFsdWUuXG4gKiBAcmV0dXJucyB7YW55fVxuICogICBBbnl0aGluZyFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBVbmtub3duSGFuZGxlclxuICogICBIYW5kbGUgdmFsdWVzIHRoYXQgZG8gaGF2ZSBhIGNlcnRhaW4gSUQgZmllbGQsIGJ1dCBpdOKAmXMgc2V0IHRvIGEgdmFsdWVcbiAqICAgdGhhdCBpcyBub3QgbGlzdGVkIGluIHRoZSBgaGFuZGxlcnNgIHJlY29yZC5cbiAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAqICAgQW4gb2JqZWN0IHdpdGggYSBjZXJ0YWluIElEIGZpZWxkIHNldCB0byBhbiB1bmtub3duIHZhbHVlLlxuICogQHBhcmFtIHsuLi5hbnl9IHJlc3RcbiAqICAgQXJiaXRyYXJ5IHBhcmFtZXRlcnMgcGFzc2VkIHRvIHRoZSB6d2l0Y2guXG4gKiBAcmV0dXJucyB7YW55fVxuICogICBBbnl0aGluZyFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBJbnZhbGlkSGFuZGxlclxuICogICBIYW5kbGUgdmFsdWVzIHRoYXQgZG8gbm90IGhhdmUgYSBjZXJ0YWluIElEIGZpZWxkLlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogICBBbnkgdW5rbm93biB2YWx1ZS5cbiAqIEBwYXJhbSB7Li4uYW55fSByZXN0XG4gKiAgIEFyYml0cmFyeSBwYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgendpdGNoLlxuICogQHJldHVybnMge3ZvaWR8bnVsbHx1bmRlZmluZWR8bmV2ZXJ9XG4gKiAgIFRoaXMgc2hvdWxkIGNyYXNoIG9yIHJldHVybiBub3RoaW5nLlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtJbnZhbGlkSGFuZGxlcn0gW0ludmFsaWQ9SW52YWxpZEhhbmRsZXJdXG4gKiBAdGVtcGxhdGUge1Vua25vd25IYW5kbGVyfSBbVW5rbm93bj1Vbmtub3duSGFuZGxlcl1cbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgSGFuZGxlcj59IFtIYW5kbGVycz1SZWNvcmQ8c3RyaW5nLCBIYW5kbGVyPl1cbiAqIEB0eXBlZGVmIE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiAocmVxdWlyZWQpLlxuICogQHByb3BlcnR5IHtJbnZhbGlkfSBbaW52YWxpZF1cbiAqICAgSGFuZGxlciB0byB1c2UgZm9yIGludmFsaWQgdmFsdWVzLlxuICogQHByb3BlcnR5IHtVbmtub3dufSBbdW5rbm93bl1cbiAqICAgSGFuZGxlciB0byB1c2UgZm9yIHVua25vd24gdmFsdWVzLlxuICogQHByb3BlcnR5IHtIYW5kbGVyc30gW2hhbmRsZXJzXVxuICogICBIYW5kbGVycyB0byB1c2UuXG4gKi9cblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBIYW5kbGUgdmFsdWVzIGJhc2VkIG9uIGEgZmllbGQuXG4gKlxuICogQHRlbXBsYXRlIHtJbnZhbGlkSGFuZGxlcn0gW0ludmFsaWQ9SW52YWxpZEhhbmRsZXJdXG4gKiBAdGVtcGxhdGUge1Vua25vd25IYW5kbGVyfSBbVW5rbm93bj1Vbmtub3duSGFuZGxlcl1cbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgSGFuZGxlcj59IFtIYW5kbGVycz1SZWNvcmQ8c3RyaW5nLCBIYW5kbGVyPl1cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqICAgRmllbGQgdG8gc3dpdGNoIG9uLlxuICogQHBhcmFtIHtPcHRpb25zPEludmFsaWQsIFVua25vd24sIEhhbmRsZXJzPn0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKHJlcXVpcmVkKS5cbiAqIEByZXR1cm5zIHt7dW5rbm93bjogVW5rbm93biwgaW52YWxpZDogSW52YWxpZCwgaGFuZGxlcnM6IEhhbmRsZXJzLCAoLi4ucGFyYW1ldGVyczogUGFyYW1ldGVyczxIYW5kbGVyc1trZXlvZiBIYW5kbGVyc10+KTogUmV0dXJuVHlwZTxIYW5kbGVyc1trZXlvZiBIYW5kbGVyc10+LCAoLi4ucGFyYW1ldGVyczogUGFyYW1ldGVyczxVbmtub3duPik6IFJldHVyblR5cGU8VW5rbm93bj59fVxuICovXG5leHBvcnQgZnVuY3Rpb24gendpdGNoKGtleSwgb3B0aW9ucykge1xuICBjb25zdCBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge31cblxuICAvKipcbiAgICogSGFuZGxlIG9uZSB2YWx1ZS5cbiAgICpcbiAgICogQmFzZWQgb24gdGhlIGJvdW5kIGBrZXlgLCBhIHJlc3BlY3RpdmUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZC5cbiAgICogSWYgYHZhbHVlYCBpcyBub3QgYW4gb2JqZWN0LCBvciBkb2VzbuKAmXQgaGF2ZSBhIGBrZXlgIHByb3BlcnR5LCB0aGUgc3BlY2lhbFxuICAgKiDigJxpbnZhbGlk4oCdIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQuXG4gICAqIElmIGB2YWx1ZWAgaGFzIGFuIHVua25vd24gYGtleWAsIHRoZSBzcGVjaWFsIOKAnHVua25vd27igJ0gaGFuZGxlciB3aWxsIGJlXG4gICAqIGNhbGxlZC5cbiAgICpcbiAgICogQWxsIGFyZ3VtZW50cywgYW5kIHRoZSBjb250ZXh0IG9iamVjdCwgYXJlIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBoYW5kbGVyLFxuICAgKiBhbmQgaXTigJlzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICpcbiAgICogQHRoaXMge3Vua25vd259XG4gICAqICAgQW55IGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3Vua25vd259IFt2YWx1ZV1cbiAgICogICBBbnkgdmFsdWUuXG4gICAqIEBwYXJhbSB7Li4udW5rbm93bn0gcGFyYW1ldGVyc1xuICAgKiAgIEFyYml0cmFyeSBwYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgendpdGNoLlxuICAgKiBAcHJvcGVydHkge0hhbmRsZXJ9IGludmFsaWRcbiAgICogICBIYW5kbGUgZm9yIHZhbHVlcyB0aGF0IGRvIG5vdCBoYXZlIGEgY2VydGFpbiBJRCBmaWVsZC5cbiAgICogQHByb3BlcnR5IHtIYW5kbGVyfSB1bmtub3duXG4gICAqICAgSGFuZGxlIHZhbHVlcyB0aGF0IGRvIGhhdmUgYSBjZXJ0YWluIElEIGZpZWxkLCBidXQgaXTigJlzIHNldCB0byBhIHZhbHVlXG4gICAqICAgdGhhdCBpcyBub3QgbGlzdGVkIGluIHRoZSBgaGFuZGxlcnNgIHJlY29yZC5cbiAgICogQHByb3BlcnR5IHtIYW5kbGVyc30gaGFuZGxlcnNcbiAgICogICBSZWNvcmQgb2YgaGFuZGxlcnMuXG4gICAqIEByZXR1cm5zIHt1bmtub3dufVxuICAgKiAgIEFueXRoaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gb25lKHZhbHVlLCAuLi5wYXJhbWV0ZXJzKSB7XG4gICAgLyoqIEB0eXBlIHtIYW5kbGVyfHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgZm4gPSBvbmUuaW52YWxpZFxuICAgIGNvbnN0IGhhbmRsZXJzID0gb25lLmhhbmRsZXJzXG5cbiAgICBpZiAodmFsdWUgJiYgb3duLmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSW5kZXhhYmxlLlxuICAgICAgY29uc3QgaWQgPSBTdHJpbmcodmFsdWVba2V5XSlcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSW5kZXhhYmxlLlxuICAgICAgZm4gPSBvd24uY2FsbChoYW5kbGVycywgaWQpID8gaGFuZGxlcnNbaWRdIDogb25lLnVua25vd25cbiAgICB9XG5cbiAgICBpZiAoZm4pIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHZhbHVlLCAuLi5wYXJhbWV0ZXJzKVxuICAgIH1cbiAgfVxuXG4gIG9uZS5oYW5kbGVycyA9IHNldHRpbmdzLmhhbmRsZXJzIHx8IHt9XG4gIG9uZS5pbnZhbGlkID0gc2V0dGluZ3MuaW52YWxpZFxuICBvbmUudW5rbm93biA9IHNldHRpbmdzLnVua25vd25cblxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtYXRjaGVzIVxuICByZXR1cm4gb25lXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js\n"));

/***/ })

}]);